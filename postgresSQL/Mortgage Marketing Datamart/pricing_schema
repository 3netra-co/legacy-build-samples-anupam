--
-- PostgreSQL database dump
--

-- Dumped from database version 11.12
-- Dumped by pg_dump version 13.3

-- Started on 2022-02-19 11:41:50 EST

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 12 (class 2615 OID 16412)
-- Name: pricing; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA pricing;


ALTER SCHEMA pricing OWNER TO trinetra;

--
-- TOC entry 458 (class 1255 OID 16472)
-- Name: fv_at_period(numeric, numeric, numeric, numeric); Type: FUNCTION; Schema: pricing; Owner: postgres
--

CREATE FUNCTION pricing.fv_at_period(loan_amt numeric, rate numeric, term numeric, fv_period numeric) RETURNS numeric
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
select 
(
	ROUND(LOAN_AMT*(POWER((1 + RATE/1200),TERM) - POWER((1 + RATE/1200),FV_PERIOD))/(POWER((1 + RATE/1200),TERM) - 1),2)
)
$$;


ALTER FUNCTION pricing.fv_at_period(loan_amt numeric, rate numeric, term numeric, fv_period numeric) OWNER TO trinetra;

--
-- TOC entry 459 (class 1255 OID 16473)
-- Name: months_between(timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: pricing; Owner: postgres
--

CREATE FUNCTION pricing.months_between(t_start timestamp without time zone, t_end timestamp without time zone) RETURNS integer
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
select ((extract('years' from $2)::int -  extract('years' from $1)::int) * 12) 
    - extract('month' from $1)::int + extract('month' from $2)::int
$_$;


ALTER FUNCTION pricing.months_between(t_start timestamp without time zone, t_end timestamp without time zone) OWNER TO trinetra;

--
-- TOC entry 460 (class 1255 OID 16474)
-- Name: nper_at_bal(numeric, numeric, numeric, numeric); Type: FUNCTION; Schema: pricing; Owner: postgres
--

CREATE FUNCTION pricing.nper_at_bal(loan_amt numeric, rate numeric, pmt numeric, fv_bal numeric) RETURNS numeric
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
select 
(
	ROUND(LOG(10, (-PMT + FV_BAL * RATE/1200) / (-PMT + LOAN_AMT * RATE/1200) ) / log(10, 1+RATE/1200),0)
)
$$;


ALTER FUNCTION pricing.nper_at_bal(loan_amt numeric, rate numeric, pmt numeric, fv_bal numeric) OWNER TO trinetra;

--
-- TOC entry 461 (class 1255 OID 16475)
-- Name: pmt(numeric, numeric, numeric); Type: FUNCTION; Schema: pricing; Owner: postgres
--

CREATE FUNCTION pricing.pmt(loan_amt numeric, rate numeric, term numeric) RETURNS numeric
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
select 
(
	ROUND((LOAN_AMT*(RATE/1200*POWER((1+RATE/1200), TERM))/(POWER((1+RATE/1200),TERM)-1)),2)
)
$$;


ALTER FUNCTION pricing.pmt(loan_amt numeric, rate numeric, term numeric) OWNER TO trinetra;

--
-- TOC entry 462 (class 1255 OID 16476)
-- Name: pricing_1_import_lender_data(text); Type: PROCEDURE; Schema: pricing; Owner: postgres
--

CREATE PROCEDURE pricing.pricing_1_import_lender_data(client text)
    LANGUAGE plpgsql
    AS $$

DECLARE
str text := client;
BEGIN

EXECUTE 'truncate table pricing.loan_input_tab';
EXECUTE 'truncate table pricing.llpa_tab';
EXECUTE 'truncate table pricing.product_tab';
EXECUTE 'truncate table pricing.ratesheet_tab';
EXECUTE 'truncate table pricing.lender_pricing_assumptions_tab';

EXECUTE format('insert into pricing.loan_input_tab select * from ' || str || ' .loan_input_tab');	
EXECUTE format('insert into pricing.product_tab select * from ' || str || ' .pricing_product_dump');
EXECUTE format('insert into pricing.ratesheet_tab select * from ' || str || ' .pricing_ratesheet_dump');
EXECUTE format('insert into pricing.lender_pricing_assumptions_tab select * from ' || str || ' .pricing_lender_pricing_assumptions');

EXECUTE format('
			INSERT INTO pricing.LLPA_TAB
			SELECT
			COMPANY_NAME,
			LLPA_CODE,
			LLPA_SOURCE,
			LLPA_DESCRIPTION,
			STRING_TO_ARRAY(PURPOSE_CODE,'','') AS PURPOSE_CODE,
			STRING_TO_ARRAY(PROGRAM_TYPE,'','') AS PROGRAM_TYPE,
			STRING_TO_ARRAY(PROPERTY_TYPE,'','') AS PROPERTY_TYPE,
			STRING_TO_ARRAY(AMORT_TYPE,'','') AS AMORT_TYPE,
			STRING_TO_ARRAY(OCCUPANCY_TYPE,'','') AS OCCUPANCY_TYPE,
			STRING_TO_ARRAY(NUMBER_OF_UNITS,'','') AS NUMBER_OF_UNITS,
			STRING_TO_ARRAY(LLPA_PROP_STATE,'','') AS LLPA_PROP_STATE,
			MIN_LLPA_UPB,
			MAX_LLPA_UPB,
			MIN_LLPA_LTV,
			MAX_LLPA_LTV,
			MIN_LLPA_FICO,
			MAX_LLPA_FICO,
			MIN_LLPA_CLTV,
			MAX_LLPA_CLTV,
			MIN_LLPA_TERM,
			MAX_LLPA_TERM,
			LLPA_PTS
			FROM ' || str || '.pricing_llpa_dump');

execute format('insert into public.process_log values(upper(''' || str ||'''), ''PRICING'', ''1. Import Lender Data'', null, current_timestamp)');


END;
$$;


ALTER PROCEDURE pricing.pricing_1_import_lender_data(client text) OWNER TO trinetra;

--
-- TOC entry 463 (class 1255 OID 16477)
-- Name: pricing_2_import_general_data(text); Type: PROCEDURE; Schema: pricing; Owner: postgres
--

CREATE PROCEDURE pricing.pricing_2_import_general_data(client text)
    LANGUAGE plpgsql
    AS $$

DECLARE
str_client text := client;
BEGIN

EXECUTE 'truncate table pricing.PROGRAM_TAB';
EXECUTE 'truncate table pricing.PURPOSE_TAB';
EXECUTE 'truncate table pricing.MI_FACTORS_TAB';
EXECUTE 'truncate table pricing.ZIP_CODE_TAB';
EXECUTE 'truncate table pricing.LOAN_LIMITS_TAB';
EXECUTE 'truncate table pricing.PRICING_INPUT_TAB';
EXECUTE 'truncate table pricing.PRICING_STG_1_LOAN_INPUT';
EXECUTE 'truncate table pricing.PRICING_STG_2_LLPA_DETAILS';
EXECUTE 'truncate table pricing.PRICING_STG_3_RATE_DATA';
EXECUTE 'truncate table pricing.PRICING_OUTPUT_TAB';

INSERT INTO pricing.PROGRAM_TAB
SELECT
PROGRAM_TYPE,
PROGRAM_DESCRIPTION
FROM pricing.STG_PROGRAM_DUMP;

INSERT INTO pricing.PURPOSE_TAB
SELECT
PURPOSE_CODE,
PURPOSE_DESCRIPTION
FROM pricing.STG_PURPOSE_DUMP;

INSERT INTO pricing.ZIP_CODE_TAB
SELECT DISTINCT
ZIP_CODE,
STATE,
COUNTY_CODE,
COUNTY_NAME
FROM
(
	SELECT 
	CAST(SUBSTR(STR,1,4) AS NUMERIC) AS FIELD_OFFICE,
	SUBSTR(STR,5,5) AS ZIP_CODE,
	SUBSTR(STR,14,17) AS CITY,
	SUBSTR(STR,31,2) AS STATE,
	SUBSTR(STR,33,3) AS COUNTY_CODE,
	SUBSTR(STR,36,15) AS COUNTY_NAME,
	SUBSTR(STR,51,1) AS LENDER_OPTION
	from pricing.STG_ZIP_CODE_DUMP
) X;

INSERT INTO pricing.MI_FACTORS_TAB
SELECT
MI_CODE,
MI_RATE_TYPE,
MIN_TERM_MOS,
MAX_TERM_MOS,
MIN_FICO,
MAX_FICO,
MIN_LTV,
MAX_LTV,
MIN_UPB,
MAX_UPB,
MIN_ORG_DATE,
MAX_ORG_DATE,
MI_FACTOR,
MI_DURATION_MOS,
MI_DURATION_LTV,
UFMIP_FACTOR
FROM pricing.STG_MI_FACTORS_DUMP;

INSERT INTO pricing.LOAN_LIMITS_TAB
SELECT 
'C' AS LOAN_TYPE,
SUBSTR(STR,1,5) AS MSA_CODE,
SUBSTR(STR,6,5) AS METRO_DIV_CODE,
SUBSTR(STR,11,50) AS MSA_NAME,
SUBSTR(STR,61,5) AS SOA_CODE,
SUBSTR(STR,66,1) AS LIMIT_TYPE,
CAST(SUBSTR(STR,67,7) AS NUMERIC) AS MEDIAN_PRICE,
CAST(SUBSTR(STR,74,7) AS NUMERIC) AS LIMIT_1_UNIT,
CAST(SUBSTR(STR,81,7) AS NUMERIC) AS LIMIT_2_UNIT,
CAST(SUBSTR(STR,88,7) AS NUMERIC) AS LIMIT_3_UNIT,
CAST(SUBSTR(STR,95,7) AS NUMERIC) AS LIMIT_4_UNIT,
SUBSTR(STR,102,2) AS STATE,
SUBSTR(STR,104,3) AS COUNTY_CODE,
SUBSTR(STR,107,26) AS STATE_NAME,
SUBSTR(STR,133,15) AS COUNTY_NAME,
TO_DATE(SUBSTR(STR,148,8),'YYYYMMDD') AS COUNTY_TRAN_DATE,
TO_DATE(SUBSTR(STR,156,8),'YYYYMMDD') AS LIMIT_DATE,
CAST(SUBSTR(STR,164,7) AS NUMERIC) AS MEDIAN_PRICE_LIMIT,
CAST(SUBSTR(STR,171,4) AS NUMERIC) AS YEAR_FOR_MEDIAN_PRICE
FROM pricing.STG_LOAN_LIMIT_C_DUMP
WHERE REPLACE(SUBSTR(STR,1,5),' ','X') <> 'XXXXX';

INSERT INTO pricing.LOAN_LIMITS_TAB
SELECT 
'G' AS LOAN_TYPE,
SUBSTR(STR,1,5) AS MSA_CODE,
SUBSTR(STR,6,5) AS METRO_DIV_CODE,
SUBSTR(STR,11,50) AS MSA_NAME,
SUBSTR(STR,61,5) AS SOA_CODE,
SUBSTR(STR,66,1) AS LIMIT_TYPE,
CAST(SUBSTR(STR,67,7) AS NUMERIC) AS MEDIAN_PRICE,
CAST(SUBSTR(STR,74,7) AS NUMERIC) AS LIMIT_1_UNIT,
CAST(SUBSTR(STR,81,7) AS NUMERIC) AS LIMIT_2_UNIT,
CAST(SUBSTR(STR,88,7) AS NUMERIC) AS LIMIT_3_UNIT,
CAST(SUBSTR(STR,95,7) AS NUMERIC) AS LIMIT_4_UNIT,
SUBSTR(STR,102,2) AS STATE,
SUBSTR(STR,104,3) AS COUNTY_CODE,
SUBSTR(STR,107,26) AS STATE_NAME,
SUBSTR(STR,133,15) AS COUNTY_NAME,
TO_DATE(SUBSTR(STR,148,8),'YYYYMMDD') AS COUNTY_TRAN_DATE,
TO_DATE(SUBSTR(STR,156,8),'YYYYMMDD') AS LIMIT_DATE,
CAST(SUBSTR(STR,164,7) AS NUMERIC) AS MEDIAN_PRICE_LIMIT,
CAST(SUBSTR(STR,171,4) AS NUMERIC) AS YEAR_FOR_MEDIAN_PRICE
FROM pricing.STG_LOAN_LIMIT_F_DUMP
WHERE REPLACE(SUBSTR(STR,1,5),' ','X') <> 'XXXXX';

execute format('insert into public.process_log values(upper(''' || str_client ||'''), ''PRICING'', ''2. Import General Data'', null, current_timestamp)');


END;
$$;


ALTER PROCEDURE pricing.pricing_2_import_general_data(client text) OWNER TO trinetra;

--
-- TOC entry 466 (class 1255 OID 16478)
-- Name: pricing_3_create_input_tab(text); Type: PROCEDURE; Schema: pricing; Owner: postgres
--

CREATE PROCEDURE pricing.pricing_3_create_input_tab(client text)
    LANGUAGE plpgsql
    AS $$
DECLARE
str text := client;
BEGIN

INSERT INTO pricing.PRICING_STG_1_LOAN_INPUT
SELECT
L.COMPANY_NAME,
L.UNIQUE_ID,
L.CURRENT_BORROWER_FICO,
L.CURRENT_PROP_STATE,
L.CURRENT_PROP_ZIP,
L.CURRENT_LOAN_UPB,
L.CURRENT_LOAN_RATE,
L.CURRENT_LOAN_PI,
L.CURRENT_LOAN_MI,
L.CURRENT_LOAN_TYPE,
L.CURRENT_LOAN_TERM,
L.CURRENT_LOAN_ORG_DATE,
L.CURRENT_LOAN_REM_TERM,
L.CURRENT_SECOND_LIEN_AMT,
L.CURRENT_PROP_VALUE,
L.CURRENT_PROPERTY_TYPE,
L.CURRENT_OCCUPANCY_TYPE,
L.CURRENT_NUMBER_OF_UNITS,
L.INVESTOR_NAME,
L.LOAN_LIMIT_TYPE,
L.HB_LIMIT,
L.BASE_LIMIT,
PUR.PURPOSE_CODE AS LOAN_PURPOSE,
CASE WHEN PUR.PURPOSE_CODE = 'C' THEN LEAST(L.HB_LIMIT, ROUND(L.CURRENT_PROP_VALUE * CO_LTV_CAP,2)) ELSE ROUND(L.CURRENT_LOAN_UPB,2) END AS INTERIM_LOAN_AMT,
ROUND((CASE WHEN PUR.PURPOSE_CODE = 'C' THEN LEAST(L.HB_LIMIT, ROUND(L.CURRENT_PROP_VALUE * CO_LTV_CAP,2)) ELSE ROUND(L.CURRENT_LOAN_UPB,2) END)/CURRENT_PROP_VALUE * 100, 2) AS INTERIM_LTV,
CASE WHEN COALESCE(L.CURRENT_SECOND_LIEN_AMT,0) = 0 THEN 0 ELSE 
ROUND((CASE WHEN PUR.PURPOSE_CODE = 'C' THEN LEAST(L.HB_LIMIT, ROUND(L.CURRENT_PROP_VALUE * CO_LTV_CAP,2)) + L.CURRENT_SECOND_LIEN_AMT ELSE ROUND(L.CURRENT_LOAN_UPB,2) + L.CURRENT_SECOND_LIEN_AMT END)/CURRENT_PROP_VALUE * 100, 2) 
END AS INTERIM_CLTV,
STRING_TO_ARRAY(NULL,',') AS INTERIM_PROGRAM_TYPE
FROM
(
	SELECT
	LOAN.*,
	LIM.LOAN_TYPE AS LOAN_LIMIT_TYPE,
	CASE WHEN LOAN.CURRENT_NUMBER_OF_UNITS = '1' THEN LIM.LIMIT_1_UNIT
		 WHEN LOAN.CURRENT_NUMBER_OF_UNITS = '2' THEN LIM.LIMIT_2_UNIT
		 WHEN LOAN.CURRENT_NUMBER_OF_UNITS = '3' THEN LIM.LIMIT_3_UNIT
		 WHEN LOAN.CURRENT_NUMBER_OF_UNITS = '4' THEN LIM.LIMIT_4_UNIT
	END AS HB_LIMIT, 
	CASE WHEN LOAN.CURRENT_NUMBER_OF_UNITS = '1' THEN LIM.MIN_1_UNIT
		 WHEN LOAN.CURRENT_NUMBER_OF_UNITS = '2' THEN LIM.MIN_2_UNIT
		 WHEN LOAN.CURRENT_NUMBER_OF_UNITS = '3' THEN LIM.MIN_3_UNIT
		 WHEN LOAN.CURRENT_NUMBER_OF_UNITS = '4' THEN LIM.MIN_4_UNIT
	END AS BASE_LIMIT,
	ROUND(ASUM.BASE_CASHOUT_LTV_PER/100,2) AS CO_LTV_CAP
	FROM pricing.LOAN_INPUT_TAB LOAN 
	INNER JOIN pricing.VW_CONF_GOVT_LOAN_LIMITS LIM ON LOAN.CURRENT_PROP_ZIP = LIM.ZIP_CODE
	INNER JOIN pricing.LENDER_PRICING_ASSUMPTIONS_TAB ASUM ON LOAN.COMPANY_NAME = ASUM.COMPANY_NAME
) L,
pricing.PURPOSE_TAB PUR
WHERE PURPOSE_CODE IN ('C','R') 
AND
(	(PUR.PURPOSE_CODE = 'R')
OR
	(PUR.PURPOSE_CODE = 'C' AND LEAST(L.HB_LIMIT, ROUND(L.CURRENT_PROP_VALUE * CO_LTV_CAP,2)) > L.CURRENT_LOAN_UPB - 1000)
 );

UPDATE pricing.PRICING_STG_1_LOAN_INPUT
SET INTERIM_PROGRAM_TYPE = STRING_TO_ARRAY(pricing.PROG_TYP( CURRENT_LOAN_TYPE, LOAN_LIMIT_TYPE, LOAN_PURPOSE, INTERIM_LOAN_AMT, HB_LIMIT, BASE_LIMIT),',');

INSERT INTO pricing.PRICING_INPUT_TAB
SELECT
S.COMPANY_NAME,
S.UNIQUE_ID,
'PE' || LPAD(CAST(ROW_NUMBER() OVER() AS TEXT),10,'0') AS SCENARIO_ID,
S.CURRENT_BORROWER_FICO,
S.CURRENT_PROP_STATE,
S.CURRENT_PROP_ZIP,
S.CURRENT_LOAN_UPB,
S.CURRENT_LOAN_RATE,
S.CURRENT_LOAN_PI,
S.CURRENT_LOAN_MI,
S.CURRENT_LOAN_TYPE,
S.CURRENT_LOAN_TERM,
S.CURRENT_LOAN_ORG_DATE,
S.CURRENT_LOAN_REM_TERM,
S.CURRENT_SECOND_LIEN_AMT,
S.CURRENT_PROP_VALUE,	
S.CURRENT_PROPERTY_TYPE,
S.CURRENT_OCCUPANCY_TYPE,
S.CURRENT_NUMBER_OF_UNITS,
S.INVESTOR_NAME,
S.HB_LIMIT,
S.BASE_LIMIT,
S.LOAN_PURPOSE,
S.INTERIM_LOAN_AMT,
S.INTERIM_LTV,
S.INTERIM_CLTV,
PR.PRODUCT_ID,
PR.PROGRAM_TYPE,
PR.PRODUCT_DESCRIPTION,
PR.PRODUCT_TERM,
PR.AMORT_TYPE,
PR.MI_RATE_TYPE,
PR.FIRST_ADJ,
PR.FIRST_INC,
PR.SEC_ADJ,
PR.SEC_INC,
PR.MARGIN,
PR.INDX,
PR.LIFE_CAP,	
0 AS MI_DURATION_MOS,
0 AS MI_DURATION_LTV,
0 AS UFMIP_FACTOR,
0 AS MI_FACTOR,
100 AS NET_LLPA
FROM pricing.PRICING_STG_1_LOAN_INPUT S,
pricing.PRODUCT_TAB PR
WHERE S.COMPANY_NAME = PR.COMPANY_NAME 
AND PR.PROGRAM_TYPE = ANY(S.INTERIM_PROGRAM_TYPE)
AND S.INTERIM_LTV BETWEEN PR.MIN_PROD_LTV AND PR.MAX_PROD_LTV
AND S.INTERIM_LOAN_AMT BETWEEN PR.MIN_PROD_UPB AND PR.MAX_PROD_UPB;

UPDATE pricing.PRICING_INPUT_TAB SET 
	MI_DURATION_MOS = MI_FACTORS_TAB.MI_DURATION_MOS,
	MI_DURATION_LTV = MI_FACTORS_TAB.MI_DURATION_LTV,
	UFMIP_FACTOR = MI_FACTORS_TAB.UFMIP_FACTOR,
	MI_FACTOR = MI_FACTORS_TAB.MI_FACTOR
FROM pricing.MI_FACTORS_TAB 
WHERE PRICING_INPUT_TAB.MI_RATE_TYPE = MI_FACTORS_TAB.MI_RATE_TYPE 
AND
(
	MI_FACTORS_TAB.MI_RATE_TYPE IS NULL OR
	(
		PRICING_INPUT_TAB.PRODUCT_TERM BETWEEN MI_FACTORS_TAB.MIN_TERM_MOS AND MI_FACTORS_TAB.MAX_TERM_MOS AND
		PRICING_INPUT_TAB.CURRENT_BORROWER_FICO BETWEEN MI_FACTORS_TAB.MIN_FICO AND MI_FACTORS_TAB.MAX_FICO AND
		PRICING_INPUT_TAB.INTERIM_LTV BETWEEN MI_FACTORS_TAB.MIN_LTV AND MI_FACTORS_TAB.MAX_LTV AND
		PRICING_INPUT_TAB.INTERIM_LOAN_AMT BETWEEN MI_FACTORS_TAB.MIN_UPB AND MI_FACTORS_TAB.MAX_UPB AND
		PRICING_INPUT_TAB.CURRENT_LOAN_ORG_DATE BETWEEN MI_FACTORS_TAB.MIN_ORG_DATE AND MI_FACTORS_TAB.MAX_ORG_DATE 
	)
);

execute format('insert into public.process_log values(upper(''' || str ||'''), ''PRICING'', ''3. Create Input Tab'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE pricing.pricing_3_create_input_tab(client text) OWNER TO trinetra;

--
-- TOC entry 467 (class 1255 OID 16479)
-- Name: pricing_4_apply_llpa_pull_rate(text); Type: PROCEDURE; Schema: pricing; Owner: postgres
--

CREATE PROCEDURE pricing.pricing_4_apply_llpa_pull_rate(client text)
    LANGUAGE plpgsql
    AS $$

DECLARE
str text := client;
BEGIN

INSERT INTO pricing.PRICING_STG_2_LLPA_DETAILS
SELECT 
PE.COMPANY_NAME,
PE.UNIQUE_ID,
PE.SCENARIO_ID,
LA.LLPA_CODE,
LA.LLPA_SOURCE,
LA.LLPA_DESCRIPTION,
LA.PURPOSE_CODE,
LA.PROGRAM_TYPE,
LA.PROPERTY_TYPE,
LA.AMORT_TYPE,
LA.OCCUPANCY_TYPE,
LA.NUMBER_OF_UNITS,
LA.LLPA_PROP_STATE,
LA.MIN_LLPA_UPB,
LA.MAX_LLPA_UPB,
LA.MIN_LLPA_LTV,
LA.MAX_LLPA_LTV,
LA.MIN_LLPA_FICO,
LA.MAX_LLPA_FICO,
LA.MIN_LLPA_CLTV,
LA.MAX_LLPA_CLTV,
LA.MIN_LLPA_TERM,
LA.MAX_LLPA_TERM,
LA.LLPA_PTS
FROM 
pricing.PRICING_INPUT_TAB PE,
pricing.LLPA_TAB LA
WHERE PE.COMPANY_NAME = LA.COMPANY_NAME  
AND PE.LOAN_PURPOSE = ANY(LA.PURPOSE_CODE)
AND PE.PROGRAM_TYPE = ANY(LA.PROGRAM_TYPE) 
AND PE.CURRENT_PROPERTY_TYPE = ANY(LA.PROPERTY_TYPE)
AND PE.AMORT_TYPE = ANY(LA.AMORT_TYPE)
AND PE.CURRENT_OCCUPANCY_TYPE = ANY(LA.OCCUPANCY_TYPE)
AND PE.CURRENT_NUMBER_OF_UNITS = ANY(LA.NUMBER_OF_UNITS)
AND (LA.LLPA_PROP_STATE IS NULL OR PE.CURRENT_PROP_STATE = ANY(LA.LLPA_PROP_STATE))
AND PE.INTERIM_LOAN_AMT BETWEEN LA.MIN_LLPA_UPB AND LA.MAX_LLPA_UPB
AND PE.INTERIM_LTV BETWEEN LA.MIN_LLPA_LTV AND LA.MAX_LLPA_LTV
AND PE.CURRENT_BORROWER_FICO BETWEEN LA.MIN_LLPA_FICO AND LA.MAX_LLPA_FICO
AND PE.INTERIM_CLTV BETWEEN LA.MIN_LLPA_CLTV AND LA.MAX_LLPA_CLTV
AND PE.PRODUCT_TERM BETWEEN LA.MIN_LLPA_TERM AND LA.MAX_LLPA_TERM;

UPDATE pricing.PRICING_INPUT_TAB PE
SET NET_LLPA = LA.NET_LLPA
FROM
(
	SELECT SCENARIO_ID, SUM(LLPA_PTS) AS NET_LLPA
	FROM pricing.PRICING_STG_2_LLPA_DETAILS
	GROUP BY SCENARIO_ID
) LA
WHERE PE.SCENARIO_ID = LA.SCENARIO_ID;

/* FOR FAM */
UPDATE pricing.PRICING_INPUT_TAB PE
SET NET_LLPA = NET_LLPA + LA.POINTS
FROM
FAM.ADDITIONAL_LOAN_ADJ LA
WHERE PE.COMPANY_NAME = LA.COMPANY_NAME
AND PE.UNIQUE_ID = LA.UNIQUE_ID
AND PE.PRODUCT_ID = LA.PRODUCT_ID;

INSERT INTO pricing.PRICING_STG_3_RATE_DATA
SELECT 
COMPANY_NAME,
UNIQUE_ID,
SCENARIO_ID,
RATE_DATE,
LOCK_PERIOD,
RATE,
POINTS,
NET_POINTS
FROM
(
	SELECT 
	PE.COMPANY_NAME,
	PE.UNIQUE_ID,
	PE.SCENARIO_ID,
	RS.RATE_DATE,
	RS.LOCK_PERIOD,
	RS.RATE,
	RS.POINTS,
	RS.POINTS + PE.NET_LLPA AS NET_POINTS,
	ROW_NUMBER() OVER(PARTITION BY PE.SCENARIO_ID ORDER BY RS.POINTS + PE.NET_LLPA) AS RATE_RANK
	FROM pricing.PRICING_INPUT_TAB PE,
	pricing.RATESHEET_TAB RS,
	pricing.LENDER_PRICING_ASSUMPTIONS_TAB ASUM
	WHERE PE.COMPANY_NAME = RS.COMPANY_NAME
	AND RS.COMPANY_NAME = ASUM.COMPANY_NAME
	AND PE.PRODUCT_ID = RS.PRODUCT_ID
	AND RS.LOCK_PERIOD = ASUM.LOCK_PERIOD
	AND RS.POINTS + PE.NET_LLPA >= ASUM.MIN_BASE_POINTS 
	AND RS.POINTS + PE.NET_LLPA <= ASUM.MAX_BASE_POINTS
) Z
WHERE RATE_RANK = 1;

execute format('insert into public.process_log values(upper(''' || str ||'''), ''PRICING'', ''4. Apply LLPAs & Rate'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE pricing.pricing_4_apply_llpa_pull_rate(client text) OWNER TO trinetra;

--
-- TOC entry 468 (class 1255 OID 16480)
-- Name: pricing_5_create_output_tab(text); Type: PROCEDURE; Schema: pricing; Owner: postgres
--

CREATE PROCEDURE pricing.pricing_5_create_output_tab(client text)
    LANGUAGE plpgsql
    AS $$
DECLARE
str text := client;
    CNT CURSOR IS
				SELECT 
				PE.COMPANY_NAME,
				PE.UNIQUE_ID,
				PE.SCENARIO_ID,
				PE.CURRENT_BORROWER_FICO AS CREDIT_SCORE,
				RS.RATE_DATE,
				RS.LOCK_PERIOD,
				PUR.PURPOSE_DESCRIPTION AS NEW_LOAN_PURPOSE,
				PE.PROGRAM_TYPE AS NEW_PROGRAM_TYPE,
				PE.PRODUCT_ID AS NEW_PRODUCT_ID,
				PE.PRODUCT_DESCRIPTION AS NEW_PRODUCT_DESCRIPTION,
				PE.AMORT_TYPE AS NEW_AMORT_TYPE,
				PE.PRODUCT_TERM AS NEW_TERM,
				ROUND(PE.INTERIM_LOAN_AMT + (PE.INTERIM_LOAN_AMT * PE.UFMIP_FACTOR/100), 2) AS NEW_LOAN_AMOUNT,
				ROUND((PE.INTERIM_LOAN_AMT + (PE.INTERIM_LOAN_AMT * PE.UFMIP_FACTOR/100)) / PE.CURRENT_PROP_VALUE * 100, 2) AS NEW_LTV,
				RS.RATE AS NEW_RATE,
				ROUND(COALESCE(PE.INDX + PE.MARGIN,0),3) AS NEW_ARM_RESET_RATE,
				COALESCE(PE.FIRST_ADJ,0) AS NEW_ARM_RESET_TERM,
				PE.NET_LLPA AS NEW_NET_LLPA,
				RS.NET_POINTS AS NEW_POINTS_PCT,
				0 AS NEW_APR,
				ASUM.BASE_FEE AS NEW_BASE_FEES,
				ROUND(PE.INTERIM_LOAN_AMT * RS.NET_POINTS/100, 2) AS NEW_POINTS_DOL,
				CASE WHEN ASUM.INTERIM_INTEREST_FLAG = 'Y' THEN ROUND(PE.INTERIM_LOAN_AMT * RS.RATE/2400, 2) ELSE 0 END AS NEW_INTERIM_INT,
				(
				ASUM.BASE_FEE 
				+ ROUND(PE.INTERIM_LOAN_AMT * RS.NET_POINTS/100, 2) 
				+ CASE WHEN ASUM.INTERIM_INTEREST_FLAG = 'Y' THEN ROUND(PE.INTERIM_LOAN_AMT * RS.RATE/2400, 2) ELSE 0 END 
				) AS NEW_FEES_TOTAL,
				ROUND(pricing.PMT(ROUND(PE.INTERIM_LOAN_AMT + (PE.INTERIM_LOAN_AMT * PE.UFMIP_FACTOR/100), 2), RS.RATE, PE.PRODUCT_TERM),2) AS NEW_PI,
				ROUND(PE.CURRENT_LOAN_PI - pricing.PMT(ROUND(PE.INTERIM_LOAN_AMT + (PE.INTERIM_LOAN_AMT * PE.UFMIP_FACTOR/100), 2), RS.RATE, PE.PRODUCT_TERM),2) AS NEW_PI_SAVINGS_MO,
				ROUND
				((
					(PE.CURRENT_LOAN_PI + PE.CURRENT_LOAN_MI)
					- (pricing.PMT(ROUND(PE.INTERIM_LOAN_AMT + (PE.INTERIM_LOAN_AMT * PE.UFMIP_FACTOR/100), 2), RS.RATE, PE.PRODUCT_TERM) +
					  (ROUND(PE.INTERIM_LOAN_AMT + (PE.INTERIM_LOAN_AMT * PE.UFMIP_FACTOR/100), 2) * MI_FACTOR/1200)) 
				),2) AS NEW_PIMI_SAVINGS_MO,
				ROUND(PE.INTERIM_LOAN_AMT - PE.CURRENT_LOAN_UPB, 2) AS NEW_CASHOUT,
				ROUND
				(
				(PE.CURRENT_LOAN_PI * PE.CURRENT_LOAN_REM_TERM) - 
				((pricing.PMT(ROUND(PE.INTERIM_LOAN_AMT + (PE.INTERIM_LOAN_AMT * PE.UFMIP_FACTOR/100), 2), RS.RATE, PE.PRODUCT_TERM))  * PE.PRODUCT_TERM)
				,2) AS NEW_LOL_SAVINGS,
				PE.CURRENT_LOAN_REM_TERM - PE.PRODUCT_TERM AS NEW_TERM_REDUCTION,
				COALESCE(PE.UFMIP_FACTOR,0) AS NEW_UFMIP_PCT,
				COALESCE(PE.MI_FACTOR,0) AS NEW_MIP_PCT,
				
				/*CASE WHEN COALESCE(PE.MI_FACTOR,0) > 0 THEN
					CASE WHEN COALESCE(PE.MI_DURATION_MOS) > 0 THEN MI_DURATION_MOS
					ELSE 
						CASE WHEN PE.FIRST_ADJ > 0 THEN
							CASE WHEN FV_AT_PERIOD(PE.INTERIM_LOAN_AMT, RS.RATE, PE.PRODUCT_TERM, PE.FIRST_ADJ)/ PE.CURRENT_PROP_VALUE *100 <= PE.MI_DURATION_LTV
							THEN ROUND(NPER_AT_BAL(LOAN_AMT, RATE, PMT, MI_DURATION_LTV * CURRENT_PROP_VALUE/100),0) 
							ELSE ROUND(NPER_AT_BAL(LOAN_AMT, RATE, PMT, MI_DURATION_LTV * CURRENT_PROP_VALUE/100),0) + FIRST_ADJ
							END	
						ELSE ROUND(NPER_AT_BAL(LOAN_AMT, RATE, PMT, MI_DURATION_LTV * CURRENT_PROP_VALUE/100),0)
						END
					END
				ELSE 0 END*/ 0 AS NEW_MIP_DURATION,
				
				ROUND((ROUND(PE.INTERIM_LOAN_AMT + (PE.INTERIM_LOAN_AMT * PE.UFMIP_FACTOR/100), 2) * MI_FACTOR/1200),2) AS NEW_MI,
				ROUND((PE.INTERIM_LOAN_AMT * PE.UFMIP_FACTOR/100),2) AS NEW_UFMIP
				FROM pricing.PRICING_INPUT_TAB PE,
				pricing.PRICING_STG_3_RATE_DATA RS,
				pricing.PURPOSE_TAB PUR,
				pricing.LENDER_PRICING_ASSUMPTIONS_TAB ASUM
				WHERE PE.COMPANY_NAME = RS.COMPANY_NAME 
				AND PE.SCENARIO_ID = RS.SCENARIO_ID
				AND PE.LOAN_PURPOSE = PUR.PURPOSE_CODE
				AND PE.COMPANY_NAME = ASUM.COMPANY_NAME
				;
BEGIN

    FOR N IN CNT LOOP
		INSERT INTO pricing.PRICING_OUTPUT_TAB 
		(
			COMPANY_NAME,
			UNIQUE_ID,
			SCENARIO_ID,
			CREDIT_SCORE,
			RATE_DATE,
			LOCK_PERIOD,
			NEW_LOAN_PURPOSE,
			NEW_PROGRAM_TYPE,
			NEW_PRODUCT_ID,
			NEW_PRODUCT_DESCRIPTION,
			NEW_AMORT_TYPE,
			NEW_TERM,
			NEW_LOAN_AMOUNT,
			NEW_LTV,
			NEW_RATE,
			NEW_ARM_RESET_RATE,
			NEW_NET_LLPA,
			NEW_POINTS_PCT,
			NEW_APR,
			NEW_BASE_FEES,
			NEW_POINTS_DOL,
			NEW_INTERIM_INT,
			NEW_FEES_TOTAL,
			NEW_PI,
			NEW_PI_SAVINGS_MO,
			NEW_PIMI_SAVINGS_MO,
			NEW_CASHOUT,
			NEW_LOL_SAVINGS,
			NEW_TERM_REDUCTION,
			NEW_UFMIP_PCT,
			NEW_MIP_PCT,
			NEW_MI,
			NEW_UFMIP
		)
		VALUES
		(
			N.COMPANY_NAME,
			N.UNIQUE_ID,
			N.SCENARIO_ID,
			N.CREDIT_SCORE,
			N.RATE_DATE,
			N.LOCK_PERIOD,
			N.NEW_LOAN_PURPOSE,
			N.NEW_PROGRAM_TYPE,
			N.NEW_PRODUCT_ID,
			N.NEW_PRODUCT_DESCRIPTION,
			N.NEW_AMORT_TYPE,
			N.NEW_TERM,
			N.NEW_LOAN_AMOUNT,
			N.NEW_LTV,
			N.NEW_RATE,
			N.NEW_ARM_RESET_RATE,
			N.NEW_NET_LLPA,
			N.NEW_POINTS_PCT,
			0,--ROUND(RATE(N.NEW_LOAN_AMOUNT - N.NEW_FEES_TOTAL, N.NEW_PI, N.NEW_TERM)*100,3),
			N.NEW_BASE_FEES,
			N.NEW_POINTS_DOL,
			N.NEW_INTERIM_INT,
			N.NEW_FEES_TOTAL,
			N.NEW_PI,
			N.NEW_PI_SAVINGS_MO,
			N.NEW_PIMI_SAVINGS_MO,
			N.NEW_CASHOUT,
			N.NEW_LOL_SAVINGS,
			N.NEW_TERM_REDUCTION,
			N.NEW_UFMIP_PCT,
			N.NEW_MIP_PCT,
			N.NEW_MI,
			N.NEW_UFMIP
		);
    END LOOP;

execute format('insert into ' || str || ' .pricing_output_tab select * from pricing.pricing_output_tab');

execute format('insert into public.process_log values(upper(''' || str ||'''), ''PRICING'', ''5. Create Output Table'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE pricing.pricing_5_create_output_tab(client text) OWNER TO trinetra;

--
-- TOC entry 469 (class 1255 OID 16481)
-- Name: prog_typ(character varying, character varying, character varying, numeric, numeric, numeric); Type: FUNCTION; Schema: pricing; Owner: postgres
--

CREATE FUNCTION pricing.prog_typ(current_loan_type character varying, loan_limit_type character varying, loan_purpose character varying, interim_loan_amt numeric, hb_limit numeric, base_limit numeric) RETURNS character varying
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
SELECT 
(
CASE WHEN LOAN_LIMIT_TYPE = 'G' THEN 
		   CASE WHEN CURRENT_LOAN_TYPE IN ('F') THEN
			  CASE WHEN LOAN_PURPOSE = 'C' THEN
					 CASE WHEN INTERIM_LOAN_AMT > HB_LIMIT THEN 'X'
						  WHEN HB_LIMIT > BASE_LIMIT AND INTERIM_LOAN_AMT > BASE_LIMIT THEN 'FHAHB'
						  WHEN INTERIM_LOAN_AMT <= BASE_LIMIT THEN 'FHA'
						  ELSE 'X' 
					 END
					WHEN LOAN_PURPOSE = 'R' THEN
					 CASE WHEN INTERIM_LOAN_AMT > HB_LIMIT THEN 'X'
						  WHEN HB_LIMIT > BASE_LIMIT AND INTERIM_LOAN_AMT > BASE_LIMIT THEN 'FHAHB'
						  WHEN INTERIM_LOAN_AMT <= BASE_LIMIT THEN 'FHA'
						  ELSE 'X' 
					 END
				ELSE 'X' END
			WHEN CURRENT_LOAN_TYPE NOT IN ('F') THEN
					 CASE WHEN INTERIM_LOAN_AMT > HB_LIMIT THEN 'X'
						  WHEN HB_LIMIT > BASE_LIMIT AND INTERIM_LOAN_AMT > BASE_LIMIT THEN 'FHAHB'
						  WHEN INTERIM_LOAN_AMT <= BASE_LIMIT THEN 'FHA'
						  ELSE 'X' 
					 END
			ELSE 'X' END
WHEN LOAN_LIMIT_TYPE = 'C' AND CURRENT_LOAN_TYPE = 'C' THEN
			  CASE WHEN LOAN_PURPOSE = 'C' THEN
					 CASE WHEN INTERIM_LOAN_AMT > HB_LIMIT THEN 'X'
						  WHEN HB_LIMIT > BASE_LIMIT AND INTERIM_LOAN_AMT > BASE_LIMIT THEN 'HBAL'
						  WHEN INTERIM_LOAN_AMT <= BASE_LIMIT THEN 'CONF'
						  ELSE 'X' 
					 END
					WHEN LOAN_PURPOSE = 'R' THEN
					 CASE WHEN INTERIM_LOAN_AMT > HB_LIMIT THEN 'JUMB'
						  WHEN HB_LIMIT > BASE_LIMIT AND INTERIM_LOAN_AMT > BASE_LIMIT THEN 'HBAL'
						  WHEN INTERIM_LOAN_AMT <= BASE_LIMIT THEN 'CONF'
						  ELSE 'X' 
					 END
				ELSE 'X' END
WHEN LOAN_LIMIT_TYPE = 'C' AND CURRENT_LOAN_TYPE = 'V' THEN
			  CASE WHEN LOAN_PURPOSE = 'C' THEN
					 CASE WHEN INTERIM_LOAN_AMT > HB_LIMIT THEN 'X'
						  WHEN HB_LIMIT > BASE_LIMIT AND INTERIM_LOAN_AMT > BASE_LIMIT THEN 'VAHB'
						  WHEN INTERIM_LOAN_AMT <= BASE_LIMIT THEN 'VA'
						  ELSE 'X' 
					 END
					WHEN LOAN_PURPOSE = 'R' THEN
					 CASE WHEN INTERIM_LOAN_AMT > HB_LIMIT THEN 'JUMB'
						  WHEN HB_LIMIT > BASE_LIMIT AND INTERIM_LOAN_AMT > BASE_LIMIT THEN 'VAHB'
						  WHEN INTERIM_LOAN_AMT <= BASE_LIMIT THEN 'VA'
						  ELSE 'X' 
					 END
				ELSE 'X' END
ELSE 'X' END
)
$$;


ALTER FUNCTION pricing.prog_typ(current_loan_type character varying, loan_limit_type character varying, loan_purpose character varying, interim_loan_amt numeric, hb_limit numeric, base_limit numeric) OWNER TO trinetra;

--
-- TOC entry 470 (class 1255 OID 16482)
-- Name: rate(numeric, numeric, numeric); Type: FUNCTION; Schema: pricing; Owner: postgres
--

CREATE FUNCTION pricing.rate(pv numeric, pmt numeric, nper numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
  M1    NUMERIC := PV;
  P1       NUMERIC := PMT;
  N12     NUMERIC := NPER;
  PM      NUMERIC := P1 / M1;
  I       NUMERIC := PM;
  OLD_I   NUMERIC := 2 * PM;
  RATE 	  NUMERIC;
  CNT     INTEGER := 0;
BEGIN
--  WHILE OLD_I > I                    --TO COMPUTE TO MAXIMUM PRECISION
  WHILE OLD_I - I > 5 * POWER(10,-11)  --TO ACHIEVE 10 DIGITS PRECISION
  LOOP
    CNT := CNT + 1;
    OLD_I := I;
    I := PM * (1 - 1 / POWER(1 + I,N12));
    IF CNT > 500 THEN
      EXIT;
    END IF;
  END LOOP;
  RATE := 12 * I;
RETURN RATE;
END;
$$;


ALTER FUNCTION pricing.rate(pv numeric, pmt numeric, nper numeric) OWNER TO trinetra;

--
-- TOC entry 471 (class 1255 OID 16483)
-- Name: run_pricing(text); Type: PROCEDURE; Schema: pricing; Owner: postgres
--

CREATE PROCEDURE pricing.run_pricing(co_name text)
    LANGUAGE plpgsql
    AS $$
DECLARE
company text := co_name;

BEGIN

    	execute format('truncate table ' || company || ' .pricing_output_tab');
		
		call pricing.pricing_1_import_lender_data(company);
		
		call pricing.pricing_2_import_general_data(company);
		
		call pricing.pricing_3_create_input_tab(company);
		
		call pricing.pricing_4_apply_llpa_pull_rate(company);
		
		call pricing.pricing_5_create_output_tab(company);
				
END;
$$;


ALTER PROCEDURE pricing.run_pricing(co_name text) OWNER TO trinetra;

SET default_tablespace = '';

--
-- TOC entry 317 (class 1259 OID 17241)
-- Name: zip_code_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.zip_code_tab (
    zip_code character varying(5),
    state character varying(2),
    county_code character varying(3),
    county_name character varying(15)
);


ALTER TABLE pricing.zip_code_tab OWNER TO trinetra;

--
-- TOC entry 296 (class 1259 OID 17127)
-- Name: lender_pricing_assumptions_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.lender_pricing_assumptions_tab (
    company_name character varying(50),
    base_cashout_ltv_per numeric,
    lock_period numeric,
    min_base_points numeric,
    max_base_points numeric,
    base_fee numeric,
    interim_interest_flag character varying(1)
);


ALTER TABLE pricing.lender_pricing_assumptions_tab OWNER TO trinetra;

--
-- TOC entry 297 (class 1259 OID 17133)
-- Name: llpa_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.llpa_tab (
    company_name character varying(50),
    llpa_code numeric,
    llpa_source character varying(20),
    llpa_description character varying(70),
    purpose_code text[],
    program_type text[],
    property_type text[],
    amort_type text[],
    occupancy_type text[],
    number_of_units text[],
    llpa_prop_state text[],
    min_llpa_upb numeric,
    max_llpa_upb numeric,
    min_llpa_ltv numeric,
    max_llpa_ltv numeric,
    min_llpa_fico numeric,
    max_llpa_fico numeric,
    min_llpa_cltv numeric,
    max_llpa_cltv numeric,
    min_llpa_term numeric,
    max_llpa_term numeric,
    llpa_pts numeric
);


ALTER TABLE pricing.llpa_tab OWNER TO trinetra;

--
-- TOC entry 298 (class 1259 OID 17139)
-- Name: loan_input_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.loan_input_tab (
    company_name character varying(50),
    unique_id character varying(20),
    current_borrower_fico numeric,
    current_prop_state character varying(2),
    current_prop_zip character varying(5),
    current_loan_upb numeric,
    current_loan_rate numeric,
    current_loan_pi numeric,
    current_loan_mi numeric,
    current_loan_type character varying(1),
    current_loan_term numeric,
    current_loan_org_date date,
    current_loan_rem_term numeric,
    current_second_lien_amt numeric,
    current_prop_value numeric,
    current_property_type character varying(5),
    current_occupancy_type character varying(3),
    current_number_of_units character varying(1),
    investor_name character varying(50)
);


ALTER TABLE pricing.loan_input_tab OWNER TO trinetra;

--
-- TOC entry 299 (class 1259 OID 17145)
-- Name: loan_limits_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.loan_limits_tab (
    loan_type character varying(1),
    msa_code character varying(5),
    metro_div_code character varying(5),
    msa_name character varying(50),
    soa_code character varying(5),
    limit_type character varying(1),
    median_price numeric,
    limit_1_unit numeric,
    limit_2_unit numeric,
    limit_3_unit numeric,
    limit_4_unit numeric,
    state character varying(2),
    county_code character varying(3),
    state_name character varying(26),
    county_name character varying(15),
    county_tran_date date,
    limit_date date,
    median_price_limit numeric,
    year_for_median_price numeric
);


ALTER TABLE pricing.loan_limits_tab OWNER TO trinetra;

--
-- TOC entry 300 (class 1259 OID 17151)
-- Name: mi_factors_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.mi_factors_tab (
    mi_code numeric,
    mi_rate_type character varying(1),
    min_term_mos numeric,
    max_term_mos numeric,
    min_fico numeric,
    max_fico numeric,
    min_ltv numeric,
    max_ltv numeric,
    min_upb numeric,
    max_upb numeric,
    min_org_date date,
    max_org_date date,
    mi_factor numeric,
    mi_duration_mos numeric,
    mi_duration_ltv numeric,
    ufmip_factor numeric
);


ALTER TABLE pricing.mi_factors_tab OWNER TO trinetra;

--
-- TOC entry 301 (class 1259 OID 17157)
-- Name: pricing_input_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.pricing_input_tab (
    company_name character varying(50),
    unique_id character varying(20),
    scenario_id character varying(13),
    current_borrower_fico numeric,
    current_prop_state character varying(2),
    current_prop_zip character varying(5),
    current_loan_upb numeric,
    current_loan_rate numeric,
    current_loan_pi numeric,
    current_loan_mi numeric,
    current_loan_type character varying(1),
    current_loan_term numeric,
    current_loan_org_date date,
    current_loan_rem_term numeric,
    current_second_lien_amt numeric,
    current_prop_value numeric,
    current_property_type character varying(5),
    current_occupancy_type character varying(3),
    current_number_of_units character varying(1),
    investor_name character varying(50),
    hb_limit numeric,
    base_limit numeric,
    loan_purpose character varying(1),
    interim_loan_amt numeric,
    interim_ltv numeric,
    interim_cltv numeric,
    product_id character varying(20),
    program_type character varying(10),
    product_description character varying(75),
    product_term numeric,
    amort_type character varying(1),
    mi_rate_type character varying(1),
    first_adj numeric,
    first_inc numeric,
    sec_adj numeric,
    sec_inc numeric,
    margin numeric,
    indx numeric,
    life_cap numeric,
    mi_duration_mos numeric,
    mi_duration_ltv numeric,
    ufmip_factor numeric,
    mi_factor numeric,
    net_llpa numeric
);


ALTER TABLE pricing.pricing_input_tab OWNER TO trinetra;

--
-- TOC entry 302 (class 1259 OID 17163)
-- Name: pricing_output_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.pricing_output_tab (
    company_name character varying(50),
    unique_id character varying(20),
    scenario_id character varying(13),
    credit_score numeric,
    rate_date date,
    lock_period numeric,
    new_loan_purpose character varying(50),
    new_program_type character varying(10),
    new_product_id character varying(20),
    new_product_description character varying(75),
    new_amort_type character varying(1),
    new_term numeric,
    new_loan_amount numeric,
    new_ltv numeric,
    new_rate numeric,
    new_arm_reset_rate numeric,
    new_arm_reset_term numeric,
    new_net_llpa numeric,
    new_points_pct numeric,
    new_apr numeric,
    new_base_fees numeric,
    new_points_dol numeric,
    new_interim_int numeric,
    new_fees_total numeric,
    new_pi numeric,
    new_pi_savings_mo numeric,
    new_pimi_savings_mo numeric,
    new_cashout numeric,
    new_lol_savings numeric,
    new_term_reduction numeric,
    new_ufmip_pct numeric,
    new_mip_pct numeric,
    new_mip_duration numeric,
    new_mi numeric,
    new_ufmip numeric
);


ALTER TABLE pricing.pricing_output_tab OWNER TO trinetra;

--
-- TOC entry 303 (class 1259 OID 17169)
-- Name: pricing_stg_1_loan_input; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.pricing_stg_1_loan_input (
    company_name character varying(50),
    unique_id character varying(20),
    current_borrower_fico numeric,
    current_prop_state character varying(2),
    current_prop_zip character varying(5),
    current_loan_upb numeric,
    current_loan_rate numeric,
    current_loan_pi numeric,
    current_loan_mi numeric,
    current_loan_type character varying(1),
    current_loan_term numeric,
    current_loan_org_date date,
    current_loan_rem_term numeric,
    current_second_lien_amt numeric,
    current_prop_value numeric,
    current_property_type character varying(5),
    current_occupancy_type character varying(3),
    current_number_of_units character varying(1),
    investor_name character varying(50),
    loan_limit_type character varying(1),
    hb_limit numeric,
    base_limit numeric,
    loan_purpose character varying(1),
    interim_loan_amt numeric,
    interim_ltv numeric,
    interim_cltv numeric,
    interim_program_type text[]
);


ALTER TABLE pricing.pricing_stg_1_loan_input OWNER TO trinetra;

--
-- TOC entry 304 (class 1259 OID 17175)
-- Name: pricing_stg_2_llpa_details; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.pricing_stg_2_llpa_details (
    company_name character varying(50),
    unique_id character varying(20),
    scenario_id character varying(13),
    llpa_code numeric,
    llpa_source character varying(20),
    llpa_description character varying(70),
    purpose_code text[],
    program_type text[],
    property_type text[],
    amort_type text[],
    occupancy_type text[],
    number_of_units text[],
    llpa_prop_state text[],
    min_llpa_upb numeric,
    max_llpa_upb numeric,
    min_llpa_ltv numeric,
    max_llpa_ltv numeric,
    min_llpa_fico numeric,
    max_llpa_fico numeric,
    min_llpa_cltv numeric,
    max_llpa_cltv numeric,
    min_llpa_term numeric,
    max_llpa_term numeric,
    llpa_pts numeric
);


ALTER TABLE pricing.pricing_stg_2_llpa_details OWNER TO trinetra;

--
-- TOC entry 305 (class 1259 OID 17181)
-- Name: pricing_stg_3_rate_data; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.pricing_stg_3_rate_data (
    company_name character varying(50),
    unique_id character varying(20),
    scenario_id character varying(13),
    rate_date date,
    lock_period numeric,
    rate numeric,
    points numeric,
    net_points numeric
);


ALTER TABLE pricing.pricing_stg_3_rate_data OWNER TO trinetra;

--
-- TOC entry 306 (class 1259 OID 17187)
-- Name: product_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.product_tab (
    company_name character varying(50),
    product_id character varying(20),
    product_description character varying(75),
    product_term numeric,
    program_type character varying(10),
    amort_type character varying(1),
    min_prod_ltv numeric,
    max_prod_ltv numeric,
    min_prod_upb numeric,
    max_prod_upb numeric,
    mi_rate_type character varying(1),
    first_adj numeric,
    first_inc numeric,
    sec_adj numeric,
    sec_inc numeric,
    margin numeric,
    indx numeric,
    life_cap numeric
);


ALTER TABLE pricing.product_tab OWNER TO trinetra;

--
-- TOC entry 307 (class 1259 OID 17193)
-- Name: program_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.program_tab (
    program_type character varying(10),
    program_description character varying(50)
);


ALTER TABLE pricing.program_tab OWNER TO trinetra;

--
-- TOC entry 308 (class 1259 OID 17196)
-- Name: purpose_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.purpose_tab (
    purpose_code character varying(1),
    purpose_description character varying(50)
);


ALTER TABLE pricing.purpose_tab OWNER TO trinetra;

--
-- TOC entry 309 (class 1259 OID 17199)
-- Name: ratesheet_tab; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.ratesheet_tab (
    company_name character varying(50),
    rate_date date,
    product_id character varying(20),
    product_description character varying(75),
    lock_period numeric,
    rate numeric,
    points numeric
);


ALTER TABLE pricing.ratesheet_tab OWNER TO trinetra;

--
-- TOC entry 310 (class 1259 OID 17205)
-- Name: stg_fhfa_hpi; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.stg_fhfa_hpi (
    hpi_type character varying(30),
    hpi_flavor character varying(30),
    frequency character varying(30),
    level character varying(70),
    place_name character varying(70),
    place_id character varying(15),
    yr numeric,
    period numeric,
    index_nsa numeric,
    index_sa numeric
);


ALTER TABLE pricing.stg_fhfa_hpi OWNER TO trinetra;

--
-- TOC entry 311 (class 1259 OID 17211)
-- Name: stg_loan_limit_c_dump; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.stg_loan_limit_c_dump (
    str text
);


ALTER TABLE pricing.stg_loan_limit_c_dump OWNER TO trinetra;

--
-- TOC entry 312 (class 1259 OID 17217)
-- Name: stg_loan_limit_f_dump; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.stg_loan_limit_f_dump (
    str text
);


ALTER TABLE pricing.stg_loan_limit_f_dump OWNER TO trinetra;

--
-- TOC entry 313 (class 1259 OID 17223)
-- Name: stg_mi_factors_dump; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.stg_mi_factors_dump (
    mi_code numeric,
    mi_rate_type character varying(1),
    min_term_mos numeric,
    max_term_mos numeric,
    min_fico numeric,
    max_fico numeric,
    min_ltv numeric,
    max_ltv numeric,
    min_upb numeric,
    max_upb numeric,
    min_org_date date,
    max_org_date date,
    mi_factor numeric,
    mi_duration_mos numeric,
    mi_duration_ltv numeric,
    ufmip_factor numeric
);


ALTER TABLE pricing.stg_mi_factors_dump OWNER TO trinetra;

--
-- TOC entry 314 (class 1259 OID 17229)
-- Name: stg_program_dump; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.stg_program_dump (
    program_type character varying(10),
    program_description character varying(50)
);


ALTER TABLE pricing.stg_program_dump OWNER TO trinetra;

--
-- TOC entry 315 (class 1259 OID 17232)
-- Name: stg_purpose_dump; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.stg_purpose_dump (
    purpose_code character varying(1),
    purpose_description character varying(50)
);


ALTER TABLE pricing.stg_purpose_dump OWNER TO trinetra;

--
-- TOC entry 316 (class 1259 OID 17235)
-- Name: stg_zip_code_dump; Type: TABLE; Schema: pricing; Owner: postgres
--

CREATE TABLE pricing.stg_zip_code_dump (
    str text
);


ALTER TABLE pricing.stg_zip_code_dump OWNER TO trinetra;

--
-- TOC entry 318 (class 1259 OID 17244)
-- Name: vw_conf_govt_loan_limits; Type: VIEW; Schema: pricing; Owner: postgres
--

CREATE VIEW pricing.vw_conf_govt_loan_limits AS
 SELECT 'G'::text AS loan_type,
    lim_hb.zip_code,
    lim_hb.state,
    lim_hb.county_code,
    lim_hb.county_name,
    lim_hb.limit_1_unit,
    lim_hb.limit_2_unit,
    lim_hb.limit_3_unit,
    lim_hb.limit_4_unit,
    mina.min_1_unit,
    mina.min_2_unit,
    mina.min_3_unit,
    mina.min_4_unit
   FROM ( SELECT zip.zip_code,
            zip.state,
            zip.county_code,
            zip.county_name,
            lim.limit_1_unit,
            lim.limit_2_unit,
            lim.limit_3_unit,
            lim.limit_4_unit,
            row_number() OVER (PARTITION BY zip.zip_code ORDER BY lim.limit_1_unit DESC) AS zip_rank
           FROM pricing.zip_code_tab zip,
            pricing.loan_limits_tab lim
          WHERE (((zip.state)::text = (lim.state)::text) AND ((zip.county_code)::text = (lim.county_code)::text) AND ((lim.loan_type)::text = 'G'::text))) lim_hb,
    ( SELECT min(loan_limits_tab.limit_1_unit) AS min_1_unit,
            min(loan_limits_tab.limit_2_unit) AS min_2_unit,
            min(loan_limits_tab.limit_3_unit) AS min_3_unit,
            min(loan_limits_tab.limit_4_unit) AS min_4_unit
           FROM pricing.loan_limits_tab
          WHERE ((loan_limits_tab.loan_type)::text = 'G'::text)) mina
  WHERE (lim_hb.zip_rank = 1)
UNION ALL
 SELECT 'C'::text AS loan_type,
    lim_hb.zip_code,
    lim_hb.state,
    lim_hb.county_code,
    lim_hb.county_name,
    lim_hb.limit_1_unit,
    lim_hb.limit_2_unit,
    lim_hb.limit_3_unit,
    lim_hb.limit_4_unit,
    mina.min_1_unit,
    mina.min_2_unit,
    mina.min_3_unit,
    mina.min_4_unit
   FROM ( SELECT zip.zip_code,
            zip.state,
            zip.county_code,
            zip.county_name,
            lim.limit_1_unit,
            lim.limit_2_unit,
            lim.limit_3_unit,
            lim.limit_4_unit,
            row_number() OVER (PARTITION BY zip.zip_code ORDER BY lim.limit_1_unit DESC) AS zip_rank
           FROM pricing.zip_code_tab zip,
            pricing.loan_limits_tab lim
          WHERE (((zip.state)::text = (lim.state)::text) AND ((zip.county_code)::text = (lim.county_code)::text) AND ((lim.loan_type)::text = 'C'::text))) lim_hb,
    ( SELECT min(loan_limits_tab.limit_1_unit) AS min_1_unit,
            min(loan_limits_tab.limit_2_unit) AS min_2_unit,
            min(loan_limits_tab.limit_3_unit) AS min_3_unit,
            min(loan_limits_tab.limit_4_unit) AS min_4_unit
           FROM pricing.loan_limits_tab
          WHERE ((loan_limits_tab.loan_type)::text = 'C'::text)) mina
  WHERE (lim_hb.zip_rank = 1);


ALTER TABLE pricing.vw_conf_govt_loan_limits OWNER TO trinetra;

-- Completed on 2022-02-19 11:41:54 EST

--
-- PostgreSQL database dump complete
--

