-- PROCEDURE: public.update_dashboard_summaries()

-- DROP PROCEDURE public.update_dashboard_summaries();

CREATE OR REPLACE PROCEDURE public.update_dashboard_summaries(
	)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN

execute 'truncate table public.dashboard_summary_1';
execute 'truncate table public.dashboard_summary_2';
execute 'truncate table public.dashboard_attribution';
execute 'truncate table public.dashboard_touch_count';
execute 'truncate table public.lead_cohorts';
execute 'truncate table jornaya_report';
execute 'truncate table public.share_of_wallet';
execute 'truncate table public.new_dashboard';
execute 'truncate table public.new_dashboard_dm_email_cnt';

insert into public.dashboard_summary_1 
		SELECT
		nextval('public.dashboard_rpt_seq') as rec_id,
		C.TIME_PERIOD AS CAMPAIGN_MTH,
		C.CHANNEL AS SOLICIT_CHANNEL,
		C.PROGRAM_DESCRIPTION,
		CASE WHEN C.OFFER_DESCRIPTION LIKE ('%HELOC%') THEN 'HELOC'
		WHEN C.OFFER_DESCRIPTION LIKE ('%VA%') THEN 'VA'
		ELSE 'CONF' END AS PROD_GRP,
		CASE WHEN C.OFFER_DESCRIPTION LIKE ('%HELOC%') THEN 'HELOC'
		WHEN C.OFFER_DESCRIPTION LIKE ('%PURCHASE%') THEN 'PURCHASE'
		ELSE 'REFINANCE' END AS PURPOSE,		
		C.OFFER_DESCRIPTION AS PROD_PROMOTED,
		D.CAMPAIGN_ID,
		case when D.CUSTOMER_SEGMENT is null then 'OTHER' else upper(d.customer_segment) end as customer_segment,
		C.CAMPAIGN_END_DATE - D.CAMPAIGN_DATE AS CAMPAIGN_WINDOW,
		CASE WHEN C.CAMPAIGN_END_DATE < CURRENT_DATE THEN C.CAMPAIGN_END_DATE - D.CAMPAIGN_DATE
		ELSE CURRENT_DATE - C.CAMPAIGN_START_DATE END AS DAYS_SINCE_CAMPAIGN,
		SUM(CNT_SENT) AS COUNT_OF_SOLICITS,
		SUM(CASE WHEN L.WORKABLE_LEAD = 'N' THEN 1 ELSE 0 END) AS DUPLICATE_INCOMPLETE_BAD_LEADS,
		SUM(CASE WHEN L.WORKABLE_LEAD = 'Y' THEN 1 ELSE 0 END) AS NET_WORKABLE_LEADS,
		ROUND(SUM(CNT_SENT * C.EST_RESPONSE_RATE),0) AS EST_RESPONSE_CNT,
		ROUND(SUM(CNT_SENT * C.COST_PER_PIECE),0) AS CAMPAIGN_COST,
--		SUM(CASE WHEN L.LQ_STATUS = 'No Contact' THEN 1 ELSE 0 END) AS CNT_LQ_NO_CONTACT,
--		SUM(CASE WHEN L.LQ_STATUS = 'Contact Made' THEN 1 ELSE 0 END) AS CNT_LQ_CONTACT,
--		SUM(CASE WHEN L.LQ_STATUS = 'Transfered' THEN 1 ELSE 0 END) AS CNT_LQ_TRANSFER,
		SUM(CASE WHEN A.APP_NO IS NOT NULL THEN 1 ELSE 0 END) AS CNT_CREATED_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL THEN 1 ELSE 0 END) AS CNT_SETUP_APPS,
		ROUND(SUM(CNT_SENT * C.EST_RESPONSE_RATE * EST_APP_RATE),0) AS EST_APP_CNT,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL THEN A.APP_LOAN_AMT ELSE 0 END) AS AMT_SETUP_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'HELOC' THEN 1 ELSE 0 END) AS HELCO_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'CONVENTIONAL' THEN 1 ELSE 0 END) AS CONV_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' THEN 1 ELSE 0 END) AS VA_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS VA_PUR_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP NOT IN ('HELOC', 'VA', 'CONVENTIONAL') THEN 1 ELSE 0 END) AS OTHER_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS PURCHASE_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'NoCash-Out Refinance' THEN 1 ELSE 0 END) AS NO_CO_REFI_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Cash-Out Refinance' THEN 1 ELSE 0 END) AS CASHOUT_APPS,
		SUM(CASE WHEN A.APP_FUND_DATE IS NOT NULL THEN 1 ELSE 0 END) AS FUNDED_UNITS,
		SUM(CASE WHEN A.APP_FUND_DATE IS NOT NULL THEN APP_LOAN_AMT ELSE 0 END) AS FUNDED_AMT,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'HELOC' THEN 1 ELSE 0 END) AS HELCO_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'CONVENTIONAL' THEN 1 ELSE 0 END) AS CONV_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' THEN 1 ELSE 0 END) AS VA_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS VA_PUR_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP NOT IN ('HELOC', 'VA', 'CONVENTIONAL') THEN 1 ELSE 0 END) AS OTHER_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS PURCHASE_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'NoCash-Out Refinance' THEN 1 ELSE 0 END) AS NO_CO_REFI_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Cash-Out Refinance' THEN 1 ELSE 0 END) AS CASHOUT_FUNDS,
		CURRENT_DATE AS DATE_ADDED,
		SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Opened' THEN 1 ELSE 0 END) AS COUNT_UNQ_OPENS,
		SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Clicked' THEN 1 ELSE 0 END) AS COUNT_UNQ_CLICKS,
		SUM(CASE WHEN L.WORKABLE_LEAD = 'Y' AND L.LEAD_STATUS NOT IN ('New', 'Open - Not Contacted', 'Attempt 1', 'Attempt 2', 'Attempt 3') THEN 1 ELSE 0 END) AS CNT_CONTACTED_LEADS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_STATUS_DESC IN ('Active Loan') THEN 1 ELSE 0 END) AS CNT_PIPELINE_APPS
		FROM {schema}.REPORTING_CMP_DISPOSITION_HISTORY D 
		INNER JOIN 
		(
			SELECT
			X.CELL_KEY,
			X.TIME_PERIOD,
			P.PROGRAM_DESCRIPTION,
			O.OFFER_ID AS OFFER_DESCRIPTION,
			X.CHANNEL,
			X.COST_PER_PIECE,
			X.EST_RESPONSE_RATE,
			X.EST_APP_RATE,
			X.CAMPAIGN_START_DATE,
			X.CAMPAIGN_END_DATE
			from {schema}.REPORTING_cmp_campaign x
			join {schema}.REPORTING_cmp_program p on (x.program_group = p.program_group)
			join {schema}.REPORTING_cmp_offer o on (x.offer_key = o.offer_key)
			where X.time_period >= '2021-01' and x.program_group in ('RETN', 'CSELL', 'MEMB')
		) c ON (D.CELL_KEY = C.CELL_KEY)
		LEFT JOIN {schema}.REPORTING_MST_LEAD L on (D.RECORD_ID = L.ATTRIBUTED_DISPOSITION_NO)
		LEFT JOIN {schema}.REPORTING_MST_APP A on (D.RECORD_ID = A.ATTRIBUTED_DISPOSITION_NO)

		GROUP BY 
		C.TIME_PERIOD,
		C.CHANNEL,
		C.PROGRAM_DESCRIPTION,
		CASE WHEN C.OFFER_DESCRIPTION LIKE ('%HELOC%') THEN 'HELOC'
		WHEN C.OFFER_DESCRIPTION LIKE ('%VA%') THEN 'VA'
		ELSE 'CONF' END,
		CASE WHEN C.OFFER_DESCRIPTION LIKE ('%HELOC%') THEN 'HELOC'
		WHEN C.OFFER_DESCRIPTION LIKE ('%PURCHASE%') THEN 'PURCHASE'
		ELSE 'REFINANCE' END,
		C.OFFER_DESCRIPTION,
		D.CAMPAIGN_ID,
		case when D.CUSTOMER_SEGMENT is null then 'OTHER' else upper(d.customer_segment) end,
		C.CAMPAIGN_END_DATE - D.CAMPAIGN_DATE,
		CASE WHEN C.CAMPAIGN_END_DATE < CURRENT_DATE THEN C.CAMPAIGN_END_DATE - D.CAMPAIGN_DATE
		ELSE CURRENT_DATE - C.CAMPAIGN_START_DATE END;
		
insert into public.dashboard_attribution
select
lead_id,
max(crm_system) as crm_system,
max(lead_create_date) as lead_create_date,
max(app_setup_date) as app_setup_date,
max(lead_cnt) as lead_cnt,
max(app_cnt) as app_cnt,
max(app_purpose) as app_purpose,
max(app_product) as app_product,
max(case when d_rank = 1 then disposition_date end) as d_date_1,
max(case when d_rank = 2 then disposition_date end) as d_date_2,
max(case when d_rank = 3 then disposition_date end) as d_date_3,
max(case when d_rank = 4 then disposition_date end) as d_date_4,
max(case when d_rank = 5 then disposition_date end) as d_date_5,

max(case when d_rank = 1 then program_group || '-' || channel end) as prog_chan_1,
max(case when d_rank = 2 then program_group || '-' || channel end) as prog_chan_2,
max(case when d_rank = 3 then program_group || '-' || channel end) as prog_chan_3,
max(case when d_rank = 4 then program_group || '-' || channel end) as prog_chan_4,
max(case when d_rank = 5 then program_group || '-' || channel end) as prog_chan_5

from
(
select 
l1.*,
d.campaign_id,
cast(d.disposition_date as date) as disposition_date,
d.disposition_description,
case when c.program_group = 'CORP' then 'ORGR' when c.program_group in ('RETN', 'CSELL', 'MEMB') then 'MKTG'
else c.program_group end as program_group,
--c.offer_description,
c.channel,
row_number() over(partition by l1.lead_id order by d.disposition_date desc) as d_rank
from
(
	select 
	l.lead_id, 
	l.crm_system,
	l.lead_create_date,
	a.app_setup_date,
	1 as lead_cnt,
	case when app_setup_date is not null then 1 else 0 end as app_cnt,
	case when app_setup_date is not null then app_purpose_desc else null end as app_purpose,
	case when app_setup_date is not null then app_product_group else null end as app_product,
	l.attributed_customer_id as customer_id
	from {schema}.reporting_mst_lead l left join {schema}.reporting_mst_app a
	on (l.attributed_app_no = a.app_no)
	where l.lead_create_date >= to_date('01/01/2021','mm/dd/yyyy')
	and l.attributed_customer_id is not null
	and l.workable_lead = 'Y'
) l1 
inner join {schema}.reporting_cmp_disposition_history d
on (l1.customer_id = d.customer_id)
		INNER JOIN 
		(
			SELECT
			X.CELL_KEY,
			X.TIME_PERIOD,
			P.PROGRAM_DESCRIPTION,
			O.OFFER_ID AS OFFER_DESCRIPTION,
			X.PROGRAM_GROUP,
			X.CHANNEL,
			X.COST_PER_PIECE,
			X.EST_RESPONSE_RATE,
			X.EST_APP_RATE,
			X.CAMPAIGN_START_DATE,
			X.CAMPAIGN_END_DATE
			from {schema}.REPORTING_cmp_campaign x
			join {schema}.REPORTING_cmp_program p on (x.program_group = p.program_group)
			join {schema}.REPORTING_cmp_offer o on (x.offer_key = o.offer_key)
		) c ON (D.CELL_KEY = C.CELL_KEY)
where 
		(
	   	d.disposition_date >= l1.lead_create_date -180
		and  d.disposition_date <= l1.lead_create_date
		and d.disposition_description in ('Opened', 'Clicked', 'Mailed')
		)
) z
where d_rank <= 5
group by lead_id;

insert into public.dashboard_attribution
select x.* from
(
	select 
	l.lead_id, 
	l.crm_system,
	l.lead_create_date,
	a.app_setup_date,
	1 as lead_cnt,
	case when app_setup_date is not null then 1 else 0 end as app_cnt,
	case when app_setup_date is not null then app_purpose_desc else null end as app_purpose,
	case when app_setup_date is not null then app_product_group else null end as app_product
	from {schema}.reporting_mst_lead l left join {schema}.reporting_mst_app a
	on (l.attributed_app_no = a.app_no)
	where l.lead_create_date >= to_date('01/01/2021','mm/dd/yyyy')
	and l.attributed_customer_id is not null
	and l.workable_lead = 'Y'
) x left join public.dashboard_attribution y
on (x.lead_id = y.lead_id)
where y.lead_id is null;

insert into public.dashboard_touch_count
select 
no_of_solicits,
no_of_dm_solicits,
no_of_email_solicits,
count(*) as no_of_customers
from
(
	select
	customer_id,
	count(*) as no_of_solicits,
	sum(case when c.channel = 'DM' then 1 else 0 end) as no_of_dm_solicits,
	sum(case when c.channel = 'EMAIL' then 1 else 0 end) as no_of_email_solicits
	from {schema}.reporting_cmp_disposition_history d inner join
	(select * from {schema}.reporting_cmp_campaign where program_group in ('RETN','CSELL','MEMB')
	and time_period >= '2021-01'
	and offer_key <> 89) c
	on (d.campaign_id = c.campaign_id)
	where d.customer_id is not null
	group by customer_id
) c
group by
1,2,3;

insert into dashboard_summary_2
		SELECT
		nextval('public.dashboard_rpt_seq') as rec_id,
		C.TIME_PERIOD AS CAMPAIGN_MTH,
		C.CHANNEL AS SOLICIT_CHANNEL,
		C.PROGRAM_DESCRIPTION,
		C.OFFER_DESCRIPTION,
		L.LEAD_SOURCE,
		L.LEAD_STATUS,
		D.CAMPAIGN_ID,
		case when D.CUSTOMER_SEGMENT is null then 'OTHER' else upper(d.customer_segment) end as customer_segment,
		C.CAMPAIGN_END_DATE - D.CAMPAIGN_DATE AS CAMPAIGN_WINDOW,
		CASE WHEN C.CAMPAIGN_END_DATE < CURRENT_DATE THEN C.CAMPAIGN_END_DATE - D.CAMPAIGN_DATE
		ELSE CURRENT_DATE - C.CAMPAIGN_START_DATE END AS DAYS_SINCE_CAMPAIGN,
		SUM(CNT_SENT) AS COUNT_OF_SOLICITS,
		SUM(CASE WHEN L.WORKABLE_LEAD = 'N' THEN 1 ELSE 0 END) AS DUPLICATE_INCOMPLETE_BAD_LEADS,
		SUM(CASE WHEN L.WORKABLE_LEAD = 'Y' THEN 1 ELSE 0 END) AS NET_WORKABLE_LEADS,
		ROUND(SUM(CNT_SENT * C.EST_RESPONSE_RATE),0) AS EST_RESPONSE_CNT,
		ROUND(SUM(CNT_SENT * C.COST_PER_PIECE),0) AS CAMPAIGN_COST,
--		SUM(CASE WHEN L.LQ_STATUS = 'No Contact' THEN 1 ELSE 0 END) AS CNT_LQ_NO_CONTACT,
--		SUM(CASE WHEN L.LQ_STATUS = 'Contact Made' THEN 1 ELSE 0 END) AS CNT_LQ_CONTACT,
--		SUM(CASE WHEN L.LQ_STATUS = 'Transfered' THEN 1 ELSE 0 END) AS CNT_LQ_TRANSFER,
		SUM(CASE WHEN A.APP_NO IS NOT NULL THEN 1 ELSE 0 END) AS CNT_CREATED_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL THEN 1 ELSE 0 END) AS CNT_SETUP_APPS,
		ROUND(SUM(CNT_SENT * C.EST_RESPONSE_RATE * EST_APP_RATE),0) AS EST_APP_CNT,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL THEN A.APP_LOAN_AMT ELSE 0 END) AS AMT_SETUP_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'HELOC' THEN 1 ELSE 0 END) AS HELCO_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'CONVENTIONAL' THEN 1 ELSE 0 END) AS CONV_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' THEN 1 ELSE 0 END) AS VA_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS VA_PUR_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP NOT IN ('HELOC', 'VA', 'CONVENTIONAL') THEN 1 ELSE 0 END) AS OTHER_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS PURCHASE_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'NoCash-Out Refinance' THEN 1 ELSE 0 END) AS NO_CO_REFI_APPS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Cash-Out Refinance' THEN 1 ELSE 0 END) AS CASHOUT_APPS,
		SUM(CASE WHEN A.APP_FUND_DATE IS NOT NULL THEN 1 ELSE 0 END) AS FUNDED_UNITS,
		SUM(CASE WHEN A.APP_FUND_DATE IS NOT NULL THEN APP_LOAN_AMT ELSE 0 END) AS FUNDED_AMT,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'HELOC' THEN 1 ELSE 0 END) AS HELCO_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'CONVENTIONAL' THEN 1 ELSE 0 END) AS CONV_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' THEN 1 ELSE 0 END) AS VA_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS VA_PUR_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP NOT IN ('HELOC', 'VA', 'CONVENTIONAL') THEN 1 ELSE 0 END) AS OTHER_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS PURCHASE_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'NoCash-Out Refinance' THEN 1 ELSE 0 END) AS NO_CO_REFI_FUNDS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_FUND_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Cash-Out Refinance' THEN 1 ELSE 0 END) AS CASHOUT_FUNDS,
		CURRENT_DATE AS DATE_ADDED,
		SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Opened' THEN 1 ELSE 0 END) AS COUNT_UNQ_OPENS,
		SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Clicked' THEN 1 ELSE 0 END) AS COUNT_UNQ_CLICKS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_RATE_LOCK_DATE IS NOT NULL THEN 1 ELSE 0 END) AS CNT_LOCKS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_RATE_LOCK_DATE IS NOT NULL AND A.APP_STATUS_DESC = 'Active Loan' THEN 1 ELSE 0 END) AS CNT_ACTIVE_LOCKS,
		SUM(CASE WHEN A.APP_FUND_DATE IS NOT NULL THEN 
			A.APP_LOAN_AMT * (CASE WHEN A.APP_PRODUCT_GROUP = 'CONVENTIONAL' THEN .005 WHEN A.APP_PRODUCT_GROUP = 'VA' THEN .0125 ELSE .005 END)
			ELSE 0 END) AS FUNDED_MARGIN_DOL,
		SUM(CASE WHEN A.APP_RATE_LOCK_DATE IS NOT NULL AND A.APP_STATUS_DESC = 'Active Loan' THEN 
			A.APP_LOAN_AMT* .5 * (CASE WHEN A.APP_PRODUCT_GROUP = 'CONVENTIONAL' THEN .005 WHEN A.APP_PRODUCT_GROUP = 'VA' THEN .0125 ELSE .005 END)
			ELSE 0 END) AS EST_MARGIN_DOL,
			CREATIVE_DESCRIPTION
		FROM {schema}.REPORTING_CMP_DISPOSITION_HISTORY D 
		INNER JOIN 
		(
			SELECT
			X.CELL_KEY,
			X.TIME_PERIOD,
			P.PROGRAM_DESCRIPTION,
			O.OFFER_ID AS OFFER_DESCRIPTION,
			COALESCE(CR.CREATIVE_DESCRIPTION,'N/A') AS CREATIVE_DESCRIPTION,
			X.CHANNEL,
			CASE WHEN X.CHANNEL = 'EMAIL' THEN .007 ELSE X.COST_PER_PIECE END AS COST_PER_PIECE,
			X.EST_RESPONSE_RATE,
			X.EST_APP_RATE,
			X.CAMPAIGN_START_DATE,
			X.CAMPAIGN_END_DATE
			from {schema}.REPORTING_cmp_campaign x
			join {schema}.REPORTING_cmp_program p on (x.program_group = p.program_group)
			join {schema}.REPORTING_cmp_offer o on (x.offer_key = o.offer_key)
			left join {schema}.REPORTING_cmp_creative cr on (x.creative_key = cr.creative_key)
			where X.TIME_PERIOD >= '2021-01'
		) c ON (D.CELL_KEY = C.CELL_KEY)
		LEFT JOIN {schema}.REPORTING_MST_LEAD L on (D.RECORD_ID = L.ATTRIBUTED_DISPOSITION_NO)
		LEFT JOIN {schema}.REPORTING_MST_APP A on (D.RECORD_ID = A.ATTRIBUTED_DISPOSITION_NO)

		GROUP BY 
		C.TIME_PERIOD,
		C.CHANNEL,
		C.PROGRAM_DESCRIPTION,
		C.OFFER_DESCRIPTION,
		L.LEAD_SOURCE,
		L.LEAD_STATUS,
		D.CAMPAIGN_ID,
		case when D.CUSTOMER_SEGMENT is null then 'OTHER' else upper(d.customer_segment) end,
		C.CAMPAIGN_END_DATE - D.CAMPAIGN_DATE,
		CASE WHEN C.CAMPAIGN_END_DATE < CURRENT_DATE THEN C.CAMPAIGN_END_DATE - D.CAMPAIGN_DATE
		ELSE CURRENT_DATE - C.CAMPAIGN_START_DATE END,
		CREATIVE_DESCRIPTION;

insert into public.lead_cohorts
 WITH cohort AS (
         SELECT dt.activity_date,
            ct_1.lead_month,
            ct_1.campaign_month,
            ct_1.sales_channel,
            ct_1.lead_source,
            ct_1.mktg_channel,
            ct_1.mktg_program,
            ct_1.mktg_offer
           FROM ( SELECT gs.activity_date::date AS activity_date
                   FROM generate_series('2021-03-01 00:00:00'::timestamp without time zone, CURRENT_DATE::timestamp without time zone, '1 day'::interval) gs(activity_date)) dt,
            ( SELECT to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text) AS lead_month,
                        CASE
                            WHEN c.campaign_id IS NULL THEN to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)::character varying
                            ELSE c.time_period
                        END AS campaign_month,
                    COALESCE(l.sales_channel, 'UNKNWOWN'::character varying) AS sales_channel,
                    COALESCE(l.lead_source, 'UNKNWOWN'::character varying) AS lead_source,
                    COALESCE(c.channel, 'UNATTRIBUTED'::character varying) AS mktg_channel,
                    COALESCE(c.program_description, 'UNATTRIBUTED'::character varying) AS mktg_program,
                    COALESCE(c.offer_description, 'UNATTRIBUTED'::character varying) AS mktg_offer,
                    count(*) AS cnt
                   FROM {schema}.reporting_mst_lead l
                     LEFT JOIN ( SELECT x.cell_key,
                            x.campaign_id,
                            x.time_period,
                                CASE
                                    WHEN p.program_group::text = 'CORP'::text THEN 'ORGR'::character varying
                                    ELSE p.program_group
                                END AS program_description,
                            o.offer_id AS offer_description,
                            x.channel,
                            x.cost_per_piece,
                            x.est_response_rate,
                            x.est_app_rate,
                            x.campaign_start_date,
                            x.campaign_end_date
                           FROM {schema}.reporting_cmp_campaign x
                             JOIN {schema}.reporting_cmp_program p ON x.program_group::text = p.program_group::text
                             JOIN {schema}.reporting_cmp_offer o ON x.offer_key = o.offer_key
                          WHERE x.time_period::text >= '2021-01'::text) c ON l.attributed_mktg_campaign::text = c.campaign_id::text
                  WHERE l.lead_create_date >= '2021-03-01'::date AND l.workable_lead::text = 'Y'::text
                  GROUP BY (to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)), (
                        CASE
                            WHEN c.campaign_id IS NULL THEN to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)::character varying
                            ELSE c.time_period
                        END), (COALESCE(l.sales_channel, 'UNKNWOWN'::character varying)), (COALESCE(l.lead_source, 'UNKNWOWN'::character varying)), (COALESCE(c.channel, 'UNATTRIBUTED'::character varying)), (COALESCE(c.program_description, 'UNATTRIBUTED'::character varying)), (COALESCE(c.offer_description, 'UNATTRIBUTED'::character varying))) ct_1
        ), lead AS (
         SELECT l.lead_create_date AS event_date,
            to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text) AS lead_month,
                CASE
                    WHEN c.campaign_id IS NULL THEN to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)::character varying
                    ELSE c.time_period
                END AS campaign_month,
            COALESCE(l.sales_channel, 'UNKNWOWN'::character varying) AS sales_channel,
            COALESCE(l.lead_source, 'UNKNWOWN'::character varying) AS lead_source,
            COALESCE(c.channel, 'UNATTRIBUTED'::character varying) AS mktg_channel,
            COALESCE(c.program_description, 'UNATTRIBUTED'::character varying) AS mktg_program,
            COALESCE(c.offer_description, 'UNATTRIBUTED'::character varying) AS mktg_offer,
            count(*) AS cnt
           FROM {schema}.reporting_mst_lead l
             LEFT JOIN ( SELECT x.cell_key,
                    x.campaign_id,
                    x.time_period,
                        CASE
                            WHEN p.program_group::text = 'CORP'::text THEN 'ORGR'::character varying
                            ELSE p.program_group
                        END AS program_description,
                    o.offer_id AS offer_description,
                    x.channel,
                    x.cost_per_piece,
                    x.est_response_rate,
                    x.est_app_rate,
                    x.campaign_start_date,
                    x.campaign_end_date
                   FROM {schema}.reporting_cmp_campaign x
                     JOIN {schema}.reporting_cmp_program p ON x.program_group::text = p.program_group::text
                     JOIN {schema}.reporting_cmp_offer o ON x.offer_key = o.offer_key
                  WHERE x.time_period::text >= '2021-01'::text) c ON l.attributed_mktg_campaign::text = c.campaign_id::text
             LEFT JOIN {schema}.reporting_mst_app a ON l.lead_id::text = a.attributed_lead_id::text
          WHERE l.lead_create_date >= '2021-03-01'::date AND l.workable_lead::text = 'Y'::text
          GROUP BY l.lead_create_date, (to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)), (
                CASE
                    WHEN c.campaign_id IS NULL THEN to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)::character varying
                    ELSE c.time_period
                END), (COALESCE(l.sales_channel, 'UNKNWOWN'::character varying)), (COALESCE(l.lead_source, 'UNKNWOWN'::character varying)), (COALESCE(c.channel, 'UNATTRIBUTED'::character varying)), (COALESCE(c.program_description, 'UNATTRIBUTED'::character varying)), (COALESCE(c.offer_description, 'UNATTRIBUTED'::character varying))
        ), app AS (
         SELECT a.app_setup_date AS event_date,
            to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text) AS lead_month,
                CASE
                    WHEN c.campaign_id IS NULL THEN to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)::character varying
                    ELSE c.time_period
                END AS campaign_month,
            COALESCE(l.sales_channel, 'UNKNWOWN'::character varying) AS sales_channel,
            COALESCE(l.lead_source, 'UNKNWOWN'::character varying) AS lead_source,
            COALESCE(c.channel, 'UNATTRIBUTED'::character varying) AS mktg_channel,
            COALESCE(c.program_description, 'UNATTRIBUTED'::character varying) AS mktg_program,
            COALESCE(c.offer_description, 'UNATTRIBUTED'::character varying) AS mktg_offer,
            count(*) AS cnt
           FROM {schema}.reporting_mst_lead l
             LEFT JOIN ( SELECT x.cell_key,
                    x.campaign_id,
                    x.time_period,
                        CASE
                            WHEN p.program_group::text = 'CORP'::text THEN 'ORGR'::character varying
                            ELSE p.program_group
                        END AS program_description,
                    o.offer_id AS offer_description,
                    x.channel,
                    x.cost_per_piece,
                    x.est_response_rate,
                    x.est_app_rate,
                    x.campaign_start_date,
                    x.campaign_end_date
                   FROM {schema}.reporting_cmp_campaign x
                     JOIN {schema}.reporting_cmp_program p ON x.program_group::text = p.program_group::text
                     JOIN {schema}.reporting_cmp_offer o ON x.offer_key = o.offer_key
                  WHERE x.time_period::text >= '2021-01'::text) c ON l.attributed_mktg_campaign::text = c.campaign_id::text
             LEFT JOIN {schema}.reporting_mst_app a ON l.lead_id::text = a.attributed_lead_id::text
          WHERE l.lead_create_date >= '2021-03-01'::date AND a.app_setup_date IS NOT NULL AND l.workable_lead::text = 'Y'::text
          GROUP BY a.app_setup_date, (to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)), (
                CASE
                    WHEN c.campaign_id IS NULL THEN to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)::character varying
                    ELSE c.time_period
                END), (COALESCE(l.sales_channel, 'UNKNWOWN'::character varying)), (COALESCE(l.lead_source, 'UNKNWOWN'::character varying)), (COALESCE(c.channel, 'UNATTRIBUTED'::character varying)), (COALESCE(c.program_description, 'UNATTRIBUTED'::character varying)), (COALESCE(c.offer_description, 'UNATTRIBUTED'::character varying))
        ), fund AS (
         SELECT a.app_fund_date AS event_date,
            to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text) AS lead_month,
                CASE
                    WHEN c.campaign_id IS NULL THEN to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)::character varying
                    ELSE c.time_period
                END AS campaign_month,
            COALESCE(l.sales_channel, 'UNKNWOWN'::character varying) AS sales_channel,
            COALESCE(l.lead_source, 'UNKNWOWN'::character varying) AS lead_source,
            COALESCE(c.channel, 'UNATTRIBUTED'::character varying) AS mktg_channel,
            COALESCE(c.program_description, 'UNATTRIBUTED'::character varying) AS mktg_program,
            COALESCE(c.offer_description, 'UNATTRIBUTED'::character varying) AS mktg_offer,
            count(*) AS cnt
           FROM {schema}.reporting_mst_lead l
             LEFT JOIN ( SELECT x.cell_key,
                    x.campaign_id,
                    x.time_period,
                        CASE
                            WHEN p.program_group::text = 'CORP'::text THEN 'ORGR'::character varying
                            ELSE p.program_group
                        END AS program_description,
                    o.offer_id AS offer_description,
                    x.channel,
                    x.cost_per_piece,
                    x.est_response_rate,
                    x.est_app_rate,
                    x.campaign_start_date,
                    x.campaign_end_date
                   FROM {schema}.reporting_cmp_campaign x
                     JOIN {schema}.reporting_cmp_program p ON x.program_group::text = p.program_group::text
                     JOIN {schema}.reporting_cmp_offer o ON x.offer_key = o.offer_key
                  WHERE x.time_period::text >= '2021-01'::text) c ON l.attributed_mktg_campaign::text = c.campaign_id::text
             LEFT JOIN {schema}.reporting_mst_app a ON l.lead_id::text = a.attributed_lead_id::text
          WHERE l.lead_create_date >= '2021-03-01'::date AND a.app_fund_date IS NOT NULL AND l.workable_lead::text = 'Y'::text
          GROUP BY a.app_fund_date, (to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)), (
                CASE
                    WHEN c.campaign_id IS NULL THEN to_char(l.lead_create_date::timestamp with time zone, 'yyyy-mm'::text)::character varying
                    ELSE c.time_period
                END), (COALESCE(l.sales_channel, 'UNKNWOWN'::character varying)), (COALESCE(l.lead_source, 'UNKNWOWN'::character varying)), (COALESCE(c.channel, 'UNATTRIBUTED'::character varying)), (COALESCE(c.program_description, 'UNATTRIBUTED'::character varying)), (COALESCE(c.offer_description, 'UNATTRIBUTED'::character varying))
        )
 SELECT ct.activity_date,
    ct.lead_month,
    ct.campaign_month,
    ct.sales_channel,
    ct.lead_source,
    ct.mktg_channel,
    ct.mktg_program,
    ct.mktg_offer,
    ld.cnt AS lead_count,
    ap.cnt AS setup_app_cnt,
    f.cnt AS funded_units
   FROM cohort ct
     LEFT JOIN lead ld ON ct.activity_date = ld.event_date AND ct.lead_month = ld.lead_month AND ct.campaign_month::text = ld.campaign_month::text AND ct.sales_channel::text = ld.sales_channel::text AND ct.lead_source::text = ld.lead_source::text AND ct.mktg_channel::text = ld.mktg_channel::text AND ct.mktg_program::text = ld.mktg_program::text AND ct.mktg_offer::text = ld.mktg_offer::text
     LEFT JOIN app ap ON ct.activity_date = ap.event_date AND ct.lead_month = ap.lead_month AND ct.campaign_month::text = ap.campaign_month::text AND ct.sales_channel::text = ap.sales_channel::text AND ct.lead_source::text = ap.lead_source::text AND ct.mktg_channel::text = ap.mktg_channel::text AND ct.mktg_program::text = ap.mktg_program::text AND ct.mktg_offer::text = ap.mktg_offer::text
     LEFT JOIN fund f ON ct.activity_date = f.event_date AND ct.lead_month = f.lead_month AND ct.campaign_month::text = f.campaign_month::text AND ct.sales_channel::text = f.sales_channel::text AND ct.lead_source::text = f.lead_source::text AND ct.mktg_channel::text = f.mktg_channel::text AND ct.mktg_program::text = f.mktg_program::text AND ct.mktg_offer::text = f.mktg_offer::text
  ORDER BY ct.activity_date;
  
insert into jornaya_report select * from {schema}.reporting_jornaya_report;

update jornaya_report
set unique_email_open_count = 0,
email_bounced = 0,
email_sent_count = 0,
last_email_sent_date = null,
last_email_link_clicked_date = null,
email_links_clicked_count = 0
where first_record_flag <> 1;

update jornaya_report
set jo_id = null,
jo_lead_date = null,
jo_lead_status = null,
jo_lq_status = null,
jo_lead_cnt = 0,
jo_app_cnt = 0,
jo_fund_cnt = 0
where lead_rank <> 1;

insert into public.share_of_wallet 
select * from {schema}.reporting_share_of_wallet;

insert into public.share_of_wallet
select 
loan_origination_month,
'ALL' as lender,
loan_type,
loan_purpose,
member_segment,
age,
loan_amount,
ltv,
interest_rate,
property_state,
sum(total_originations) as total_originations,
sum(ORG_originations) as ORG_originations
from public.share_of_wallet 
group by 
loan_origination_month,
--'ALL' as lender,
loan_type,
loan_purpose,
member_segment,
age,
loan_amount,
ltv,
interest_rate,
property_state;

insert into public.share_of_wallet
select 
loan_origination_month,
lender,
loan_type,
loan_purpose,
'Total' as member_segment,
age,
loan_amount,
ltv,
interest_rate,
property_state,
sum(total_originations) as total_originations,
sum(ORG_originations) as ORG_originations
from public.share_of_wallet 
group by 
loan_origination_month,
lender,
loan_type,
loan_purpose,
--member_segment,
age,
loan_amount,
ltv,
interest_rate,
property_state;

update share_of_wallet
set lender = 'QUICKEN/ ROCKET MORTGAGE'
where lender like ('%ROCKET MORTGAGE%');

update share_of_wallet
set lender = 'QUICKEN/ ROCKET MORTGAGE'
where lender like ('%QUICKEN LOANS%');

WITH 
cohort AS 
(
         SELECT dt.activity_date,
            ct_1.lead_month,
            ct_1.campaign_month,
            ct_1.sales_channel,
            ct_1.lead_channel,
            ct_1.lead_campaign,
			ct_1.lead_status_grp
            FROM ( SELECT gs.activity_date::date AS activity_date
                   FROM generate_series('2021-03-01 00:00:00'::timestamp without time zone, CURRENT_DATE::timestamp without time zone, '1 day'::interval) gs(activity_date)) dt,
            ( 
			select
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end as lead_month,
			case when c.campaign_id is not null then c.time_period else
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end end as campaign_month,
			sales_channel,
			referral_source as lead_channel,
			case when mktg_channel = 'Anything' then 
			case when c.campaign_id is not null then 'DM/EMAIL' else 'Organic' end 
--			when mktg_channel in ('Jumbo Refi', 'VA IRRRL Digital', 'VA IRRRL Retail') then 'Outbound Lists'
--			when mktg_channel in ('FreeRateUpdate','Lendgo','Lendilio','SuCo','WisdomCo') then 'Aggregators'
			else mktg_channel end as lead_campaign,
			lead_status_grp,
			count(*) as cnt
			from {schema}.reporting_mst_lead l left join
			(select * from {schema}.reporting_cmp_campaign where offer_key in (81,82,83,88,91,92,93,98) 
			 and channel in ('DM', 'EMAIL')) c
			on (l.attributed_mktg_campaign = c.campaign_id) 
			where workable_lead = 'Y' and referral_source is not null
			and lead_create_date >= to_date('03/01/2021','mm/dd/yyyy')
			group by 1,2,3,4,5,6
			) ct_1       
	group by 1,2,3,4,5,6,7
), 

lead AS (
         SELECT 
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			greatest(lead_create_date, last_action_taken_date) else Lead_create_date end AS event_date,
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end as lead_month,
			case when c.campaign_id is not null then c.time_period else
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end end as campaign_month,
			sales_channel,
			referral_source as lead_channel,
			case when mktg_channel = 'Anything' then 
			case when c.campaign_id is not null then 'DM/EMAIL' else 'Organic' end 
--			when mktg_channel in ('Jumbo Refi', 'VA IRRRL Digital', 'VA IRRRL Retail') then 'Outbound Lists'
--			when mktg_channel in ('FreeRateUpdate','Lendgo','Lendilio','SuCo','WisdomCo') then 'Aggregators'
			else mktg_channel end as lead_campaign,
			lead_status_grp,
			count(*) as leads,
			sum(case when l.lq_lead_id is not null then 1 else 0 end) as lq_assigned,
			sum(case when l.lq_lead_id is not null and lq_status in ('LQ Contact', 'LQ Transfer') then 1 else 0 end) as lq_contact,
			sum(case when l.lq_lead_id is not null and lq_status in ('LQ Transfer') then 1 else 0 end) as lq_transfer,
			sum(case when first_contact_made_type = 'LO Contact' then 1 else 0 end) as lo_contact
			from {schema}.reporting_mst_lead l left join
			(select * from {schema}.reporting_cmp_campaign where offer_key in (81,82,83,88,91,92,93,98) 
			 and channel in ('DM', 'EMAIL')) c
			on (l.attributed_mktg_campaign = c.campaign_id) 
			where workable_lead = 'Y' and referral_source is not null
						and lead_create_date >= to_date('03/01/2021','mm/dd/yyyy')
			group by 1,2,3,4,5,6,7        
), 

app AS 
(
         SELECT 
		 	a.app_setup_date AS event_date,
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end as lead_month,
			case when c.campaign_id is not null then c.time_period else
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end end as campaign_month,
			sales_channel,
			referral_source as lead_channel,
			case when mktg_channel = 'Anything' then 
			case when c.campaign_id is not null then 'DM/EMAIL' else 'Organic' end 
--			when mktg_channel in ('Jumbo Refi', 'VA IRRRL Digital', 'VA IRRRL Retail') then 'Outbound Lists'
--			when mktg_channel in ('FreeRateUpdate','Lendgo','Lendilio','SuCo','WisdomCo') then 'Aggregators'
			else mktg_channel end as lead_campaign,
			lead_status_grp,
			count(*) as apps
			from {schema}.reporting_mst_lead l 
			left join
			(select * from {schema}.reporting_cmp_campaign where offer_key in (81,82,83,88,91,92,93,98) 
			 and channel in ('DM', 'EMAIL')) c
			on (l.attributed_mktg_campaign = c.campaign_id) 
			inner join {schema}.reporting_mst_app a
			on (l.attributed_app_no = a.app_no)
			where workable_lead = 'Y' and referral_source is not null
			and lead_create_date >= to_date('03/01/2021','mm/dd/yyyy')
			and app_setup_date is not null
			group by 1,2,3,4,5,6,7
), 

lock AS 
(
         SELECT 
		 	a.app_rate_lock_date AS event_date,
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end as lead_month,
			case when c.campaign_id is not null then c.time_period else
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end end as campaign_month,
			sales_channel,
			referral_source as lead_channel,
			case when mktg_channel = 'Anything' then 
			case when c.campaign_id is not null then 'DM/EMAIL' else 'Organic' end 
--			when mktg_channel in ('Jumbo Refi', 'VA IRRRL Digital', 'VA IRRRL Retail') then 'Outbound Lists'
--			when mktg_channel in ('FreeRateUpdate','Lendgo','Lendilio','SuCo','WisdomCo') then 'Aggregators'
			else mktg_channel end as lead_campaign,
			lead_status_grp,
			count(*) as locks
			from {schema}.reporting_mst_lead l 
			left join
			(select * from {schema}.reporting_cmp_campaign where offer_key in (81,82,83,88,91,92,93,98) 
			 and channel in ('DM', 'EMAIL')) c
			on (l.attributed_mktg_campaign = c.campaign_id) 
			inner join {schema}.reporting_mst_app a
			on (l.attributed_app_no = a.app_no)
			where workable_lead = 'Y' and referral_source is not null
			and lead_create_date >= to_date('03/01/2021','mm/dd/yyyy')
			and app_rate_lock_date is not null and app_setup_date is not null
			group by 1,2,3,4,5,6,7
), 

fund AS 
(
         SELECT 
		 	a.app_fund_date AS event_date,
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end as lead_month,
			case when c.campaign_id is not null then c.time_period else
			case when referral_source in ('Get My Rate', 'Lead Acquisition', 'Outbound', 'Transfers') then
			to_char(greatest(lead_create_date, last_action_taken_date),'yyyy-mm')  else to_char(Lead_create_date,'yyyy-mm') end end as campaign_month,
			sales_channel,
			referral_source as lead_channel,
			case when mktg_channel = 'Anything' then 
			case when c.campaign_id is not null then 'DM/EMAIL' else 'Organic' end 
--			when mktg_channel in ('Jumbo Refi', 'VA IRRRL Digital', 'VA IRRRL Retail') then 'Outbound Lists'
--			when mktg_channel in ('FreeRateUpdate','Lendgo','Lendilio','SuCo','WisdomCo') then 'Aggregators'
			else mktg_channel end as lead_campaign,
			lead_status_grp,
			count(*) as fund,
			sum(case when app_product_group not like ('%HELOC%') then 1 else 0 end) as fund_first,
			sum(case when app_product_group not like ('%HELOC%') then app_loan_amt else 0 end) as fund_first_amt
			from {schema}.reporting_mst_lead l 
			left join
			(select * from {schema}.reporting_cmp_campaign where offer_key in (81,82,83,88,91,92,93,98) 
			 and channel in ('DM', 'EMAIL')) c
			on (l.attributed_mktg_campaign = c.campaign_id) 
			inner join {schema}.reporting_mst_app a
			on (l.attributed_app_no = a.app_no)
			where workable_lead = 'Y' and referral_source is not null
			and lead_create_date >= to_date('03/01/2021','mm/dd/yyyy')
			and app_fund_date is not null
			group by 1,2,3,4,5,6,7        
)
insert into public.new_dashboard
 SELECT distinct
 	ct.activity_date as "Activity Date",
    ct.lead_month as "Lead Month",
    ct.campaign_month as "Campaign Month",
    ct.sales_channel as "Sales Channel",
    ct.lead_channel as "Lead Channel",
    ct.lead_campaign as "Lead Campaign",
    ct.lead_status_grp as "Lead Status Group",
    coalesce(ld.leads,0) as "Number of Leads",
	coalesce(ld.lq_assigned,0) as "Assigned to LQ",
	coalesce(ld.lq_contact,0) as "Contacted by LQ",
	coalesce(ld.lq_transfer,0) as "Transfered by LQ",
	coalesce(ld.lo_contact,0) as "Contacted by LO",
    coalesce(ap.apps,0) as "GFE Applications",
	coalesce(lc.locks,0) as "Rate Locks",
    coalesce(f.fund,0) as "Funded Units",
	coalesce(f.fund_first,0) as "Funded Units (1st Liens)",
	coalesce(f.fund_first_amt,0) as "Funded Amount (1st Liens)"
   FROM cohort ct
     LEFT JOIN lead ld ON ct.activity_date = ld.event_date AND ct.lead_month = ld.lead_month AND ct.campaign_month::text = ld.campaign_month::text AND ct.sales_channel::text = ld.sales_channel::text AND ct.lead_channel::text = ld.lead_channel::text AND ct.lead_campaign::text = ld.lead_campaign::text AND ct.lead_status_grp = ld.lead_status_grp
     LEFT JOIN app ap ON ct.activity_date = ap.event_date AND ct.lead_month = ap.lead_month AND ct.campaign_month::text = ap.campaign_month::text AND ct.sales_channel::text = ap.sales_channel::text AND ct.lead_channel::text = ap.lead_channel::text AND ct.lead_campaign::text = ap.lead_campaign::text AND ct.lead_status_grp = ap.lead_status_grp
     LEFT JOIN lock lc ON ct.activity_date = lc.event_date AND ct.lead_month = lc.lead_month AND ct.campaign_month::text = lc.campaign_month::text AND ct.sales_channel::text = lc.sales_channel::text AND ct.lead_channel::text = lc.lead_channel::text AND ct.lead_campaign::text = lc.lead_campaign::text AND ct.lead_status_grp = lc.lead_status_grp
	 LEFT JOIN fund f ON ct.activity_date = f.event_date AND ct.lead_month = f.lead_month AND f.campaign_month::text = f.campaign_month::text AND ct.sales_channel::text = f.sales_channel::text AND ct.lead_channel::text = f.lead_channel::text AND ct.lead_campaign::text = f.lead_campaign::text AND ct.lead_status_grp = f.lead_status_grp
  ORDER BY ct.activity_date;
  
  
insert into public.new_dashboard_dm_email_cnt
select
dis.disposition_date as lead_create_date,
dis.cnt as disp_cnt,
ld.l as lead_cnt,
round(dis.cnt/ld.l,3) as avg_impressions
from
(
select disposition_date::date as disposition_date, count(*)::numeric as cnt from
{schema}.reporting_cmp_disposition_history d inner join 
(select * from {schema}.reporting_cmp_campaign
where channel in ('DM','EMAIL') 
and program_group in ('CSELL','MEMB','RETN') 
) c on (d.campaign_id = c.campaign_id)
group by 1
) dis inner join
(
select lead_create_date::date as lead_create_date, count(*)::numeric as l
from {schema}.reporting_mst_lead l where mktg_channel = 'DM/EMAIL'
group by 1
) ld
on (dis.disposition_date = ld.lead_create_date);

END;
$BODY$;

GRANT EXECUTE ON PROCEDURE public.update_dashboard_summaries() TO dashboard_updater;

GRANT EXECUTE ON PROCEDURE public.update_dashboard_summaries() TO qmp_{schema};

GRANT EXECUTE ON PROCEDURE public.update_dashboard_summaries() TO PUBLIC;

