shivay.--
-- PostgreSQL database dump
--

-- Dumped from database version 11.12
-- Dumped by pg_dump version 13.3

-- Started on 2022-02-19 11:47:58 EST

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 10 (class 2615 OID 16410)
-- Name: penfed; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA penfed;


ALTER SCHEMA penfed OWNER TO postgres;

--
-- TOC entry 423 (class 1255 OID 16439)
-- Name: cmp_0_run_campaign_updates(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.cmp_0_run_campaign_updates()
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

		call shivay.cmp_1_add_email_campaigns();
				
		call shivay.cmp_2_add_email_dispositions();
				
		call shivay.cmp_3_solicit_lead_app_match();
				
		call shivay.cmp_4_add_email_suppressions();
				
		call shivay.cmp_5_update_cmp_info_lead_app();
		
		call shivay.prepare_campaign_export();
				
		
END;
$$;


ALTER PROCEDURE shivay.cmp_0_run_campaign_updates() OWNER TO postgres;

--
-- TOC entry 442 (class 1255 OID 16440)
-- Name: cmp_1_add_email_campaigns(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.cmp_1_add_email_campaigns()
    LANGUAGE plpgsql
    AS $$

BEGIN

insert into shivay.cmp_campaign
select
nextval('shivay.cell_key_seq') as CELL_KEY,
to_char(campaign_date,'mm') || '_' || to_char(campaign_date,'yy') || '_' || 
lpad(cast(row_number() over(order by d.campaign_name) as text),2,'0') || 'z' as CELL_ID,
d.CAMPAIGN_name,
null as lot_no,
to_char(campaign_date,'yyyy-mm') as TIME_PERIOD,
case when d.campaign_name like ('%MLS%') then 'TRIG' 
when d.campaign_name like ('%Thank_You%') then 'OPPS' 
when d.campaign_name like ('%Drip%') then 'OPPS' 
when d.campaign_name like ('%Rate_Lock%') then 'OPPS'
when d.campaign_name like ('%Realty%') then 'CORP'
when d.campaign_name like ('%HELOC%') then 'RETN' 
when d.campaign_name like ('%Servicing%') then 'SERV'
else null end as PROGRAM_GROUP,
'EMAIL' as CHANNEL,
cast(campaign_date as date) as FILE_DATE,
cast(campaign_date as date) as CAMPAIGN_START_DATE,

case when d.campaign_name like ('%MLS%') then cast(campaign_date as date) + 30 
when d.campaign_name like ('%Thank_You%') then cast(campaign_date as date) + 15 
when d.campaign_name like ('%Drip%') then cast(campaign_date as date) + 15 
when d.campaign_name like ('%Rate_Lock%') then cast(campaign_date as date) + 15
when d.campaign_name like ('%Realty%') then cast(campaign_date as date) + 15
when d.campaign_name like ('%HELOC%') then cast(campaign_date as date) + 30 
when d.campaign_name like ('%Servicing%') then cast(campaign_date as date) + 15
else cast(campaign_date as date) + 30 end as CAMPAIGN_END_DATE,

case when d.campaign_name like ('%MLS%') then 90 
when d.campaign_name like ('%Thank_You%') then 80 
when d.campaign_name like ('%Drip%') then 80 
when d.campaign_name like ('%Rate_Lock%') then 80
when d.campaign_name like ('%Realty%') then 80
when d.campaign_name like ('%HELOC%') then 89 
when d.campaign_name like ('%Servicing%') then 79 
else null end as OFFER_KEY,

cast(null as numeric) as CREATIVE_KEY,
1001 as VENDOR_KEY,
cast(null as numeric) as FILE_KEY,
null as PHONE_NUMBER,
null as UTM_STRING,
0 as EST_QUANTITY,
0 as COST_PER_PIECE,
0 as EST_RESPONSE_RATE,
0 as EST_APP_RATE,
cast('Y' as varchar(1)) as EXECUTED_FLAG,
'N' as PROCESSED_FLAG
from 
(select 
 campaign_name, 
 min(disposition_date) as campaign_date,
 count(*) as cnt from public.disposition_data_typed group by campaign_name
) d 
left join
shivay.cmp_campaign c
on (d.campaign_name = c.campaign_id)
where c.campaign_id is null
and d.campaign_name is not null
and d.campaign_name <> ''
and d.campaign_name not like ('Gmail%')
and d.campaign_name not like ('Copy of%');

execute format('insert into public.process_log values(''PENFED'', ''CAMPAIGN TABS'', ''1. Add EMAIL Campaigns'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.cmp_1_add_email_campaigns() OWNER TO postgres;

--
-- TOC entry 449 (class 1255 OID 16441)
-- Name: cmp_2_add_email_dispositions(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.cmp_2_add_email_dispositions()
    LANGUAGE plpgsql
    AS $$
BEGIN

execute 'truncate table shivay.STG_EMAIL_DISPOSITION_DATA';

INSERT INTO shivay.STG_EMAIL_DISPOSITION_DATA
SELECT
D.CAMPAIGN_NAME AS CAMPAIGN_ID,
EMAIL_ADDRESS,
PHONE,
DISPOSITION_DATE,
DISPOSITION_DESCRIPTION,
C.CELL_KEY
FROM PUBLIC.DISPOSITION_DATA_TYPED D JOIN 
(SELECT * FROM shivay.CMP_CAMPAIGN WHERE CELL_ID LIKE ('%z') AND PROCESSED_FLAG = 'N') C
ON (D.CAMPAIGN_NAME = C.CAMPAIGN_ID);

insert into shivay.cmp_disposition_history
		SELECT
		nextval('shivay.disposition_key_seq') AS RECORD_ID,
		D1.CAMPAIGN_ID,
		D2.CAMPAIGN_DATE AS CAMPAIGN_DATE,
		D1.EMAIL,
		D1.DISPOSITION_DATE,
		D1.DISPOSITION_DESCRIPTION,
		D2.CNT_SENT,
		D2.CNT_OPENED,
		D2.CNT_CLICKED,
		D2.CNT_BOUNCED,
		D2.CNT_UNSUBSCRIBE,
		X.CUSTOMER_ID,
		X.SEGMENT as CUSTOMER_SEGMENT,
		D1.CELL_KEY
		FROM

		(
			select * from
			(
						SELECT 
						CAMPAIGN_ID,
						CELL_KEY,
						UPPER(EMAIL_ADDRESS) AS EMAIL,
						DISPOSITION_DATE,
						DISPOSITION_DESCRIPTION,
						ROW_NUMBER() OVER
							(PARTITION BY CAMPAIGN_ID, UPPER(EMAIL_ADDRESS) ORDER BY 
								CASE 
								WHEN DISPOSITION_DESCRIPTION = 'Clicked' THEN 1 
								WHEN DISPOSITION_DESCRIPTION = 'Opened' THEN 2
								WHEN DISPOSITION_DESCRIPTION = 'Unsubscribe' THEN 3 
								WHEN DISPOSITION_DESCRIPTION = 'Bounced' THEN 4
								ELSE 5 END,
								DISPOSITION_DATE DESC
							 ) AS DISP_RANK
						FROM shivay.STG_EMAIL_DISPOSITION_DATA D where campaign_id <> '' 
			) x where disp_rank = 1
		) D1 
		left join
		(
				SELECT
				CAMPAIGN_ID,
				UPPER(EMAIL_ADDRESS) AS EMAIL,
				MIN(DISPOSITION_DATE) AS CAMPAIGN_DATE,
				SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Sent' THEN 1 ELSE 0 END) AS CNT_SENT,
				SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Opened' THEN 1 ELSE 0 END) AS CNT_OPENED,
				SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Clicked' THEN 1 ELSE 0 END) AS CNT_CLICKED,
				SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Bounced' THEN 1 ELSE 0 END) AS CNT_BOUNCED,
				SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Unsubscribed' THEN 1 ELSE 0 END) AS CNT_UNSUBSCRIBE
				FROM shivay.STG_EMAIL_DISPOSITION_DATA D where campaign_id <> ''
				GROUP BY
				CAMPAIGN_ID,
				EMAIL
		) D2
on (D1.CAMPAIGN_ID = D2.CAMPAIGN_ID AND D1.EMAIL = D2.EMAIL)
left join shivay.STG_EMAIL_CUST_ID_MATCH x
on (d1.email = x.email)
where (x.customer_rank is null or x.customer_rank = 1);

update shivay.cmp_campaign 
set processed_flag = 'Y'
where channel = 'EMAIL' and processed_flag = 'N';

update shivay.stg_jornaya_disposition_data j
set disposition_description = x.disposition_description,
cnt_sent = x.cnt_sent,
cnt_opened = x.cnt_opened,
cnt_clicked = x.cnt_clicked
from
(
	select 
	lead_id,
	campaign_id,
	disposition_date::date as campaign_date,
	email,
	disposition_date,
	case when d_rank <= "Email_Links_Clicked_Count" then 'Clicked'
	when d_rank <= "Unique_Email_Open_Count" then 'Opened'
	else 'Sent' end as disposition_description,
	1 as cnt_sent,
	case when d_rank <= "Unique_Email_Open_Count" then 1 else 0 end as cnt_opened,
	case when d_rank <= "Email_Links_Clicked_Count" then 1 else 0 end as cnt_clicked,
	0 as cnt_bounced,
	0 as cnt_unsubscribed,
	customer_id,
	customer_segment,
	cell_key
	from
	(
		select 
		j1.id as lead_id,
		email,
		attributed_customer_id as customer_id,
		customer_segment,
		cell_key,
		log_note as campaign_id,
		log_date as disposition_date,
		"Unique_Email_Open_Count",
		"Email_Sent_Count",
		"Last_Email_Sent_Date",
		"Last_Email_Link_Clicked_Date",
		"Email_Links_Clicked_Count",
		case when j1.log_date::date < v."Last_Email_Link_Clicked_Date" then -1
		when j1.log_date::date = v."Last_Email_Link_Clicked_Date" then 0
		else +1 end as click_rank,
		row_number() over(partition by j1.id order by case when j1.log_date::date = v."Last_Email_Link_Clicked_Date" then to_date('06/01/2021','mm/dd/yyyy') else j1.log_date end) as d_rank

		from shivay.stg_jornaya_data j1 inner join 
		shivay.mst_lead l 
		on (j1.id = l.lead_id)
		inner join public.velocify_data_typed v
		on (j1.id = v."Id")
		inner join (select * from shivay.cmp_campaign where campaign_id like ('%Jornaya%')) c
		on (j1.log_note = c.campaign_id)
		where l.lead_source = 'Jornaya Activate'
		and j1.log_type = 'Email Sent'
	--	and j1.id in ('243993', '243227', '237058')
	) z
) x
where j.email = x.email 
	   and j.campaign_id = x.campaign_id 
	   and j.disposition_date = x.disposition_date;

insert into shivay.stg_jornaya_disposition_data
select x.*
from
(
	select 
	nextval('shivay.disposition_key_seq') AS RECORD_ID,
	campaign_id,
	disposition_date::date as campaign_date,
	email,
	disposition_date,
	case when d_rank <= "Email_Links_Clicked_Count" then 'Clicked'
	when d_rank <= "Unique_Email_Open_Count" then 'Opened'
	else 'Sent' end as disposition_description,
	1 as cnt_sent,
	case when d_rank <= "Unique_Email_Open_Count" then 1 else 0 end as cnt_opened,
	case when d_rank <= "Email_Links_Clicked_Count" then 1 else 0 end as cnt_clicked,
	0 as cnt_bounced,
	0 as cnt_unsubscribed,
	customer_id,
	customer_segment,
	cell_key
	from
	(
		select 
		j1.id as lead_id,
		email,
		attributed_customer_id as customer_id,
		customer_segment,
		cell_key,
		log_note as campaign_id,
		log_date as disposition_date,
		"Unique_Email_Open_Count",
		"Email_Sent_Count",
		"Last_Email_Sent_Date",
		"Last_Email_Link_Clicked_Date",
		"Email_Links_Clicked_Count",
		case when j1.log_date::date < v."Last_Email_Link_Clicked_Date" then -1
		when j1.log_date::date = v."Last_Email_Link_Clicked_Date" then 0
		else +1 end as click_rank,
		row_number() over(partition by j1.id order by case when j1.log_date::date = v."Last_Email_Link_Clicked_Date" then to_date('06/01/2021','mm/dd/yyyy') else j1.log_date end) as d_rank

		from shivay.stg_jornaya_data j1 inner join 
		shivay.mst_lead l 
		on (j1.id = l.lead_id)
		inner join public.velocify_data_typed v
		on (j1.id = v."Id")
		inner join (select * from shivay.cmp_campaign where campaign_id like ('%Jornaya%')) c
		on (j1.log_note = c.campaign_id)
		where l.lead_source = 'Jornaya Activate'
		and j1.log_type = 'Email Sent'
	--	and j1.id in ('243993', '243227', '237058')
	) z
) x
left join shivay.stg_jornaya_disposition_data j 
on (j.email = x.email and j.campaign_id = x.campaign_id and j.disposition_date = x.disposition_date)
where j.record_id is null;

update shivay.cmp_disposition_history j
set disposition_description = x.disposition_description,
cnt_sent = x.cnt_sent,
cnt_opened = x.cnt_opened,
cnt_clicked = x.cnt_clicked
from shivay.stg_jornaya_disposition_data x
where j.record_id = x.record_id;

insert into shivay.cmp_disposition_history
select x.*
from shivay.stg_jornaya_disposition_data x 
left join shivay.cmp_disposition_history j
on (j.record_id = x.record_id)
where j.record_id is null;

insert into shivay.cmp_disposition_history
select distinct
nextval('shivay.disposition_key_seq') as record_id,
c.campaign_id,
d.drop_date as campaign_date,
upper(x.home_email) as email,
d.drop_date as disposition_date,
'Loaded' as disposition_description,
1 as cnt_sent,
0 as cnt_opened,
0 as cnt_clicked,
0 as cnt_bounced,
0 as cnt_unsubscribed,
d.customer_id,
case when z.customer_id is null then 'Not On Us' else 'On Us' end as customer_segment,
c.cell_key
from shivay.stg_trg_tran_disposition_data d inner join 
shivay.cmp_campaign c on (d.cell_id = c.cell_id)
left join customer_data_typed x on (d.customer_id = x.customer_id)
left join (select distinct customer_id from shivay.bk_rap_cust_data where pos_1st_lender like ('%PENTAGON%')) z 
on (d.customer_id = z.customer_id)
where d.processed_flag = 'N';

update shivay.stg_trg_tran_disposition_data
set processed_flag = 'Y'
where processed_flag = 'N';

execute format('insert into public.process_log values(''PENFED'', ''CAMPAIGN TABS'', ''2. Update Dispositions'', null, current_timestamp)');

/*
insert into shivay.cmp_disposition_history
select distinct
nextval('shivay.disposition_key_seq') as record_id,
c.campaign_id,
d.drop_date as campaign_date,
x.email,
d.drop_date as disposition_date,
'Mailed' as disposition_description,
1 as cnt_sent,
0 as cnt_opened,
0 as cnt_clicked,
0 as cnt_bounced,
0 as cnt_unsubscribed,
d.customer_id,
case when c.program_group = 'CSELL' then 'Not On Us' else 'On Us' end as customer_segment,
c.cell_key
from shivay.stg_dm_disposition_data d inner join 
shivay.cmp_campaign c on (d.cell_id = c.cell_id)
inner join shivay.cmp_sol_history_dm x on (d.customer_id = x.customer_id and d.cell_id = x.cell_id)
where c.processed_flag = 'N';

update shivay.cmp_campaign c
set campaign_start_date = x.dt,
campaign_end_date = x.dt + 60,
executed_flag = 'Y',
processed_flag = 'Y'
from
(
	select
	cell_id,
	min(drop_date) as dt
	from shivay.stg_dm_disposition_data
	group by cell_id
) x
where c.cell_id = x.cell_id;
*/

END;
$$;


ALTER PROCEDURE shivay.cmp_2_add_email_dispositions() OWNER TO postgres;

--
-- TOC entry 485 (class 1255 OID 16443)
-- Name: cmp_3_solicit_lead_app_match(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.cmp_3_solicit_lead_app_match()
    LANGUAGE plpgsql
    AS $$
BEGIN

    	execute 'truncate table shivay.stg_lead_app_match';
    	execute 'truncate table shivay.stg_solicit_lead_match';

insert into shivay.stg_lead_app_match
 SELECT l.app_no,
    l.lead_id,
    l.match_type
   FROM ( SELECT s.app_no,
            s.lead_id,
            s.match_type,
            s.final_app_rank,
            rank() OVER (PARTITION BY s.lead_id ORDER BY s.match_type) AS final_lead_rank
           FROM ( SELECT f.app_no,
                    f.lead_id,
                    f.match_type,
                    rank() OVER (PARTITION BY f.app_no ORDER BY f.match_type) AS final_app_rank
                   FROM ( 
					   
					   select app_no, lead_id, match_type from
					   (
					   SELECT A.APP_NO,
					   L.LEAD_ID,
					   '1. ENCOMPASS_APP' AS MATCH_TYPE,
						row_number() over(partition by l.app_no order by l.lead_create_date) as rnk
					   FROM shivay.MST_LEAD L INNER JOIN shivay.MST_APP A
					   ON (L.APP_NO = A.APP_NO)
					   where crm_system = 'VELOCIFY' and l.app_no is not null
					   ) d where rnk = 1

					   UNION ALL
					   
					   		SELECT q.app_no,
                            q.lead_id,
                            '2. CUSTOMER_ID'::text AS match_type
                           FROM ( SELECT z.app_no,
                                    z.app_create_date,
                                    z.lead_id,
                                    z.lead_create_date,
                                    z.app_rank,
                                    row_number() OVER (PARTITION BY z.lead_id ORDER BY z.app_create_date, z.app_no) AS lead_rank
                                   FROM ( SELECT ed.app_no,
    ed.app_create_date,
    sd.lead_id,
    sd.lead_create_date,
    row_number() OVER (PARTITION BY ed.app_no ORDER BY sd.lead_create_date DESC, sd.lead_id DESC) AS app_rank
   FROM shivay.mst_app ed
     JOIN shivay.mst_lead sd ON ed.attributed_customer_id::text = sd.attributed_customer_id::text
  WHERE sd.attributed_customer_id IS NOT NULL AND ed.app_create_date >=
  CASE
   WHEN sd.workable_lead::text = 'Y'::text THEN sd.lead_create_date::timestamp without time zone
   ELSE to_date('01/01/2050'::text, 'MM/DD/YYYY'::text)::timestamp without time zone
  END) z
                                  WHERE z.app_rank = 1) q
                          WHERE q.lead_rank = 1
                        UNION ALL
                         SELECT q.app_no,
                            q.lead_id,
                            '3. EMAIL'::text AS match_type
                           FROM ( SELECT z.app_no,
                                    z.app_create_date,
                                    z.lead_id,
                                    z.lead_create_date,
                                    z.app_rank,
                                    row_number() OVER (PARTITION BY z.lead_id ORDER BY z.app_create_date, z.app_no) AS lead_rank
                                   FROM ( SELECT ed.app_no,
    ed.app_create_date,
    sd.lead_id,
    sd.lead_create_date,
    row_number() OVER (PARTITION BY ed.app_no ORDER BY sd.lead_create_date DESC, sd.lead_id DESC) AS app_rank
   FROM shivay.mst_app ed
     JOIN shivay.mst_lead sd ON ed.app_prim_email::text = sd.email::text
  WHERE sd.email::text ~~ '%@%'::text AND ed.app_create_date >=
  CASE
   WHEN sd.workable_lead::text = 'Y'::text THEN sd.lead_create_date::timestamp without time zone
   ELSE to_date('01/01/2050'::text, 'MM/DD/YYYY'::text)::timestamp without time zone
  END) z
                                  WHERE z.app_rank = 1) q
                          WHERE q.lead_rank = 1
                        UNION ALL
                         SELECT q.app_no,
                            q.lead_id,
                            '4. PHONE'::text AS match_type
                           FROM ( SELECT z.app_no,
                                    z.app_create_date,
                                    z.lead_id,
                                    z.lead_create_date,
                                    z.app_rank,
                                    row_number() OVER (PARTITION BY z.lead_id ORDER BY z.app_create_date, z.app_no) AS lead_rank
                                   FROM ( SELECT ed.app_no,
    ed.app_create_date,
    sd.lead_id,
    sd.lead_create_date,
    row_number() OVER (PARTITION BY ed.app_no ORDER BY sd.lead_create_date DESC, sd.lead_id DESC) AS app_rank
   FROM shivay.mst_app ed
     JOIN shivay.mst_lead sd ON ed.app_prim_home_phone::text = sd.day_phone::text
  WHERE sd.day_phone::text <> ''::text AND ed.app_create_date >=
  CASE
   WHEN sd.workable_lead::text = 'Y'::text THEN sd.lead_create_date::timestamp without time zone
   ELSE to_date('01/01/2050'::text, 'MM/DD/YYYY'::text)::timestamp without time zone
  END) z
                                  WHERE z.app_rank = 1) q
                          WHERE q.lead_rank = 1) f) s
          WHERE s.final_app_rank = 1) l
  WHERE l.final_lead_rank = 1;


insert into shivay.stg_solicit_lead_match
 SELECT 
 l.record_id,
 l.lead_id,
 l.match_type
   FROM (
	   		SELECT s.record_id,
            s.lead_id,
            s.match_type,
            s.final_lead_rank,
            rank() OVER (PARTITION BY s.record_id ORDER BY s.match_type) AS final_sol_rank
           FROM ( 
			   		SELECT f.record_id,
                    f.lead_id,
                    f.match_type,
                    rank() OVER (PARTITION BY f.lead_id ORDER BY f.match_type) AS final_lead_rank
                   FROM (
					   SELECT q.record_id,
                            q.lead_id,
                            '1. CUSTOMER_ID'::text AS match_type
                           FROM ( SELECT 
								 	z.lead_id,
                                    z.lead_create_date,
                                    z.record_id,
                                    z.campaign_id,
                                    z.disposition_date,
                                    z.lead_rank,
                                    row_number() OVER (PARTITION BY z.record_id ORDER BY z.lead_create_date, z.lead_id) AS sol_rank
                                   FROM ( SELECT ed.lead_id,
											ed.lead_create_date,
											sd.record_id,
											sd.campaign_id,
											sd.disposition_date,
											row_number() OVER (PARTITION BY ed.lead_id ORDER BY sd.disposition_date DESC, sd.record_id DESC) AS lead_rank
										   FROM shivay.cmp_disposition_history sd
											 JOIN shivay.mst_lead ed ON (sd.customer_id = ed.attributed_customer_id and sd.campaign_id = ed.lead_source)
										 	 join (select * from shivay.cmp_campaign where channel in ('OBTM', 'TRANSFERS')) c 
										 ON (sd.campaign_id = c.campaign_id)
										  WHERE sd.customer_id is not null 
										 AND greatest(ed.lead_create_date, ed.last_action_taken_date) >= sd.disposition_date 
										 and ed.workable_lead = 'Y' /*and ed.sales_channel in ('RETAIL','DIGITAL')*/
										 --AND ed.lead_create_date between c.campaign_start_date and c.campaign_end_date 
										 AND (sd.disposition_description in (/*'Opened', 'Clicked', 'Mailed',*/'Loaded'))
										) z
										WHERE z.lead_rank = 1
								) q
																  
						 WHERE q.sol_rank = 1
					   
					   union all
					   
					   
					   		SELECT q.record_id,
                            q.lead_id,
                            '2. EMAIL'::text AS match_type
                           FROM ( SELECT 
								 	z.lead_id,
                                    z.lead_create_date,
                                    z.record_id,
                                    z.campaign_id,
                                    z.disposition_date,
                                    z.lead_rank,
                                    row_number() OVER (PARTITION BY z.record_id ORDER BY z.lead_create_date, z.lead_id) AS sol_rank
                                   FROM ( SELECT ed.lead_id,
											ed.lead_create_date,
											sd.record_id,
											sd.campaign_id,
											sd.disposition_date,
											row_number() OVER (PARTITION BY ed.lead_id ORDER BY sd.disposition_date DESC, sd.record_id DESC) AS lead_rank
										   FROM shivay.cmp_disposition_history sd
											 JOIN shivay.mst_lead ed ON (sd.email::text = ed.email::text and sd.campaign_id = ed.lead_source)
										 	 join (select * from shivay.cmp_campaign where channel in ('OBTM', 'TRANSFERS')) c 
										 ON (sd.campaign_id = c.campaign_id)
										  WHERE sd.email::text ~~ '%@%'::text 
										 AND greatest(ed.lead_create_date, ed.last_action_taken_date) >= sd.disposition_date
										 and ed.workable_lead = 'Y' /*and ed.sales_channel in ('RETAIL','DIGITAL')*/
										 --AND ed.lead_create_date between c.campaign_start_date and c.campaign_end_date 
										 AND (sd.disposition_description in (/*'Opened', 'Clicked', 'Mailed',*/'Loaded'))
										) z
										WHERE z.lead_rank = 1
								) q
																  
						 WHERE q.sol_rank = 1
						) f
		   ) s
          WHERE s.final_lead_rank = 1
   ) l left join shivay.stg_solicit_lead_match sl
   on (l.lead_id = sl.lead_id)
  WHERE l.final_sol_rank = 1 and sl.lead_id is null;

insert into shivay.stg_solicit_lead_match
 SELECT 
 l.record_id,
 l.lead_id,
 l.match_type
   FROM (
	   		SELECT s.record_id,
            s.lead_id,
            s.match_type,
            s.final_lead_rank,
            rank() OVER (PARTITION BY s.record_id ORDER BY s.match_type) AS final_sol_rank
           FROM ( 
			   		SELECT f.record_id,
                    f.lead_id,
                    f.match_type,
                    rank() OVER (PARTITION BY f.lead_id ORDER BY f.match_type) AS final_lead_rank
                   FROM (
					   SELECT q.record_id,
                            q.lead_id,
                            '1. CUSTOMER_ID'::text AS match_type
                           FROM ( SELECT 
								 	z.lead_id,
                                    z.lead_create_date,
                                    z.record_id,
                                    z.campaign_id,
                                    z.disposition_date,
                                    z.lead_rank,
                                    row_number() OVER (PARTITION BY z.record_id ORDER BY z.lead_create_date, z.lead_id) AS sol_rank
                                   FROM ( SELECT ed.lead_id,
											ed.lead_create_date,
											sd.record_id,
											sd.campaign_id,
											sd.disposition_date,
											row_number() OVER (PARTITION BY ed.lead_id ORDER BY sd.disposition_date DESC, sd.record_id DESC) AS lead_rank
										   FROM shivay.cmp_disposition_history sd
											 JOIN shivay.mst_lead ed ON (sd.customer_id = ed.attributed_customer_id)
										 	 join (select * from shivay.cmp_campaign where channel not in ('OBTM', 'TRANSFERS')) c 
										 ON (sd.campaign_id = c.campaign_id)
										  WHERE sd.customer_id is not null 
										 AND greatest(ed.lead_create_date, ed.last_action_taken_date) >= sd.disposition_date 
										 and ed.workable_lead = 'Y'
										 AND ed.lead_create_date between c.campaign_start_date and c.campaign_end_date 
										 AND (sd.disposition_description in ('Opened', 'Clicked', 'Mailed'))
										) z
										WHERE z.lead_rank = 1
								) q
																  
						 WHERE q.sol_rank = 1
					   
					   union all
					   
					   
					   		SELECT q.record_id,
                            q.lead_id,
                            '2. EMAIL'::text AS match_type
                           FROM ( SELECT 
								 	z.lead_id,
                                    z.lead_create_date,
                                    z.record_id,
                                    z.campaign_id,
                                    z.disposition_date,
                                    z.lead_rank,
                                    row_number() OVER (PARTITION BY z.record_id ORDER BY z.lead_create_date, z.lead_id) AS sol_rank
                                   FROM ( SELECT ed.lead_id,
											ed.lead_create_date,
											sd.record_id,
											sd.campaign_id,
											sd.disposition_date,
											row_number() OVER (PARTITION BY ed.lead_id ORDER BY sd.disposition_date DESC, sd.record_id DESC) AS lead_rank
										   FROM shivay.cmp_disposition_history sd
											 JOIN shivay.mst_lead ed ON (sd.email::text = ed.email::text)
										 	 join (select * from shivay.cmp_campaign where channel not in ('OBTM', 'TRANSFERS')) c 
										 ON (sd.campaign_id = c.campaign_id)
										  WHERE sd.email::text ~~ '%@%'::text 
										 AND greatest(ed.lead_create_date, ed.last_action_taken_date) >= sd.disposition_date
										 and ed.workable_lead = 'Y'
										 AND ed.lead_create_date between c.campaign_start_date and c.campaign_end_date 
										 AND (sd.disposition_description in ('Opened', 'Clicked', 'Mailed'))
										) z
										WHERE z.lead_rank = 1
								) q
																  
						 WHERE q.sol_rank = 1
						) f
		   ) s
          WHERE s.final_lead_rank = 1
   ) l left join shivay.stg_solicit_lead_match sl
   on (l.lead_id = sl.lead_id)
  WHERE l.final_sol_rank = 1 and sl.lead_id is null;

execute format('insert into public.process_log values(''PENFED'', ''CAMPAIGN TABS'', ''3. Run Lead App Attribution'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.cmp_3_solicit_lead_app_match() OWNER TO postgres;

--
-- TOC entry 491 (class 1255 OID 16444)
-- Name: cmp_4_add_email_suppressions(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.cmp_4_add_email_suppressions()
    LANGUAGE plpgsql
    AS $$
BEGIN

execute 'truncate table shivay.cmp_suppression';

insert into shivay.cmp_suppression

SELECT customer_id,
    count(*) AS cnt,
    '1. DNS EMAIL' AS suppression_type
   FROM shivay.cmp_disposition_history f
  WHERE (f.cnt_bounced > 0 OR f.cnt_unsubscribed > 0)
  AND customer_id is not null
  GROUP BY customer_id

UNION ALL

 SELECT attributed_customer_id as customer_id,
    count(*) AS cnt,
    '2. Lead in last 60 days' AS suppression_type
   FROM shivay.mst_lead 
   where Lead_create_date >= (CURRENT_DATE - 60)
   and attributed_customer_id is not null and workable_lead = 'Y'
  GROUP BY attributed_customer_id
  
UNION ALL

 SELECT attributed_customer_id as customer_id,
    count(*) AS cnt,
    '2. App in last 180 days' AS suppression_type
   FROM shivay.mst_app 
   where (app_setup_date >= (CURRENT_DATE - 180) or app_status_desc = 'Active Loan')
   and attributed_customer_id is not null
  GROUP BY attributed_customer_id;

execute format('insert into public.process_log values(''PENFED'', ''CAMPAIGN TABS'', ''4. Update DNS Table'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.cmp_4_add_email_suppressions() OWNER TO postgres;

--
-- TOC entry 443 (class 1255 OID 16445)
-- Name: cmp_5_update_cmp_info_lead_app(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.cmp_5_update_cmp_info_lead_app()
    LANGUAGE plpgsql
    AS $$

BEGIN
	
update shivay.mst_lead s
set attributed_app_no  = a.app_no
from shivay.stg_lead_app_match a
where s.lead_id = a.lead_id
and s.attributed_app_no is null
;

update shivay.mst_lead s
set attributed_disposition_no  = a.record_id
from shivay.stg_solicit_lead_match a
where s.lead_id = a.lead_id
and s.attributed_disposition_no is null
;

update shivay.mst_app s
set attributed_lead_id  = a.lead_id
from shivay.stg_lead_app_match a
where s.app_no = a.app_no
and s.attributed_lead_id is null
;

update shivay.mst_lead s
set attributed_mktg_campaign  = a.campaign_id
from shivay.cmp_disposition_history a
where s.attributed_disposition_no = a.record_id
and s.attributed_mktg_campaign is null
;

update shivay.mst_app s
set attributed_disposition_no  = a.attributed_disposition_no,
attributed_mktg_campaign = a.attributed_mktg_campaign
from shivay.mst_lead a
where s.attributed_lead_id = a.lead_id
and s.attributed_disposition_no is null
;

execute format('insert into public.process_log values(''PENFED'', ''CAMPAIGN TABS'', ''5. Update Lead/ App Table'', null, current_timestamp)');		

END;
$$;


ALTER PROCEDURE shivay.cmp_5_update_cmp_info_lead_app() OWNER TO postgres;

--
-- TOC entry 444 (class 1255 OID 16446)
-- Name: cmp_6_update_weekly_reports(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.cmp_6_update_weekly_reports()
    LANGUAGE plpgsql
    AS $$

BEGIN

		INSERT INTO shivay.TMP_CAMPAIGN_REPORT		
		SELECT
		nextval('shivay.campaign_rpt_seq') AS UID,
		'DIGITAL' AS REPORT_LEVEL,
		TO_CHAR(D.CAMPAIGN_DATE, 'YYYY-MM') AS CAMPAIGN_MTH,
		D.CUSTOMER_SEGMENT,
		C.PROGRAM_GROUP AS CAMPAIGN_TYPE,
		D.CAMPAIGN_ID,
		C.CHANNEL AS CAMPAIGN_GRP,
		CASE WHEN L.LEAD_ID IS NULL THEN '000. No Lead' ELSE L.SALES_CHANNEL END AS LEAD_OWNER_TITLE,
		L.CRM_SYSTEM AS FIXED_LEAD_OWNER_TITLE,
		CASE WHEN L.LEAD_ID IS NULL THEN '000. No Lead' ELSE L.LEAD_SOURCE END AS LEAD_SOURCE,
		NULL AS FIXED_LEAD_SOURCE,
		SUM(CNT_SENT) AS COUNT_OF_SOLICITS,
		SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Opened' THEN 1 ELSE 0 END) AS COUNT_UNQ_OPENS,
		SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Clicked' THEN 1 ELSE 0 END) AS COUNT_UNQ_CLICKS,
		SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Bounced' THEN 1 ELSE 0 END) AS COUNT_UNQ_BOUNCE,
		SUM(CASE WHEN DISPOSITION_DESCRIPTION = 'Unsubscribed' THEN 1 ELSE 0 END) AS COUNT_UNQ_UNSUB,
		SUM(CNT_OPENED) AS TOT_CNT_OPENED,
		SUM(CNT_CLICKED) AS TOT_CNT_CLICKED,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL THEN 1 ELSE 0 END) AS LEADS_CREATED_IN_SF,
		SUM(CASE WHEN L.CRM_SYSTEM = 'SALESFORCE' AND L.LEAD_STATUS IN ('Duplicate Leads') THEN 1 ELSE 0 END) AS DUPLICATE_LEADS_IN_SF,
		SUM(CASE WHEN L.CRM_SYSTEM = 'SALESFORCE' AND L.LEAD_STATUS IN ('Unassigned Leads', 'Unworkable Leads') THEN 1 ELSE 0 END) AS INCOMPLETE_LEADS_IN_SF,
		SUM(CASE WHEN L.CRM_SYSTEM = 'SALESFORCE' AND L.LEAD_STATUS IN ('Other Bad Leads') OR L.LEAD_STATUS IS NULL THEN 1 ELSE 0 END) AS OTHER_BAD_LEADS_IN_SF,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL AND L.WORKABLE_LEAD = 'Y' THEN 1 ELSE 0 END) AS NET_LEADS_IN_SF,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL AND L.LQ_STATUS IN ('No Contact') THEN 1 ELSE 0 END) AS CNT_LQ_NO_CONTACT,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL AND L.LQ_STATUS IN ('Contact Made', 'Transfered') THEN 1 ELSE 0 END) AS CNT_LQ_CONTACT,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL AND L.LQ_STATUS IN ('Transfered') THEN 1 ELSE 0 END) AS CNT_LQ_TRANSFER,
		SUM(CASE WHEN A.APP_NO IS NOT NULL THEN 1 ELSE 0 END) AS APP_CREATED_ENCOMPASS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL THEN 1 ELSE 0 END) AS GFE_APP_CREATED_ENCOMPASS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'HELOC' THEN 1 ELSE 0 END) AS HELCO_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'CONVENTIONAL' THEN 1 ELSE 0 END) AS CONV_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' THEN 1 ELSE 0 END) AS VA_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS VA_PUR_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP NOT IN ('HELOC', 'VA', 'CONVENTIONAL') THEN 1 ELSE 0 END) AS OTHER_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS PURCHASE_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'NoCash-Out Refinance' THEN 1 ELSE 0 END) AS NO_CO_REFI_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Cash-Out Refinance' THEN 1 ELSE 0 END) AS CASHOUT_GFE_APP,
		SUM(CASE WHEN A.APP_STATUS_DESC = 'Loan Originated' THEN 1 ELSE 0 END) AS APP_FUNDED,
		SUM(CASE WHEN A.APP_STATUS_DESC = 'Active Loan' THEN 1 ELSE 0 END) AS APP_ACTIVE,
		CURRENT_DATE AS DATE_ADDED
		FROM shivay.cmp_disposition_history D
		LEFT JOIN shivay.mst_lead L on (D.RECORD_ID = L.attributed_DISPOSITION_NO)
		LEFT JOIN shivay.mst_app A on (D.RECORD_ID = A.attributed_DISPOSITION_NO)
		INNER JOIN shivay.CMP_CAMPAIGN C ON (D.CELL_KEY = C.CELL_KEY)
		GROUP BY 
		TO_CHAR(D.CAMPAIGN_DATE, 'YYYY-MM'),
		D.CUSTOMER_SEGMENT,
		C.PROGRAM_GROUP,
		D.CAMPAIGN_ID,
		L.CRM_SYSTEM,
		C.CHANNEL,
		CASE WHEN L.LEAD_ID IS NULL THEN '000. No Lead' ELSE L.SALES_CHANNEL END,
		CASE WHEN L.LEAD_ID IS NULL THEN '000. No Lead' ELSE L.LEAD_SOURCE END;
	
		INSERT INTO shivay.TMP_CHANNEL_REPORT
		SELECT
		nextval('shivay.channel_rpt_seq') AS UID,
		date_part('YEAR', lead_create_date) * 100 + DATE_PART('WEEK', LEAD_CREATE_DATE) AS RPT_WEEK_CODE,
		X.DT AS WEEK_START_DATE,
		TO_CHAR(L.LEAD_CREATE_DATE, 'YYYY-MM') AS RPT_MONTH,
		L.CUSTOMER_SEGMENT AS PREFERRED_INTEREST,
		NULL AS CAMPAIGN_TYPE,
		L.CRM_CAMPAIGN_ID AS CAMPAIGN_ID,
		L.SALES_CHANNEL AS LEAD_OWNER_TITLE,
		L.CRM_SYSTEM AS FIXED_LEAD_OWNER_TITLE,
		L.LO_NAME AS LEAD_OWNER,
		L.LEAD_SOURCE,
		NULL AS FIXED_LEAD_SOURCE,
		L.PROPERTY_STATE AS LEAD_PROP_STATE,
		COUNT(*) AS COUNT_OF_SOLICITS,
		SUM(0) AS COUNT_UNQ_OPENS,
		SUM(0) AS COUNT_UNQ_CLICKS,
		SUM(0) AS COUNT_UNQ_BOUNCE,
		SUM(0) AS COUNT_UNQ_UNSUB,
		SUM(0) AS TOT_CNT_OPENED,
		SUM(0) AS TOT_CNT_CLICKED,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL THEN 1 ELSE 0 END) AS LEADS_CREATED_IN_SF,
		SUM(CASE WHEN L.CRM_SYSTEM = 'SALESFORCE' AND L.LEAD_STATUS IN ('Duplicate Leads') THEN 1 ELSE 0 END) AS DUPLICATE_LEADS_IN_SF,
		SUM(CASE WHEN L.CRM_SYSTEM = 'SALESFORCE' AND L.LEAD_STATUS IN ('Unassigned Leads', 'Unworkable Leads') THEN 1 ELSE 0 END) AS INCOMPLETE_LEADS_IN_SF,
		SUM(CASE WHEN L.CRM_SYSTEM = 'SALESFORCE' AND L.LEAD_STATUS IN ('Other Bad Leads') OR L.LEAD_STATUS IS NULL THEN 1 ELSE 0 END) AS OTHER_BAD_LEADS_IN_SF,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL AND L.WORKABLE_LEAD = 'Y' THEN 1 ELSE 0 END) AS NET_LEADS_IN_SF,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL AND L.LQ_STATUS IN ('No Contact') THEN 1 ELSE 0 END) AS CNT_LQ_NO_CONTACT,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL AND L.LQ_STATUS IN ('Contact Made', 'Transfered') THEN 1 ELSE 0 END) AS CNT_LQ_CONTACT,
		SUM(CASE WHEN L.LEAD_ID IS NOT NULL AND L.LQ_STATUS IN ('Transfered') THEN 1 ELSE 0 END) AS CNT_LQ_TRANSFER,
		SUM(CASE WHEN A.APP_NO IS NOT NULL THEN 1 ELSE 0 END) AS APP_CREATED_ENCOMPASS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL THEN 1 ELSE 0 END) AS GFE_APP_CREATED_ENCOMPASS,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'HELOC' THEN 1 ELSE 0 END) AS HELCO_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'CONVENTIONAL' THEN 1 ELSE 0 END) AS CONV_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' THEN 1 ELSE 0 END) AS VA_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP = 'VA' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS VA_PUR_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP NOT IN ('HELOC', 'VA', 'CONVENTIONAL') THEN 1 ELSE 0 END) AS OTHER_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Purchase' THEN 1 ELSE 0 END) AS PURCHASE_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'NoCash-Out Refinance' THEN 1 ELSE 0 END) AS NO_CO_REFI_GFE_APP,
		SUM(CASE WHEN A.APP_NO IS NOT NULL AND A.APP_SETUP_DATE IS NOT NULL AND A.APP_PRODUCT_GROUP <> 'HELOC' AND A.APP_PURPOSE_DESC = 'Cash-Out Refinance' THEN 1 ELSE 0 END) AS CASHOUT_GFE_APP,
		SUM(CASE WHEN A.APP_STATUS_DESC = 'Loan Originated' THEN 1 ELSE 0 END) AS APP_FUNDED,
		SUM(CASE WHEN A.APP_STATUS_DESC = 'Active Loan' THEN 1 ELSE 0 END) AS APP_ACTIVE,
		CURRENT_DATE AS DATE_ADDED
		FROM shivay.MST_LEAD L 
		left join shivay.MST_APP A
		on (L.ATTRIBUTED_APP_NO = A.APP_NO)
		left join
		(
			SELECT
			date_part('YEAR', lead_create_date) * 100 + DATE_PART('WEEK', LEAD_CREATE_DATE)  AS WK,
			MIN(LEAD_CREATE_DATE) AS DT
			FROM shivay.MST_LEAD 
			--where lead_create_date >= to_date('01/01/2021','mm/dd/yyyy')
			GROUP BY 
			date_part('YEAR', lead_create_date) * 100 + DATE_PART('WEEK', LEAD_CREATE_DATE)
		) X
		on (date_part('YEAR', l.lead_create_date) * 100 + DATE_PART('WEEK', l.LEAD_CREATE_DATE) = X.WK)
		GROUP BY 
		date_part('YEAR', lead_create_date) * 100 + DATE_PART('WEEK', LEAD_CREATE_DATE),
		X.DT,
		TO_CHAR(L.LEAD_CREATE_DATE, 'YYYY-MM'),
		L.CUSTOMER_SEGMENT,
		L.CRM_CAMPAIGN_ID,
		L.CRM_SYSTEM,
		L.SALES_CHANNEL,
		L.LO_NAME,
		L.LEAD_SOURCE,
		L.PROPERTY_STATE;
END;
$$;


ALTER PROCEDURE shivay.cmp_6_update_weekly_reports() OWNER TO postgres;

--
-- TOC entry 445 (class 1255 OID 16448)
-- Name: cmp_9_1_update_solicitation_apr(numeric); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.cmp_9_1_update_solicitation_apr(cell numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE
str text;
BEGIN
		select 
		case when c_num = '4' then 'update shivay.stg_solicitation_history set new_apr_4 = 0' else
		'update shivay.stg_solicitation_history set new_apr_' ||c_num || 
		' = case when new_fees_total_' || 	c_num || ' = 0 then new_rate_' || c_num || 
		' else round(pricing.rate(new_loan_amount_' || c_num ||' - new_fees_total_' || c_num || 
		', new_pi_' || c_num ||',new_term_' || c_num || ')*100,3) end where cell_key = ' || cell_key 
		end into str
		from
		(
		select ct.*,
			CASE WHEN CT.OFFER_KEY IN (81, 91, 84, 94) THEN '1'
			WHEN CT.OFFER_KEY IN (83, 93) THEN '2'
			WHEN CT.OFFER_KEY IN (82, 92) THEN '3'
			ELSE '4' END as c_num	
			from shivay.cmp_campaign ct where cell_key = cell
		) a;					 
EXECUTE format(str);					 
END;
$$;


ALTER PROCEDURE shivay.cmp_9_1_update_solicitation_apr(cell numeric) OWNER TO postgres;

--
-- TOC entry 451 (class 1255 OID 16449)
-- Name: cmp_9_insert_campaign_cell(numeric); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.cmp_9_insert_campaign_cell(cell numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE
c_k numeric := cell;

BEGIN

WITH 

CELL_T AS
(
	SELECT * FROM shivay.CMP_CAMPAIGN WHERE CELL_KEY = cell
),

SOL_SUP AS
(
	SELECT S.UNIQUE_ID, COUNT(*) AS CNT 
	FROM shivay.STG_SOLICITATION_HISTORY S INNER JOIN 
	(
		SELECT CELL_KEY FROM shivay.CMP_CAMPAIGN C WHERE CHANNEL IN
	 			(SELECT CHANNEL FROM shivay.CMP_CAMPAIGN WHERE CELL_KEY = cell)	
	) C
	ON (S.CELL_KEY = C.CELL_KEY)
	WHERE S.FILE_DATE >= CURRENT_DATE - 7
	GROUP BY S.UNIQUE_ID
),

RATE_DT AS
(
	SELECT MAX(RATE_DATE) AS RATE_DATE FROM shivay.PRICING_OUTPUT_TAB
),

LOCK_PER AS
(
	SELECT MAX(LOCK_PERIOD) AS LOCK_PERIOD FROM shivay.PRICING_OUTPUT_TAB
),

ZIPCODE AS
(
	SELECT * FROM
	(
		SELECT 
		ZIP_CODE,
		COUNTY_NAME,
		ROW_NUMBER() OVER(PARTITION BY ZIP_CODE ORDER BY COUNTY_CODE) AS RNK
		FROM PRICING.ZIP_CODE_TAB
	) ZIP
	WHERE RNK = 1
),

PI AS
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_RT)
),
TR AS
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_TR)
),
CO AS 
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_CO)
),
PUR AS
(
	SELECT
	'Not On Us-CONF' AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	80 AS P_LTV,
	rate AS P_RATE,
	points AS P_POINTS
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= 0
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	'Not On Us-VA' AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	100 AS P_LTV,
	rate AS P_RATE,
	points AS P_POINTS
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('30 Year Fixed VA')
			and points >= 0
		) z where rnk = 1
	) x	
	UNION ALL
	SELECT
	'On Us-CONF' AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	80 AS P_LTV,
	rate AS P_RATE,
	points AS P_POINTS
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= 0
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	'On Us-VA' AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	100 AS P_LTV,
	rate AS P_RATE,
	points AS P_POINTS
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('30 Year Fixed VA')
			and points >= 0
		) z where rnk = 1
	) x
)

insert into shivay.stg_solicitation_history 
SELECT
L.UNIQUE_ID,
null AS SOLICITATION_KEY,
ct.cell_key AS CELL_KEY,
ct.cell_id as CELL_ID,
ct.campaign_id as CAMPAIGN_ID,
current_date as FILE_DATE,
L.CUSTOMER_ID_PRIM as CUSTOMER_ID,
L.EMAIL_ADDRESS_PRIM as EMAIL,
L.HOME_PHONE_PRIM as PHONE,
L.FIRST_NAME_PRIM as FIRST_NAME,
L.LAST_NAME_PRIM AS LAST_NAME,
L.PROP_ADDRESS1 AS PROPERTY_ADDRESS,
L.PROP_CITY AS PROPERTY_CITY,
L.PROP_STATE AS PROPERTY_STATE,
L.PROP_ZIP AS PROPERTY_ZIP,
ZC.COUNTY_NAME,
L.UNPAID_BALANCE AS CURRENT_LOAN_UPB,
L.INTEREST_RATE as CURRENT_LOAN_RATE,
L.REMAINING_TERM as CURRENT_LOAN_REM_TERM,
L.CURRENT_PROPERTY_VALUE as CURRENT_PROPERTY_VALUE,
L.LTV as CURRENT_LTV,
720 AS CREDIT_SCORE,
RD.RATE_DATE,
LP.LOCK_PERIOD,
'PI SAVINGS' AS OFFER_1,
PI.NEW_PRODUCT_DESCRIPTION AS NEW_PRODUCT_DESCRIPTION_1,
PI.NEW_TERM AS NEW_TERM_1,
PI.NEW_LOAN_AMOUNT AS NEW_LOAN_AMOUNT_1,
PI.NEW_LTV AS NEW_LTV_1,
PI.NEW_RATE AS NEW_RATE_1,
PI.NEW_ARM_RESET_RATE AS NEW_ARM_RESET_RATE_1,
PI.NEW_POINTS_PCT AS NEW_POINTS_PCT_1,
PI.NEW_APR AS NEW_APR_1,
PI.NEW_BASE_FEES AS NEW_BASE_FEES_1,
PI.NEW_POINTS_DOL AS NEW_POINTS_DOL_1,
PI.NEW_INTERIM_INT AS NEW_INTERIM_INT_1,
PI.NEW_FEES_TOTAL AS NEW_FEES_TOTAL_1,
PI.NEW_PI AS NEW_PI_1,
PI.NEW_PI_SAVINGS_MO AS NEW_PI_SAVINGS_MO_1,
PI.NEW_PIMI_SAVINGS_MO AS NEW_PIMI_SAVINGS_MO_1,
PI.NEW_CASHOUT AS NEW_CASHOUT_1,
PI.NEW_LOL_SAVINGS AS NEW_LOL_SAVINGS_1,
PI.NEW_TERM_REDUCTION AS NEW_TERM_REDUCTION_1,
PI.NEW_UFMIP_PCT AS NEW_UFMIP_PCT_1,
PI.NEW_MIP_PCT AS NEW_MIP_PCT_1,
PI.NEW_MI AS NEW_MI_1,
PI.NEW_UFMIP AS NEW_UFMIP_1,
ROUND(PRICING.FV_AT_PERIOD(PI.NEW_LOAN_AMOUNT, PI.NEW_RATE, PI.NEW_TERM, PI.NEW_TERM - 1),2) AS LAST_PAYMENT_1,
'TERM REDUCTION' AS OFFER_2,
TR.NEW_PRODUCT_DESCRIPTION AS NEW_PRODUCT_DESCRIPTION_2,
TR.NEW_TERM AS NEW_TERM_2,
TR.NEW_LOAN_AMOUNT AS NEW_LOAN_AMOUNT_2,
TR.NEW_LTV AS NEW_LTV_2,
TR.NEW_RATE AS NEW_RATE_2,
TR.NEW_ARM_RESET_RATE AS NEW_ARM_RESET_RATE_2,
TR.NEW_POINTS_PCT AS NEW_POINTS_PCT_2,
TR.NEW_APR AS NEW_APR_2,
TR.NEW_BASE_FEES AS NEW_BASE_FEES_2,
TR.NEW_POINTS_DOL AS NEW_POINTS_DOL_2,
TR.NEW_INTERIM_INT AS NEW_INTERIM_INT_2,
TR.NEW_FEES_TOTAL AS NEW_FEES_TOTAL_2,
TR.NEW_PI AS NEW_PI_2,
TR.NEW_PI_SAVINGS_MO AS NEW_PI_SAVINGS_MO_2,
TR.NEW_PIMI_SAVINGS_MO AS NEW_PIMI_SAVINGS_MO_2,
TR.NEW_CASHOUT AS NEW_CASHOUT_2,
TR.NEW_LOL_SAVINGS AS NEW_LOL_SAVINGS_2,
TR.NEW_TERM_REDUCTION AS NEW_TERM_REDUCTION_2,
TR.NEW_UFMIP_PCT AS NEW_UFMIP_PCT_2,
TR.NEW_MIP_PCT AS NEW_MIP_PCT_2,
TR.NEW_MI AS NEW_MI_2,
TR.NEW_UFMIP AS NEW_UFMIP_2,
ROUND(PRICING.FV_AT_PERIOD(TR.NEW_LOAN_AMOUNT, TR.NEW_RATE, TR.NEW_TERM, TR.NEW_TERM - 1),2) AS LAST_PAYMENT_2,
'CASHOUT' AS OFFER_3,
CO.NEW_PRODUCT_DESCRIPTION AS NEW_PRODUCT_DESCRIPTION_3,
CO.NEW_TERM AS NEW_TERM_3,
CO.NEW_LOAN_AMOUNT AS NEW_LOAN_AMOUNT_3,
CO.NEW_LTV AS NEW_LTV_3,
CO.NEW_RATE AS NEW_RATE_3,
CO.NEW_ARM_RESET_RATE AS NEW_ARM_RESET_RATE_3,
CO.NEW_POINTS_PCT AS NEW_POINTS_PCT_3,
CO.NEW_APR AS NEW_APR_3,
CO.NEW_BASE_FEES AS NEW_BASE_FEES_3,
CO.NEW_POINTS_DOL AS NEW_POINTS_DOL_3,
CO.NEW_INTERIM_INT AS NEW_INTERIM_INT_3,
CO.NEW_FEES_TOTAL AS NEW_FEES_TOTAL_3,
CO.NEW_PI AS NEW_PI_3,
CO.NEW_PI_SAVINGS_MO AS NEW_PI_SAVINGS_MO_3,
CO.NEW_PIMI_SAVINGS_MO AS NEW_PIMI_SAVINGS_MO_3,
CO.NEW_CASHOUT AS NEW_CASHOUT_3,
CO.NEW_LOL_SAVINGS AS NEW_LOL_SAVINGS_3,
CO.NEW_TERM_REDUCTION AS NEW_TERM_REDUCTION_3,
CO.NEW_UFMIP_PCT AS NEW_UFMIP_PCT_3,
CO.NEW_MIP_PCT AS NEW_MIP_PCT_3,
CO.NEW_MI AS NEW_MI_3,
CO.NEW_UFMIP AS NEW_UFMIP_3,
ROUND(PRICING.FV_AT_PERIOD(CO.NEW_LOAN_AMOUNT, CO.NEW_RATE, CO.NEW_TERM, CO.NEW_TERM - 1),2) AS LAST_PAYMENT_3,
'PURHCASE' AS OFFER_4,
P_PRODUCT AS NEW_PRODUCT_DESCRIPTION_4,
P_TERM AS NEW_TERM_4,
P_AMT AS NEW_LOAN_AMOUNT_4,
P_LTV AS NEW_LTV_4,
P_RATE AS NEW_RATE_4,
0 AS NEW_ARM_RESET_RATE_4,
P_POINTS AS NEW_POINTS_PCT_4,
0 AS NEW_APR_4,
970 AS NEW_BASE_FEES_4,
ROUND(P_AMT * P_POINTS/100,2) AS NEW_POINTS_DOL_4,
0 AS NEW_INTERIM_INT_4,
ROUND(P_AMT * P_POINTS/100,2) + 970 AS NEW_FEES_TOTAL_4,
ROUND(PRICING.PMT(P_AMT,P_RATE,P_TERM)) AS NEW_PI_4,
0 AS NEW_PI_SAVINGS_MO_4,
0 AS NEW_PIMI_SAVINGS_MO_4,
0 AS NEW_CASHOUT_4,
0 AS NEW_LOL_SAVINGS_4,
0 AS NEW_TERM_REDUCTION_4,
0 AS NEW_UFMIP_PCT_4,
0 AS NEW_MIP_PCT_4,
0 AS NEW_MI_4,
0 AS NEW_UFMIP_4,
ROUND(PRICING.FV_AT_PERIOD(P_AMT, P_RATE, P_TERM, P_TERM - 1),2) AS LAST_PAYMENT_4
FROM shivay.MST_LOAN L
INNER JOIN shivay.PRICING_WATERFALL L1 ON L.UNIQUE_ID = L1.UNIQUE_ID
LEFT JOIN PI ON L.UNIQUE_ID = PI.UNIQUE_ID
LEFT JOIN TR ON L.UNIQUE_ID = TR.UNIQUE_ID
LEFT JOIN CO ON L.UNIQUE_ID = CO.UNIQUE_ID
INNER JOIN ZIPCODE ZC ON
(L.PROP_ZIP = ZC.ZIP_CODE)

LEFT JOIN SOL_SUP SUP
ON (L.UNIQUE_ID = SUP.UNIQUE_ID)
,
RATE_DT RD,
LOCK_PER LP,
CELL_t CT,
PUR PR
WHERE L1.EXCLUSION = '9999-SELECTED'
AND SUP.UNIQUE_ID IS NULL
AND L1.SEGMENT = (CASE WHEN CT.PROGRAM_GROUP = 'CSELL' AND CT.OFFER_KEY IN (81,82,83,84,85.86,87,88) THEN 'Not On Us-CONF'
						WHEN CT.PROGRAM_GROUP = 'CSELL' AND CT.OFFER_KEY IN (91,92,93,94,95,96,97,98) THEN 'Not On Us-VA'
						WHEN CT.PROGRAM_GROUP = 'RETN' AND CT.OFFER_KEY IN (81,82,83,84,85.86,87,88) THEN 'On Us-CONF'
						WHEN CT.PROGRAM_GROUP = 'RETN' AND CT.OFFER_KEY IN (91,92,93,94,95,96,97,98) THEN 'On Us-VA' ELSE NULL END)
AND L1.SEGMENT = PR.P_SEGMENT

AND (
	CASE WHEN CT.OFFER_KEY IN (81, 91, 84, 94) AND PI.NEW_PI > 0 THEN 1
	WHEN CT.OFFER_KEY IN (83, 93) AND TR.NEW_PI > 0 THEN 1
	WHEN CT.OFFER_KEY IN (82, 92) AND CO.NEW_PI > 0 THEN 1
	WHEN CT.OFFER_KEY IN (88,98) AND PI.NEW_PI IS NULL AND CO.NEW_PI IS NULL AND TR.NEW_PI IS NULL THEN 1 
	ELSE 0 END
	) = 1

AND (
	CASE WHEN CT.CHANNEL = 'EMAIL' AND L.EMAIL_ADDRESS_PRIM LIKE ('%@%') AND L.DNS_EMAIL_FLAG_PRIM = 'N' THEN 1
	WHEN CT.CHANNEL = 'DM' THEN 1
	ELSE 0 END
	) = 1

ORDER BY RANDOM()	 

limit (select est_quantity from shivay.cmp_campaign where cell_key = cell);

call shivay.cmp_9_1_update_solicitation_apr(cell);

UPDATE shivay.CMP_CAMPAIGN C
SET EXECUTED_FLAG = 'Y'
FROM
(SELECT CELL_KEY, COUNT(*) AS CNT FROM shivay.STG_SOLICITATION_HISTORY GROUP BY CELL_KEY) S
WHERE C.CELL_KEY = S.CELL_KEY;

END;
$$;


ALTER PROCEDURE shivay.cmp_9_insert_campaign_cell(cell numeric) OWNER TO postgres;

--
-- TOC entry 446 (class 1255 OID 16451)
-- Name: del_disposition_dups(); Type: FUNCTION; Schema: penfed; Owner: postgres
--

CREATE FUNCTION shivay.del_disposition_dups() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
   
  WITH x AS (select all_disposition_data dup, min(ctid) 
		FROM shivay.all_disposition_data
		GROUP BY 1 
		HAVING count(*) > 1 
		)
		 
		DELETE FROM shivay.all_disposition_data 
		USING     x
		WHERE     (all_disposition_data) = (dup) 
		AND all_disposition_data.ctid <> x.min;
	
END;
$$;


ALTER FUNCTION shivay.del_disposition_dups() OWNER TO postgres;

--
-- TOC entry 424 (class 1255 OID 16452)
-- Name: excl_test(numeric); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.excl_test(offer numeric)
    LANGUAGE plpgsql
    AS $$

DECLARE
str text;
BEGIN
		select 
		'case ' ||
		string_agg( substr(cd,5), '  ' order by cd) || ' else ''9999-SELECTED'' end' into str
		from
		(
		select 
		exclusion_code || 'when ' || sql_str || ' then ''' || exclusion_code || '-' || exclusion_description ||'''' as cd
		from shivay.cmp_exclusions ce where ce.offer_key = offer
		) a;
					 
EXECUTE format('insert into shivay.at_temp select x.*,' || str || ' as excl from shivay.mst_loan x limit 100');					 
END;
$$;


ALTER PROCEDURE shivay.excl_test(offer numeric) OWNER TO postgres;

--
-- TOC entry 441 (class 1255 OID 16453)
-- Name: mst_0_run_master_updates(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_0_run_master_updates()
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

		call shivay.mst_1_add_mort_members();
				
		call shivay.mst_2_add_non_mort_members();
				
		call shivay.mst_3_add_heloc();
				
		call shivay.mst_4_update_flags();
				
		call shivay.mst_5_add_email_cust_id_match();
				
		call shivay.mst_6_add_phone_cust_id_match();
				
		call shivay.mst_7_add_apps();
				
		call shivay.mst_8_update_lead_lookups();
				
		call shivay.mst_9_add_leads();
		
		call pricing.run_pricing('penfed');
		
		call shivay.pricing_run_report();
		
		
END;
$$;


ALTER PROCEDURE shivay.mst_0_run_master_updates() OWNER TO postgres;

--
-- TOC entry 450 (class 1255 OID 16454)
-- Name: mst_1_add_mort_members(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_1_add_mort_members()
    LANGUAGE plpgsql
    AS $$
BEGIN

    	execute 'truncate table shivay.mst_loan';
		execute 'truncate table shivay.pricing_ratesheet_dump';

insert into shivay.mst_loan
select distinct
account_number as UNIQUE_ID,
account_number as ACCOUNT_NUMBER,
'On Us' as PORTFOLIO,
'01' as LIEN_POSITION,
investor_primary_name as INVESTOR_FULL_NAME,
null as INVESTOR_LOAN_NO,
date_closed as ORIGINATION_DATE,
original_amount as LOAN_AMOUNT,
0 as CURRENT_2ND_BALANCE,
principal_balance as UNPAID_BALANCE,
term_of_loan as LOAN_TERM,
pricing.months_between(current_date, maturity_date) as REMAINING_TERM,
maturity_date as MATURITY_DATE,
payoff_date as PAYOFF_DATE,
payoff_amount as PAYOFF_UPB,
case when ms_mortgage_status_description = 'Current' then '1'
when ms_mortgage_status_description = 'Paid_Off' then '2'
else 3 end as LOAN_STATUS_CODE,
case when rate_mod_flag is not null then 'Y' else 'N' end MOD_STATUS,
note_rate as INTEREST_RATE,
case when ms_nxt_rate_chg is not null then 'A' else 'F' end as RATE_TYPE,
next_rate_change_date as ARM_NEXT_RESET_DATE,
cast(null as numeric) as ARM_NEXT_RESET_RATE,
principal_interest_payment as PRINCIPAL_AND_INTEREST,
'N' as IO_FLAG,
case when productname like ('%VA%') then 'V' else 'C' end as LOAN_TYPE,
product_code as PRODUCT_ID,
productname as PRODUCT_NAME,
null as PURPOSE_CODE,
ms_dlq_history as DELQ_12_MTH_STR,
COALESCE(ms_days_past_due,0) as DELINQUENCY_DAYS_PAST_DUE,
ms_time_dlq_last_yr as DELINQUENCY_12_MONTH_COUNT,
case when bankruptcy_flag is not null then bankruptcy_flag else 'N' end as BANKRUPTCY_CODE,
null as BANKRUPTCY_CHAPTER,
cast(null as date) as BANKRUPTCY_DISPOSITION_DATE,
null as BANKRUPTCY_DISPOSITION_DESC,
case when foreclosure_indicator = 1 then 'Y' else 'N' end as FORECLOSURE_FLAG,
'N' as FOREBEARANCE_FLAG,
cast(null as numeric) as FOREBEARANCE_AMT,
'N' as DO_NOT_MARKET_FLAG,
case when bpmi_amt > 0 then 'BPMI' else null end as MI_TYPE,
bpmi_amt as MI_AMT,
c.customer_id as CUSTOMER_ID_PRIM,
c.last_name as LAST_NAME_PRIM,
c.first_name as FIRST_NAME_PRIM,
c.first_name || ' ' || c.last_name as FULL_NAME_PRIM,
null as SSN_PRIM,
null as MAIL_ADDRESS_ID,
c.address_line_1 as MAIL_ADDRESS1,
null as MAIL_ADDRESS2,
c.city as MAIL_CITY,
c.state as MAIL_STATE,
lpad(cast(c.zip as text),5,'0') as MAIL_ZIP,
substr(replace(replace(c.home_phone,'-','') ,' ',''),1,10) as HOME_PHONE_PRIM,
upper(c.home_email) as EMAIL_ADDRESS_PRIM,
substr(replace(replace(c.bus_phone,'-','') ,' ',''),1,10) as WORK_PHONE_PRIM,
substr(replace(replace(c.cell_phone,'-','') ,' ',''),1,10) as CELL_PHONE_PRIM,
'N' as DNS_MAIL_FLAG,
'N' as DNS_PHONE_FLAG,
'N' as DNS_EMAIL_FLAG_PRIM,
'N' as EMPLOYEE_FLAG,
cast(null as numeric) as ORIGINAL_FICO_PRIM,
720 as CURRENT_FICO_PRIM,
second_borr_member_number as CUSTOMER_ID_SECD,
null as LAST_NAME_SECD,
null as FIRST_NAME_SECD,
null as FULL_NAME_SECD,
null as SSN_SECD,
null as EMAIL_ADDRESS_SECD,
null as HOME_PHONE_SECD,
null as DNS_EMAIL_FLAG_SECD,
cast(null as numeric) as ORIGINAL_FICO_SECD,
cast(null as numeric) as CURRENT_FICO_SECD,
null as PROP_ADDRESS_ID,
null as PROP_ADDRESS1,
null as PROP_ADDRESS2,
null as PROP_CITY,
prop_state as PROP_STATE,
lpad(cast(prop_zip as text),5,'0') as PROP_ZIP,
original_appraised_amount as ORIGINAL_APPRAISED_VALUE,
orig_ltv as ORIGINAL_LTV,
0 as CURRENT_PROPERTY_VALUE,
0 as LTV,
null as CURRENT_OCCUPANCY_TYPE,
'OO' as CURRENT_OCCUPANCY_CODE,
prop_type_code as PROPERTY_TYPE,
case when prop_type_code = 'Condominium' then 'COND' else 'SFH' end as PROPERTY_TYPE_CODE,
1 as NUMBER_OF_UNITS,
null as CHANNEL,
null as ASSIGNED_LO
from public.mortgage_data_typed a inner join public.customer_data_typed c
on (a.customer_nbr = c.customer_id)
where product_group = '1st Mortgage';

update shivay.mst_loan m
set 
mail_address_id  = a.apn || '~' || a.fipscode,
mail_address1 = a.property_address,
mail_city = a.property_city,
mail_state = a.property_state,
mail_zip = lpad(a.property_zip,5,'0'),
prop_address_id  = a.apn || '~' || a.fipscode,
prop_address1 = a.property_address,
prop_city = a.property_city,
prop_state = a.property_state,
prop_zip = lpad(a.property_zip,5,'0'),
current_property_value = case when coalesce(a.avm_ez_estimated_value,0) = 0 then 0 else a.avm_ez_estimated_value end
from 
(
	select 
	substr(z.customer_id,5,20) as account_number,
	z.* from shivay.stg_bk_scrub_import z
	where customer_id like ('MRG_%')
) a
where m.account_number = a.account_number;

insert into shivay.pricing_ratesheet_dump
select
company_name,
rate_date,
product_id,
product_description,
lock_period,
rate,
case when rnk = 1 and points > 100 then 0 else 100-points end as points
from
(
	SELECT 
	'PENFED' as company_name,
	r.rate_date,
	p.product_id,
	p.product_description,
	60 as lock_period,
	r.rate::numeric as rate,
	r.lock_60_day::numeric as points,
	row_number() over(partition by p.product_id order by rate) as rnk
	FROM shivay.STG_RATESHEET_HISTORY r
	inner join (select max(rate_date) as rd from shivay.STG_RATESHEET_HISTORY) rd
	on (r.rate_date = rd.rd)
	inner join shivay.pricing_product_dump p
	on (trim(r.product_id) = trim(p.product_description))
	where upper(rate) not like '%RATE%'
	and trim(rate) <> ''
	and trim(lock_60_day) <> ''
) z;

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''1. Add On Us Loans'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.mst_1_add_mort_members() OWNER TO postgres;

--
-- TOC entry 447 (class 1255 OID 16456)
-- Name: mst_2_add_non_mort_members(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_2_add_non_mort_members()
    LANGUAGE plpgsql
    AS $$

BEGIN

insert into shivay.mst_loan
select
'NM' || lpad(cast(cnt as text),10,'0') as UNIQUE_ID,
'NM' || lpad(cast(cnt as text),10,'0') as ACCOUNT_NUMBER,
z.PORTFOLIO,
z.LIEN_POSITION,
z.INVESTOR_FULL_NAME,
z.INVESTOR_LOAN_NO,
z.ORIGINATION_DATE,
z.LOAN_AMOUNT,
z.ORIG_HELOC_BAL,
z.UNPAID_BALANCE,
z.LOAN_TERM,
z.REMAINING_TERM,
z.MATURITY_DATE,
z.PAYOFF_DATE,
z.PAYOFF_UPB,
z.LOAN_STATUS_CODE,
z.MOD_STATUS,
z.INTEREST_RATE,
z.RATE_TYPE,
z.ARM_NEXT_RESET_DATE,
z.ARM_NEXT_RESET_RATE,
pricing.pmt(Z.UNPAID_BALANCE, Z.INTEREST_RATE, Z.REMAINING_TERM) AS PRINCIPAL_AND_INTEREST,
z.IO_FLAG,
z.LOAN_TYPE,
z.PRODUCT_ID,
z.PRODUCT_NAME,
z.PURPOSE_CODE,
z.DELQ_12_MTH_STR,
z.DELINQUENCY_DAYS_PAST_DUE,
z.DELINQUENCY_12_MONTH_COUNT,
z.BANKRUPTCY_CODE,
z.BANKRUPTCY_CHAPTER,
z.BANKRUPTCY_DISPOSITION_DATE,
z.BANKRUPTCY_DISPOSITION_DESC,
z.FORECLOSURE_FLAG,
z.FOREBEARANCE_FLAG,
z.FOREBEARANCE_AMT,
z.DO_NOT_MARKET_FLAG,
z.MI_TYPE,
z.MI_AMT,
z.CUSTOMER_ID_PRIM,
z.LAST_NAME_PRIM,
z.FIRST_NAME_PRIM,
z.FULL_NAME_PRIM,
z.SSN_PRIM,
z.MAIL_ADDRESS_ID,
z.MAIL_ADDRESS1,
z.MAIL_ADDRESS2,
z.MAIL_CITY,
z.MAIL_STATE,
z.MAIL_ZIP,
z.HOME_PHONE_PRIM,
z.EMAIL_ADDRESS_PRIM,
z.WORK_PHONE_PRIM,
z.CELL_PHONE_PRIM,
z.DNS_MAIL_FLAG,
z.DNS_PHONE_FLAG,
z.DNS_EMAIL_FLAG_PRIM,
z.EMPLOYEE_FLAG,
z.ORIGINAL_FICO_PRIM,
z.CURRENT_FICO_PRIM,
z.CUSTOMER_ID_SECD,
z.LAST_NAME_SECD,
z.FIRST_NAME_SECD,
z.FULL_NAME_SECD,
z.SSN_SECD,
z.EMAIL_ADDRESS_SECD,
z.HOME_PHONE_SECD,
z.DNS_EMAIL_FLAG_SECD,
z.ORIGINAL_FICO_SECD,
z.CURRENT_FICO_SECD,
z.PROP_ADDRESS_ID,
z.PROP_ADDRESS1,
z.PROP_ADDRESS2,
z.PROP_CITY,
z.PROP_STATE,
z.PROP_ZIP,
z.ORIGINAL_APPRAISED_VALUE,
z.ORIGINAL_LTV,
z.CURRENT_PROPERTY_VALUE,
z.LTV,
z.CURRENT_OCCUPANCY_TYPE,
z.CURRENT_OCCUPANCY_CODE,
z.PROPERTY_TYPE,
z.PROPERTY_TYPE_CODE,
z.NUMBER_OF_UNITS,
z.CHANNEL,
z.ASSIGNED_LO
from
(
	select
	null as UNIQUE_ID,
	null as ACCOUNT_NUMBER,
	'Not On Us' as PORTFOLIO,
	'01' as LIEN_POSITION,
	null as INVESTOR_FULL_NAME,
	null as INVESTOR_LOAN_NO,
	to_date(cast(pos_1st_recording_date as text), 'yyyymmdd') as ORIGINATION_DATE,
	pos_1st_loan_amount as LOAN_AMOUNT,
	pos_2nd_est_loan_balance as ORIG_HELOC_BAL,
	pos_1st_est_loan_balance as UNPAID_BALANCE,
	360 as LOAN_TERM,
	360 - pricing.months_between(to_date(cast(pos_1st_recording_date as text), 'yyyymmdd'), current_date) as REMAINING_TERM,
	cast(null as date) as MATURITY_DATE,
	cast(null as date) as PAYOFF_DATE,
	cast(null as numeric) as PAYOFF_UPB,
	'1' as LOAN_STATUS_CODE,
	'N' as MOD_STATUS,
	round(pos_1st_int_rate_used,3) as INTEREST_RATE,
	case when pos_1st_int_rate_type in ('ARM','ADJ') then 'A' else 'F' end as RATE_TYPE,
	cast(null as date) as ARM_NEXT_RESET_DATE,
	cast(null as numeric) as ARM_NEXT_RESET_RATE,
	0 as PRINCIPAL_AND_INTEREST,
	'N' as IO_FLAG,
	case when pos_1st_loan_type in ('V','F') then pos_1st_loan_type else 'C' end as LOAN_TYPE,
	null as PRODUCT_ID,
	null as PRODUCT_NAME,
	null as PURPOSE_CODE,
	null as DELQ_12_MTH_STR,
	0 as DELINQUENCY_DAYS_PAST_DUE,
	0 as DELINQUENCY_12_MONTH_COUNT,
	'N' as BANKRUPTCY_CODE,
	null as BANKRUPTCY_CHAPTER,
	cast(null as date) as BANKRUPTCY_DISPOSITION_DATE,
	null as BANKRUPTCY_DISPOSITION_DESC,
	'N' as FORECLOSURE_FLAG,
	'N' as FOREBEARANCE_FLAG,
	cast(null as numeric) as FOREBEARANCE_AMT,
	'N' as DO_NOT_MARKET_FLAG,
	null as MI_TYPE,
	0 as MI_AMT,
	a.customer_id as CUSTOMER_ID_PRIM,
	b.last_name as LAST_NAME_PRIM,
	b.first_name as FIRST_NAME_PRIM,
	b.first_name || ' ' || b.last_name as FULL_NAME_PRIM,
	null as SSN_PRIM,
	apn || '~' || fipscode as MAIL_ADDRESS_ID,
	property_address as MAIL_ADDRESS1,
	null as MAIL_ADDRESS2,
	property_city as MAIL_CITY,
	property_state as MAIL_STATE,
	lpad(property_zip,5,'0') as MAIL_ZIP,
	substr(replace(replace(b.home_phone,'-','') ,' ',''),1,10) as HOME_PHONE_PRIM,
	upper(b.home_email) as EMAIL_ADDRESS_PRIM,
	substr(replace(replace(b.bus_phone,'-','') ,' ',''),1,10) as WORK_PHONE_PRIM,
	substr(replace(replace(b.cell_phone,'-','') ,' ',''),1,10) as CELL_PHONE_PRIM,
	'N' as DNS_MAIL_FLAG,
	'N' as DNS_PHONE_FLAG,
	'N' as DNS_EMAIL_FLAG_PRIM,
	'N' as EMPLOYEE_FLAG,
	cast(null as numeric) as ORIGINAL_FICO_PRIM,
	720 as CURRENT_FICO_PRIM,
	null as CUSTOMER_ID_SECD,
	null as LAST_NAME_SECD,
	null as FIRST_NAME_SECD,
	null as FULL_NAME_SECD,
	null as SSN_SECD,
	null as EMAIL_ADDRESS_SECD,
	null as HOME_PHONE_SECD,
	null as DNS_EMAIL_FLAG_SECD,
	cast(null as numeric) as ORIGINAL_FICO_SECD,
	cast(null as numeric) as CURRENT_FICO_SECD,
	apn ||'~' || fipscode as PROP_ADDRESS_ID,
	property_address as PROP_ADDRESS1,
	null as PROP_ADDRESS2,
	property_city as PROP_CITY,
	property_state as PROP_STATE,
	lpad(property_zip,5,'0') as PROP_ZIP,
	0 as ORIGINAL_APPRAISED_VALUE,
	0 as ORIGINAL_LTV,
	avm_ez_estimated_value as CURRENT_PROPERTY_VALUE,
	0 as LTV,
	'Owner Occupied' as CURRENT_OCCUPANCY_TYPE,
	'OO' as CURRENT_OCCUPANCY_CODE,
	'SFH' as PROPERTY_TYPE,
	'SFH' as PROPERTY_TYPE_CODE,
	'1' NUMBER_OF_UNITS,
	null as CHANNEL,
	null as ASSIGNED_LO,
	row_number() over(partition by a.apn, a.fipscode order by addr_maint_date desc) as prop_rank,
	row_number() over(order by a.customer_id) as cnt	
	from shivay.bk_rap_cust_data a join public.customer_data_typed b
	on (a.customer_id = b.customer_id)
	where pos_1st_est_loan_balance > 0 and pos_1st_recording_date is not null
) z left join shivay.mst_loan m
on (z.prop_address_id = m.prop_address_id)
where m.prop_address_id is null
and prop_rank = 1;

update shivay.mst_loan
set ltv = round(unpaid_balance/current_property_value*100,2)
where current_property_value > 0;

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''2. Add Not On Us Loans'', null, current_timestamp)');



END;
$$;


ALTER PROCEDURE shivay.mst_2_add_non_mort_members() OWNER TO postgres;

--
-- TOC entry 457 (class 1255 OID 16458)
-- Name: mst_3_add_heloc(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_3_add_heloc()
    LANGUAGE plpgsql
    AS $$
BEGIN

insert into shivay.mst_loan
select distinct
account_number as UNIQUE_ID,
account_number as ACCOUNT_NUMBER,
'On Us' as PORTFOLIO,
'02' as LIEN_POSITION,
investor_primary_name as INVESTOR_FULL_NAME,
null as INVESTOR_LOAN_NO,
date_closed as ORIGINATION_DATE,
original_amount as LOAN_AMOUNT,
0 as CURRENT_2ND_BALANCE,
principal_balance as UNPAID_BALANCE,
term_of_loan as LOAN_TERM,
pricing.months_between(current_date, maturity_date) as REMAINING_TERM,
maturity_date as MATURITY_DATE,
payoff_date as PAYOFF_DATE,
payoff_amount as PAYOFF_UPB,
case when ms_mortgage_status_description = 'Current' then '1'
when ms_mortgage_status_description = 'Paid_Off' then '2'
else 3 end as LOAN_STATUS_CODE,
case when rate_mod_flag is not null then 'Y' else 'N' end MOD_STATUS,
note_rate as INTEREST_RATE,
case when ms_nxt_rate_chg is not null then 'A' else 'F' end as RATE_TYPE,
next_rate_change_date as ARM_NEXT_RESET_DATE,
cast(null as numeric) as ARM_NEXT_RESET_RATE,
principal_interest_payment as PRINCIPAL_AND_INTEREST,
'N' as IO_FLAG,
case when productname like ('%VA%') then 'V' else 'C' end as LOAN_TYPE,
product_code as PRODUCT_ID,
productname as PRODUCT_NAME,
null as PURPOSE_CODE,
ms_dlq_history as DELQ_12_MTH_STR,
COALESCE(ms_days_past_due,0) as DELINQUENCY_DAYS_PAST_DUE,
ms_time_dlq_last_yr as DELINQUENCY_12_MONTH_COUNT,
case when bankruptcy_flag is not null then bankruptcy_flag else 'N' end as BANKRUPTCY_CODE,
null as BANKRUPTCY_CHAPTER,
cast(null as date) as BANKRUPTCY_DISPOSITION_DATE,
null as BANKRUPTCY_DISPOSITION_DESC,
case when foreclosure_indicator = 1 then 'Y' else 'N' end as FORECLOSURE_FLAG,
'N' as FOREBEARANCE_FLAG,
cast(null as numeric) as FOREBEARANCE_AMT,
'N' as DO_NOT_MARKET_FLAG,
case when bpmi_amt > 0 then 'BPMI' else null end as MI_TYPE,
bpmi_amt as MI_AMT,
c.customer_id as CUSTOMER_ID_PRIM,
c.last_name as LAST_NAME_PRIM,
c.first_name as FIRST_NAME_PRIM,
c.first_name || ' ' || c.last_name as FULL_NAME_PRIM,
null as SSN_PRIM,
null as MAIL_ADDRESS_ID,
c.address_line_1 as MAIL_ADDRESS1,
null as MAIL_ADDRESS2,
c.city as MAIL_CITY,
c.state as MAIL_STATE,
lpad(cast(c.zip as text),5,'0') as MAIL_ZIP,
substr(replace(replace(c.home_phone,'-','') ,' ',''),1,10) as HOME_PHONE_PRIM,
upper(c.home_email) as EMAIL_ADDRESS_PRIM,
substr(replace(replace(c.bus_phone,'-','') ,' ',''),1,10) as WORK_PHONE_PRIM,
substr(replace(replace(c.cell_phone,'-','') ,' ',''),1,10) as CELL_PHONE_PRIM,
'N' as DNS_MAIL_FLAG,
'N' as DNS_PHONE_FLAG,
'N' as DNS_EMAIL_FLAG_PRIM,
'N' as EMPLOYEE_FLAG,
cast(null as numeric) as ORIGINAL_FICO_PRIM,
720 as CURRENT_FICO_PRIM,
second_borr_member_number as CUSTOMER_ID_SECD,
null as LAST_NAME_SECD,
null as FIRST_NAME_SECD,
null as FULL_NAME_SECD,
null as SSN_SECD,
null as EMAIL_ADDRESS_SECD,
null as HOME_PHONE_SECD,
null as DNS_EMAIL_FLAG_SECD,
cast(null as numeric) as ORIGINAL_FICO_SECD,
cast(null as numeric) as CURRENT_FICO_SECD,
null as PROP_ADDRESS_ID,
null as PROP_ADDRESS1,
null as PROP_ADDRESS2,
null as PROP_CITY,
prop_state as PROP_STATE,
lpad(cast(prop_zip as text),5,'0') as PROP_ZIP,
original_appraised_amount as ORIGINAL_APPRAISED_VALUE,
orig_ltv as ORIGINAL_LTV,
0 as CURRENT_PROPERTY_VALUE,
0 as LTV,
null as CURRENT_OCCUPANCY_TYPE,
'OO' as CURRENT_OCCUPANCY_CODE,
prop_type_code as PROPERTY_TYPE,
case when prop_type_code = 'Condominium' then 'COND' else 'SFH' end as PROPERTY_TYPE_CODE,
1 as NUMBER_OF_UNITS,
null as CHANNEL,
null as ASSIGNED_LO
from public.mortgage_data_typed a inner join public.customer_data_typed c
on (a.customer_nbr = c.customer_id)
where product_group <> '1st Mortgage';

update shivay.mst_loan m
set 
mail_address_id  = a.apn || '~' || a.fipscode,
mail_address1 = a.property_address,
mail_city = a.property_city,
mail_state = a.property_state,
mail_zip = lpad(a.property_zip,5,'0'),
prop_address_id  = a.apn || '~' || a.fipscode,
prop_address1 = a.property_address,
prop_city = a.property_city,
prop_state = a.property_state,
prop_zip = lpad(a.property_zip,5,'0'),
current_property_value = case when coalesce(a.avm_ez_estimated_value,0) = 0 then 0 else a.avm_ez_estimated_value end
from 
(
	select 
	substr(z.customer_id,5,20) as account_number,
	z.* from shivay.stg_bk_scrub_import z
	where customer_id like ('MRG_%')
) a
where m.customer_id_prim = a.customer_id
and m.prop_zip = a.property_zip
and m.lien_position = '02';

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''3. Add HELOCS'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.mst_3_add_heloc() OWNER TO postgres;

--
-- TOC entry 452 (class 1255 OID 16459)
-- Name: mst_4_update_flags(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_4_update_flags()
    LANGUAGE plpgsql
    AS $$

BEGIN

update shivay.mst_loan a 
set current_2nd_balance = b.upb_2nd
from
(
	select distinct prop_address_id, sum(unpaid_balance) as upb_2nd 
	from shivay.mst_loan 
	where lien_position = '02'
	and loan_status_code = '1'
	group by prop_address_id
) b 
where a.prop_address_id = b.prop_address_id
and a.lien_position = '01'
and a.loan_status_code = '1'
and a.portfolio = 'On Us';

update shivay.mst_loan m
set 
do_not_market_flag = 'Y' 
from 
(
	select distinct customer_id
	from public.customer_data_typed
	where (advertising_ind <>'' or advert_indicator <>'')
) a
where m.customer_id_prim = a.customer_id;

update shivay.mst_loan m
set 
do_not_market_flag = 'Y' 
from 
(
	select
	distinct customer_id
	from public.customer_data_typed
	where pricing.months_between(dob, current_date) <= 220
) a
where m.customer_id_prim = a.customer_id;

update shivay.mst_loan m
set 
dns_email_flag_prim = 'Y' 
from 
shivay.cmp_suppression a
where m.customer_id_prim = a.customer_id
and a.suppression_type = '1. DNS EMAIL';

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''4. Update DNS Flags'', null, current_timestamp)');


END;
$$;


ALTER PROCEDURE shivay.mst_4_update_flags() OWNER TO postgres;

--
-- TOC entry 453 (class 1255 OID 16460)
-- Name: mst_5_add_email_cust_id_match(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_5_add_email_cust_id_match()
    LANGUAGE plpgsql
    AS $$
BEGIN

execute 'truncate table shivay.stg_email_cust_id_match';

insert into shivay.stg_email_cust_id_match 
select
customer_id,
email,
no_of_times,
case when l.customer_id_prim is null then 'OTHER' else l.portfolio end as segment,
row_number() over(partition by email order by (case when l.customer_id_prim is not null then 0 else 1 end)) as customer_rank
from
(
	select 
	customer_id, 
	email,
	count(*) as no_of_times
	from
	(
		select * from
		(
		select
		customer_id,
		upper(home_email) as email,
		row_number() over (partition by upper(home_email) order by addr_maint_date desc) as c_rank
		from customer_data_typed
		where home_email like ('%@%')
		and upper(home_email) not like ('NOEMAIL@%')
		and upper(home_email) not like ('NONE@%')
		and upper(home_email) not like ('NOEMAILADDR@%')
		and upper(home_email) not like ('NO@%')
		and upper(home_email) not like ('NA@%')
		) x where c_rank = 1

		union all

		select * from
		(
		select
		customer_id,
		upper(work_email) as email,
		row_number() over (partition by upper(work_email) order by addr_maint_date desc) as c_rank
		from customer_data_typed
		where work_email like ('%@%')
		and upper(work_email) not like ('NOEMAIL@%')
		and upper(work_email) not like ('NONE@%')
		and upper(work_email) not like ('NOEMAILADDR@%')
		and upper(work_email) not like ('NO@%')
		and upper(work_email) not like ('NA@%')
		) y where c_rank = 1
		
		union all
		
		select *
		from
		(
		select
		customer_id,
		email,
		row_number() over(partition by email order by file_date desc) as c_rank
		from shivay.cmp_solicitation_history
		where email like ('%@%')
		) y where c_rank = 1
	) z
	group by 
	customer_id,
	email
) e left join shivay.mst_loan l on (e.customer_id = l.customer_id_prim);

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''5. Update EMAIL/ CUST ID Table'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.mst_5_add_email_cust_id_match() OWNER TO postgres;

--
-- TOC entry 482 (class 1255 OID 16461)
-- Name: mst_6_add_phone_cust_id_match(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_6_add_phone_cust_id_match()
    LANGUAGE plpgsql
    AS $$
BEGIN

execute 'truncate table shivay.stg_phone_cust_id_match';

insert into shivay.stg_phone_cust_id_match 
select
customer_id,
phone,
portfolio as customer_segment,
row_number() over(partition by phone order by (case when l.customer_id_prim is not null then current_date else addr_maint_date end) desc) as customer_rank
from
(
		select customer_id,
		regexp_replace(home_phone, '[^0-9]+', '', 'g') as phone,
		addr_maint_date
		from public.customer_data_typed
		where length(regexp_replace(home_phone, '[^0-9]+', '', 'g')) = 10
		and substr(replace(replace(home_phone,'-','') ,' ',''),1,10) <> '0000000000'

		union all

		select customer_id,
		regexp_replace(bus_phone, '[^0-9]+', '', 'g') as phone,
		addr_maint_date
		from public.customer_data_typed
		where length(regexp_replace(bus_phone, '[^0-9]+', '', 'g')) = 10
		and substr(replace(replace(bus_phone,'-','') ,' ',''),1,10) <> '0000000000'

		union all

		select customer_id,
		regexp_replace(cell_phone, '[^0-9]+', '', 'g') as phone,
		addr_maint_date
		from public.customer_data_typed
		where length(regexp_replace(cell_phone, '[^0-9]+', '', 'g')) = 10
		and substr(replace(replace(cell_phone,'-','') ,' ',''),1,10) <> '0000000000'
) z left join shivay.mst_loan l
on (z.customer_id = l.customer_id_prim)
where substr(z.phone,1,3) in
(
'201',
'202',
'203',
'204',
'205',
'206',
'207',
'208',
'209',
'210',
'212',
'213',
'214',
'215',
'216',
'217',
'218',
'219',
'224',
'225',
'226',
'228',
'229',
'231',
'234',
'239',
'240',
'242',
'246',
'248',
'250',
'251',
'252',
'253',
'254',
'256',
'260',
'262',
'264',
'267',
'268',
'269',
'270',
'276',
'281',
'284',
'289',
'301',
'302',
'303',
'304',
'305',
'306',
'307',
'308',
'309',
'310',
'312',
'313',
'314',
'315',
'316',
'317',
'318',
'319',
'320',
'321',
'323',
'325',
'330',
'334',
'336',
'337',
'339',
'340',
'345',
'347',
'351',
'352',
'360',
'361',
'386',
'401',
'402',
'403',
'404',
'405',
'406',
'407',
'408',
'409',
'410',
'412',
'413',
'414',
'415',
'416',
'417',
'418',
'419',
'423',
'424',
'425',
'430',
'432',
'434',
'435',
'438',
'440',
'441',
'443',
'450',
'456',
'469',
'473',
'478',
'479',
'480',
'484',
'500',
'501',
'502',
'503',
'504',
'505',
'506',
'507',
'508',
'509',
'510',
'512',
'513',
'514',
'515',
'516',
'517',
'518',
'519',
'520',
'530',
'540',
'541',
'551',
'559',
'561',
'562',
'563',
'567',
'570',
'571',
'573',
'574',
'580',
'585',
'586',
'600',
'601',
'602',
'603',
'604',
'605',
'606',
'607',
'608',
'609',
'610',
'612',
'613',
'614',
'615',
'616',
'617',
'618',
'619',
'620',
'623',
'626',
'630',
'631',
'636',
'641',
'646',
'647',
'649',
'650',
'651',
'660',
'661',
'662',
'664',
'670',
'671',
'678',
'682',
'684',
'700',
'701',
'702',
'703',
'704',
'705',
'706',
'707',
'708',
'709',
'710',
'712',
'713',
'714',
'715',
'716',
'717',
'718',
'719',
'720',
'724',
'727',
'731',
'732',
'734',
'740',
'754',
'757',
'758',
'760',
'762',
'763',
'765',
'767',
'769',
'770',
'772',
'773',
'774',
'775',
'778',
'780',
'781',
'784',
'785',
'786',
'787',
'800',
'801',
'802',
'803',
'804',
'805',
'806',
'807',
'808',
'809',
'810',
'812',
'813',
'814',
'815',
'816',
'817',
'818',
'819',
'828',
'829',
'830',
'831',
'832',
'843',
'845',
'847',
'848',
'850',
'856',
'857',
'858',
'859',
'860',
'862',
'863',
'864',
'865',
'866',
'867',
'868',
'869',
'870',
'876',
'877',
'878',
'888',
'900',
'901',
'902',
'903',
'904',
'905',
'906',
'907',
'908',
'909',
'910',
'912',
'913',
'914',
'915',
'916',
'917',
'918',
'919',
'920',
'925',
'928',
'931',
'936',
'937',
'939',
'940',
'941',
'947',
'949',
'951',
'952',
'954',
'956',
'970',
'971',
'972',
'973',
'978',
'979',
'980',
'985',
'989'
)
;

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''6. Update PHONE/ CUST ID Table'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.mst_6_add_phone_cust_id_match() OWNER TO postgres;

--
-- TOC entry 480 (class 1255 OID 16462)
-- Name: mst_7_add_apps(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_7_add_apps()
    LANGUAGE plpgsql
    AS $$
BEGIN

update shivay.mst_app a
set APP_BRANCH = e.org_code ,
APP_LNOFF_NAME = e.app_lnoff_cd ,
APP_CREATE_DATE = e.app_create_date ,
APP_RATE_LOCK_DATE = e.app_rate_lock_date ,
APP_SETUP_DATE = e.app_gfe_date ,
APP_FUND_DATE = e.app_fund_date ,
APP_STATUS_DESC = e.app_status_code ,
APP_STATUS_DATE = e.app_status_date ,
APP_PURPOSE_DESC = e.app_purpose_code ,
APP_LOAN_AMT = e.app_loan_amt ,
APP_TERM = e.app_term ,
APP_RATE = e.app_rate ,
APP_PI = e.app_pi ,
APP_PRIM_HOME_PHONE = case when length(replace(replace(e.app_prim_home_phone,'-',''),' ','')) > 10 then null else replace(replace(e.app_prim_home_phone,'-',''),' ','') end ,
APP_PRIM_EMAIL = upper(e.app_prim_email) ,
APP_PROP_STATE = e.app_p_state ,
APP_PROP_ZIP = case when e.app_p_zip = '' then null else substr(e.app_p_zip,1,5) end ,
APP_APPRAISED_VALUE = e.app_appraised_value ,
APP_LTV = 0 ,
APP_CANCEL_REASON = e.app_wd_reason ,
APP_DECLINE_REASON = e.app_td_reason ,
APP_TOTAL_CL_COST = e.app_total_cl_cost ,
APP_DISC_PTS_AMT = e.app_disc_pts_amt ,
APP_PRODUCT_GROUP = upper(e.app_product_code) ,
APP_FA_FLAG = case when e.app_arm_type = 'Fixed' then 'F' else 'A' end ,
APP_OCCUPANCY_TYPE = e.app_occupancy
from public.encompass_data_typed e
where a.app_no = e.app_no;

insert into shivay.mst_app
select 
e.app_no as APP_NO,
null as APP_CHANNEL,
e.org_code as APP_BRANCH,
null as APP_LNOFF_CD,
e.app_lnoff_cd as APP_LNOFF_NAME,
e.app_create_date as APP_CREATE_DATE,
e.app_rate_lock_date APP_RATE_LOCK_DATE,
e.app_gfe_date as APP_SETUP_DATE,
e.app_fund_date as APP_FUND_DATE,
cast(null as date) as APP_CANCEL_DATE,
null as APP_STATUS_CODE,
e.app_status_code as APP_STATUS_DESC,
e.app_status_date as APP_STATUS_DATE,
null as APP_SOURCE,
null as APP_PURPOSE_CODE,
e.app_purpose_code as APP_PURPOSE_DESC,
e.app_loan_amt as APP_LOAN_AMT,
e.app_term as APP_TERM,
e.app_rate as APP_RATE,
e.app_pi as APP_PI,
null as APP_PRIM_LAST,
null as APP_PRIM_FIRST,
null as APP_PRIM_SSN,
null as APP_SECD_LAST,
null as APP_SECD_FIRST,
null as APP_SECD_SSN,
case when length(replace(replace(e.app_prim_home_phone,'-',''),' ','')) > 10 then null else replace(replace(e.app_prim_home_phone,'-',''),' ','') end as APP_PRIM_HOME_PHONE,
upper(e.app_prim_email) as APP_PRIM_EMAIL,
null as APP_PROP_ADDRESS1,
null as APP_PROP_ADDRESS2,
null as APP_PROP_CITY,
e.app_p_state as APP_PROP_STATE,
case when e.app_p_zip = '' then null else substr(e.app_p_zip,1,5) end as APP_PROP_ZIP,
e.app_appraised_value as APP_APPRAISED_VALUE,
0 as APP_LTV,
e.app_wd_reason as APP_CANCEL_REASON,
e.app_td_reason as APP_DECLINE_REASON,
e.app_total_cl_cost as APP_TOTAL_CL_COST,
e.app_disc_pts_amt as APP_DISC_PTS_AMT,
null as APP_PRODUCT_CODE,
null as APP_PRODUCT_DESC,
upper(e.app_product_code) as APP_PRODUCT_GROUP,
case when e.app_arm_type = 'Fixed' then 'F' else 'A' end as APP_FA_FLAG,
null as APP_PROPERTY_TYPE,
e.app_occupancy as APP_OCCUPANCY_TYPE,
substr(e.crm_lead_id,1,15) as LEAD_ID,
null as ATTRIBUTED_LEAD_ID,
null as CURRENT_CUSTOMER_ID,
null as ATTRIBUTED_CUSTOMER_ID,
null as ATTRIBUTED_MKTG_CAMPAIGN,
null as ATTRIBUTED_DISPOSITION_NO,
null as CUSTOMER_SEGMENT
from public.encompass_data_typed e left join shivay.mst_app a
on (e.app_no = a.app_no)
where a.app_no is null;

update shivay.mst_app l
set attributed_customer_id = b.customer_id,
customer_segment = b.segment
from shivay.stg_email_cust_id_match b
where l.app_prim_email = b.email
and l.attributed_customer_id is null
and b.customer_rank = 1;

update shivay.mst_app l
set attributed_customer_id = b.customer_id,
customer_segment = b.customer_segment
from shivay.stg_phone_cust_id_match b
where l.app_prim_home_phone = b.phone
and l.attributed_customer_id is null
and b.customer_rank  = 1;

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''7. Add Encompass Data'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.mst_7_add_apps() OWNER TO postgres;

--
-- TOC entry 495 (class 1255 OID 16463)
-- Name: mst_8_update_lead_lookups(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_8_update_lead_lookups()
    LANGUAGE plpgsql
    AS $$
BEGIN

execute 'truncate table shivay.mst_lead_lookups';

insert into shivay.mst_lead_lookups
select * from shivay.stg_lead_lookups;

insert into shivay.mst_lead_lookups
select 
v."User",
v."Group",
v."Lead Source",
v."Status",
v."Tavant_Status",
v."LQ Status",
v."NQ Reason",
null as Sales_Channel,
null as Workable_lead,
null as Lead_channel,
null as lead_campaign,
null as lead_status_grp,
null as lq_contact,
null as lq_transfer,
null as lo_contact
from velocify_data_typed v left join 
shivay.mst_lead_lookups a
on 
(
coalesce(v."User",'XXX') = coalesce(a."User",'XXX') and
coalesce(v."Group",'XXX') = coalesce(a."Group",'XXX') and
coalesce(v."Lead Source",'XXX') = coalesce(a."Lead Source",'XXX') and
coalesce(v."Status",'XXX') = coalesce(a."Status",'XXX') and
coalesce(v."Tavant_Status",'XXX') = coalesce(a."Tavant_Status",'XXX') and
coalesce(v."LQ Status",'XXX') = coalesce(a."LQ Status",'XXX') and
coalesce(v."NQ Reason",'XXX') = coalesce(a."NQ Reason",'XXX') 
)
where a.workable_lead is null
group by 
1,2,3,4,5,6,7;

update shivay.mst_lead_lookups
set sales_channel = case when "User" in ('Encompass User, Unassigned', 'User, Unassigned') then 'Unassigned'
when "Group" like ('%Digital%') then 'Digital'
when "Group" like ('%Retail%') then 'Retail'
else 'Others' end 
where sales_channel is null;

update shivay.mst_lead_lookups
set lq_transfer = case when "LQ Status" in ('New Cold Transfer', 'New Warm Transfer') then 'Y' else 'N' end
where lq_transfer is null;

update shivay.mst_lead_lookups
set lq_contact = 'Y'
where lq_contact is null
and lq_transfer = 'Y';

update shivay.mst_lead_lookups
set lq_contact = case when "LQ Status" in ('Follow Up Required') and "NQ Reason" is null then 'N' else lq_contact end
where lq_contact is null;

update shivay.mst_lead_lookups
set lq_contact = case when "LQ Status" in ('New', 'Bad Lead', 'Bad Phone', 'Pulled From LQ') then 'N' else lq_contact end
where lq_contact is null;

update shivay.mst_lead_lookups
set lq_contact = 'Y'
where lq_contact is null
and "LQ Status" is not null;

update shivay.mst_lead_lookups a
set lo_contact = b.lo_contact
from 
(select distinct "Status", lo_contact 
from shivay.mst_lead_lookups where lo_contact is not null) b
where a."Status" = b."Status"
and a.lo_contact is null;

update shivay.mst_lead_lookups a
set workable_lead = b.workable_lead
from 
(select distinct "Lead Source", workable_lead 
from shivay.mst_lead_lookups where workable_lead is not null) b
where a."Lead Source" = b."Lead Source"
and a.workable_lead is null;

update shivay.mst_lead_lookups a
set lead_channel = b.lead_channel
from 
(select distinct "Lead Source", lead_channel 
from shivay.mst_lead_lookups where lead_channel is not null) b
where a."Lead Source" = b."Lead Source"
and a.lead_channel is null;

update shivay.mst_lead_lookups a
set lead_campaign = b.lead_campaign
from 
(select distinct "Lead Source", lead_campaign 
from shivay.mst_lead_lookups where lead_campaign is not null) b
where a."Lead Source" = b."Lead Source"
and a.lead_campaign is null;

update shivay.mst_lead_lookups a
set lead_status_grp = b.lead_status_grp
from 
(select distinct "Status", lead_status_grp 
from shivay.mst_lead_lookups where lead_status_grp is not null) b
where a."Status" = b."Status"
and a.lead_status_grp is null;

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''8. Update Lead Transformations'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.mst_8_update_lead_lookups() OWNER TO postgres;

--
-- TOC entry 488 (class 1255 OID 16465)
-- Name: mst_9_add_leads(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.mst_9_add_leads()
    LANGUAGE plpgsql
    AS $$
BEGIN

/*
execute 'truncate table shivay.mst_lead';

insert into shivay.mst_lead
select
lead_number as LEAD_ID,
created_by as REFERRAL_SOURCE,
l1.new_value as SALES_CHANNEL,
l6.new_value as MKTG_CHANNEL,
l5.new_value as LEAD_SOURCE,
0 as PROP_VALUE,
0 as LEAD_FICO,
null as BORR_LAST_NAME,
null as BORR_FIRST_NAME,
null as BORROWER_SSN,
null as COBORROWER_NAME,
null as BORROWER_CITY,
st.state as BORROWER_STATE,
null as BORROWER_ZIP,
null as PROPERTY_CITY,
st.state as PROPERTY_STATE,
null as PROPERTY_ZIP,
substr(phone,2,10) as DAY_PHONE,
null as EVENING_PHONE,
null as MOBILE_PHONE,
upper(email) as EMAIL,
null as BEST_CONTACT_METHOD,
l7.new_value as LOAN_PURPOSE,
null as PROPERTY_TYPE,
null as CURRENT_NEED_SITUATION,
null as PURPOSE_OF_REFINANCE,
null as DO_NOT_EMAIL,
'UNKNOWN' as LOAN_TYPE,
0 as LOAN_AMOUNT,
case when l2.current_value is null then l3.new_value else l2.new_value end as LEAD_STATUS,
create_date as LEAD_CREATE_DATE,
lead_owner as LO_NAME,
null as LO_WORK_PHONE,
null as LO_NMLS,
null as LO_EMAIL,
null as PARENT_LEAD,
campaign as CRM_CAMPAIGN_NAME,
null as CRM_CAMPAIGN_ID,
cast(null as date) FIRST_CONTACT_DATE,
last_action_tracked as LAST_ACTION_TAKEN,
lastmodifiedstatusdate as LAST_ACTION_TAKEN_DATE,
to_char(create_date,'yyyy-mm') as TIME_PERIOD,
'Y' as CONTACT_MADE,
cast(null as date) as FIRST_CONTACT_ATTEMPT_DATE,
cast(null as numeric) TOTAL_CONTACT_ATTEMPTS,
null as FIRST_CONTACT_ATTEMPT_TYPE,
cast(null as date) FIRST_CONTACT_MADE_DATE,
null as FIRST_CONTACT_MADE_TYPE,
null as MILITARY_STATUS,
null as FIRST_VA_LOAN,
0 as CASH_OUT_AMOUNT,
null as FIRST_TIME_HOMEBUYER,
case when length(loan_number) > 10 then null else loan_number end as APP_NO,
null as CURRENT_CUSTOMER_ID,
null as ATTRIBUTED_APP_NO,
null as ATTRIBUTED_CUSTOMER_ID,
null as ATTRIBUTED_MKTG_CAMPAIGN,
null as ATTRIBUTED_DISPOSITION_NO,
null as CUSTOMER_SEGMENT,
lq_lead_id as LQ_LEAD_ID,
null as LQ_CAMPAIGN_ID,
l4.new_value as LQ_STATUS,
'SALESFORCE' as CRM_SYSTEM
from public.salesforce_data_typed s 
left join 
(select * from shivay.mst_lead_lookups where column_id_in = 'LEAD_OWNER_TITLE'
and crm_system = 'SALESFORCE') l1
on (s.lead_owner_title = l1.current_value)
left join 
(select * from shivay.mst_lead_lookups where column_id_in = 'LEAD_OWNER'
and crm_system = 'SALESFORCE') l2
on (s.lead_owner = l2.current_value)
left join
(select * from shivay.mst_lead_lookups where column_id_in = 'LEAD_STATUS'
and crm_system = 'SALESFORCE') l3
on (s.lead_status = l3.current_value)
left join
(select * from shivay.mst_lead_lookups where column_id_in = 'LQ_STATUS'
and crm_system = 'SALESFORCE') l4
on (s.lq_status = l4.current_value)
left join
(select * from shivay.mst_lead_lookups where column_id_in = 'LEAD_SOURCE' and column_id_out = 'LEAD_SOURCE'
and crm_system = 'SALESFORCE') l5
on (s.lead_source = l5.current_value)
left join
(select * from shivay.mst_lead_lookups where column_id_in = 'LEAD_SOURCE' and column_id_out = 'MKTG_CHANNEL'
and crm_system = 'SALESFORCE') l6
on (s.lead_source = l6.current_value)
left join
(select * from shivay.mst_lead_lookups where column_id_out = 'LOAN_PURPOSE'
and crm_system = 'SALESFORCE') l7
on (s.preferred_interest = l7.current_value)

left join 
(select distinct state_name, state from pricing.loan_limits_tab) st  
on (trim(upper(s.property_state)) = trim(upper(st.state_name)))
;
*/

with leads as 
(
	select 
	v."Id" as lead_id,
	a.lead_channel as referral_source,
	a.sales_channel,
	a.lead_campaign as mktg_channel,
	v."Lead Source" as lead_source,
	v."Purchase Price (from Summary)" as prop_value,
	v."Credit Score" as lead_fico,
	upper(v."Last Name") as borr_last_name,
	upper(v."First Name") as borr_first_name,
	null as borrower_ssn,
	upper(v."Co-Borrower First Name") || ' ' || upper(v."Co-Borrower Last Name") as coborrower_name,
	v."Property City" as borrower_city,
	v."Property State" as borrower_state,
	null as borrower_zip,
	v."Property City" as property_city,
	v."Property State" as property_state,
	lpad(cast(v."Property Zip Code" as text),5,'0') as property_zip,
	substr(replace(replace(replace(replace(replace(v."Day Phone",'-',''),' ',''),'(',''),')',''),'''+1',''),1,10) as day_phone,
	substr(replace(replace(replace(replace(replace(v."Home Phone",'-',''),' ',''),'(',''),')',''),'''+1',''),1,10) as evening_phone,
	substr(replace(replace(replace(replace(replace(v."Mobile Phone",'-',''),' ',''),'(',''),')',''),'''+1',''),1,10) as mobile_phone,
	upper(v."Email") as email,
	null as best_contact_method,
	v."Loan Purpose" as loan_purpose,
	v."Property Type (from Summary)" as property_type,
	v."Current Need Situation" as current_need_situation,
	v."Purpose of Refinance" as purpose_of_refinance,
	null as do_not_email,
	v."Loan Type" as loan_type,
	v."First Loan Amount" as loan_amount,
	v."Status" as lead_status,
	v."Date Added" as lead_create_date,
	v."User" as lo_name,
	null as lo_work_phone,
	null as lo_nmls,
	null as lo_email,
	v."Parent Lead Id" as parent_lead,
	v."Lead Source1" as crm_campaign_name,
	v."Lead Source Group" as crm_campaign_id,
	cast(null as date) as first_contact_date,
	v."Last Action" as last_action_taken,
	v."Last Action Date" as last_action_taken_date,
	to_char(v."Date Added",'yyyy-mm') as time_period,
	coalesce(a.workable_lead,'N') as workable_lead,
	v."First Contact Attempt Date" as first_contact_attempt_date,
	v."Total Contact Attempts" as total_contact_attempts,
	null as first_contact_attempt_type,
	cast(null as date) as first_contact_made_date,
	null as first_contact_made_type,
	a.lead_status_grp,
	null as first_va_loan,
	cast(null as numeric) as cash_out_amount,
	v."1st Time Buyer" as first_time_homebuyer,
	substr(v."Encompass Loan Number",1,15) as app_no,
	null as current_customer_id,
	null as attributed_app_no,
	null as attributed_customer_id,
	null as attributed_mktg_campaign,
	null as attributed_disposition_no,
	null as customer_segment,
	v."LQ Lead ID" as lq_lead_id,
	v."LQ Campaign" as lq_campaign_id,
	v."LQ Status" as lq_status,
	coalesce(a.lo_contact,'N') as lo_contact_flag,
	coalesce(a.lq_contact,'N') as lq_contact,

	coalesce(a.lq_transfer,'N') as lq_transfer,
	'VELOCIFY' as crm_system
	from public.velocify_data_typed v 
	inner join shivay.mst_lead_lookups a
	on 
		(
		coalesce(v."User",'XXX') = coalesce(a."User",'XXX') and
		coalesce(v."Group",'XXX') = coalesce(a."Group",'XXX') and
		coalesce(v."Lead Source",'XXX') = coalesce(a."Lead Source",'XXX') and
		coalesce(v."Status",'XXX') = coalesce(a."Status",'XXX') and
		coalesce(v."Tavant_Status",'XXX') = coalesce(a."Tavant_Status",'XXX') and
		coalesce(v."LQ Status",'XXX') = coalesce(a."LQ Status",'XXX') and
		coalesce(v."NQ Reason",'XXX') = coalesce(a."NQ Reason",'XXX') 
		)
)

update shivay.mst_lead l
set referral_source = lead.referral_source,
sales_channel = lead.sales_channel,
mktg_channel = lead.mktg_channel,
lead_source = lead.lead_source,
prop_value = lead.prop_value,
lead_fico = lead.lead_fico,
borr_last_name = lead.borr_last_name,
borr_first_name = lead.borr_first_name,
borrower_ssn = lead.borrower_ssn,
coborrower_name = lead.coborrower_name,
borrower_city = lead.borrower_city,
borrower_state = lead.borrower_state,
borrower_zip = lead.borrower_zip,
property_city = lead.property_city,
property_state = lead.property_state,
property_zip = lead.property_zip,
day_phone = lead.day_phone,
evening_phone = lead.evening_phone,
mobile_phone = lead.mobile_phone,
email = lead.email,
best_contact_method = lead.best_contact_method,
loan_purpose = lead.loan_purpose,
property_type = lead.property_type,
current_need_situation = lead.current_need_situation,
purpose_of_refinance = lead.purpose_of_refinance,
do_not_email = lead.do_not_email,
loan_type = lead.loan_type,
loan_amount = lead.loan_amount,
lead_status = lead.lead_status,
lead_create_date = lead.lead_create_date,
lo_name = lead.lo_name,
lo_work_phone = lead.lo_work_phone,
lo_nmls = lead.lo_nmls,
lo_email = lead.lo_email,
parent_lead = lead.parent_lead,
crm_campaign_name = lead.crm_campaign_name,
crm_campaign_id = lead.crm_campaign_id,
first_contact_date = lead.first_contact_date,
last_action_taken = lead.last_action_taken,
last_action_taken_date = lead.last_action_taken_date,
time_period = lead.time_period,
workable_lead = lead.workable_lead,
first_contact_attempt_date = lead.first_contact_attempt_date,
total_contact_attempts = lead.total_contact_attempts,
first_contact_attempt_type = lead.first_contact_attempt_type,
first_contact_made_date = lead.first_contact_made_date,
first_contact_made_type = case when lead.lo_contact_flag = 'Y' then 'LO Contact' else 'LO No Contact' end,
lead_status_grp = lead.lead_status_grp,
first_va_loan = lead.first_va_loan,
cash_out_amount = lead.cash_out_amount,
first_time_homebuyer = lead.first_time_homebuyer,
app_no = lead.app_no,
current_customer_id = lead.current_customer_id,
lq_lead_id = lead.lq_lead_id,
lq_campaign_id = lead.lq_campaign_id,
lq_status = case when lead.lq_lead_id is not null then
case when lead.lq_transfer = 'Y' then 'LQ Transfer'
when lead.lq_contact = 'Y' then 'LQ Contact'
else 'LQ No Contact' end else null end
from leads lead
where l.lead_id = lead.lead_id
and l.crm_system = 'VELOCIFY';

with leads as 
(
	select 
	v."Id" as lead_id,
	a.lead_channel as referral_source,
	a.sales_channel,
	a.lead_campaign as mktg_channel,
	v."Lead Source" as lead_source,
	v."Purchase Price (from Summary)" as prop_value,
	v."Credit Score" as lead_fico,
	upper(v."Last Name") as borr_last_name,
	upper(v."First Name") as borr_first_name,
	null as borrower_ssn,
	upper(v."Co-Borrower First Name") || ' ' || upper(v."Co-Borrower Last Name") as coborrower_name,
	v."Property City" as borrower_city,
	v."Property State" as borrower_state,
	null as borrower_zip,
	v."Property City" as property_city,
	v."Property State" as property_state,
	lpad(cast(v."Property Zip Code" as text),5,'0') as property_zip,
	substr(replace(replace(replace(replace(replace(v."Day Phone",'-',''),' ',''),'(',''),')',''),'''+1',''),1,10) as day_phone,
	substr(replace(replace(replace(replace(replace(v."Home Phone",'-',''),' ',''),'(',''),')',''),'''+1',''),1,10) as evening_phone,
	substr(replace(replace(replace(replace(replace(v."Mobile Phone",'-',''),' ',''),'(',''),')',''),'''+1',''),1,10) as mobile_phone,
	upper(v."Email") as email,
	null as best_contact_method,
	v."Loan Purpose" as loan_purpose,
	v."Property Type (from Summary)" as property_type,
	v."Current Need Situation" as current_need_situation,
	v."Purpose of Refinance" as purpose_of_refinance,
	null as do_not_email,
	v."Loan Type" as loan_type,
	v."First Loan Amount" as loan_amount,
	v."Status" as lead_status,
	v."Date Added" as lead_create_date,
	v."User" as lo_name,
	null as lo_work_phone,
	null as lo_nmls,
	null as lo_email,
	v."Parent Lead Id" as parent_lead,
	v."Lead Source1" as crm_campaign_name,
	v."Lead Source Group" as crm_campaign_id,
	cast(null as date) as first_contact_date,
	v."Last Action" as last_action_taken,
	v."Last Action Date" as last_action_taken_date,
	to_char(v."Date Added",'yyyy-mm') as time_period,
	coalesce(a.workable_lead,'N') as workable_lead,
	v."First Contact Attempt Date" as first_contact_attempt_date,
	v."Total Contact Attempts" as total_contact_attempts,
	null as first_contact_attempt_type,
	cast(null as date) as first_contact_made_date,
	null as first_contact_made_type,
	a.lead_status_grp,
	null as first_va_loan,
	cast(null as numeric) as cash_out_amount,
	v."1st Time Buyer" as first_time_homebuyer,
	substr(v."Encompass Loan Number",1,15) as app_no,
	null as current_customer_id,
	null as attributed_app_no,
	null as attributed_customer_id,
	null as attributed_mktg_campaign,
	cast(null as numeric) as attributed_disposition_no,
	null as customer_segment,
	v."LQ Lead ID" as lq_lead_id,
	v."LQ Campaign" as lq_campaign_id,
	v."LQ Status" as lq_status,
	coalesce(a.lo_contact,'N') as lo_contact_flag,
	coalesce(a.lq_contact,'N') as lq_contact,

	coalesce(a.lq_transfer,'N') as lq_transfer,
	'VELOCIFY' as crm_system
	from public.velocify_data_typed v 
	inner join shivay.mst_lead_lookups a
	on 
		(
		coalesce(v."User",'XXX') = coalesce(a."User",'XXX') and
		coalesce(v."Group",'XXX') = coalesce(a."Group",'XXX') and
		coalesce(v."Lead Source",'XXX') = coalesce(a."Lead Source",'XXX') and
		coalesce(v."Status",'XXX') = coalesce(a."Status",'XXX') and
		coalesce(v."Tavant_Status",'XXX') = coalesce(a."Tavant_Status",'XXX') and
		coalesce(v."LQ Status",'XXX') = coalesce(a."LQ Status",'XXX') and
		coalesce(v."NQ Reason",'XXX') = coalesce(a."NQ Reason",'XXX') 
		)	 
)

insert into shivay.mst_lead
select 
lead.lead_id,
referral_source,
sales_channel,
mktg_channel,
lead_source,
prop_value,
lead_fico,
borr_last_name,
borr_first_name,
borrower_ssn,
coborrower_name,
borrower_city,
borrower_state,
borrower_zip,
property_city,
property_state,
property_zip,
day_phone,
evening_phone,
mobile_phone,
email,
best_contact_method,
loan_purpose,
property_type,
current_need_situation,
purpose_of_refinance,
do_not_email,
loan_type,
loan_amount,
lead_status,
lead_create_date,
lo_name,
lo_work_phone,
lo_nmls,
lo_email,
parent_lead,
crm_campaign_name,
crm_campaign_id,
first_contact_date,
last_action_taken,
last_action_taken_date,
time_period,
workable_lead,
first_contact_attempt_date,
total_contact_attempts,
case when lo_contact_flag = 'Y' then 'LO Contact' else 'LO No Contact' end first_contact_attempt_type,
first_contact_made_date,
first_contact_made_type,
lead_status_grp,
first_va_loan,
cash_out_amount,
first_time_homebuyer,
app_no,
current_customer_id,
attributed_app_no,
attributed_customer_id,
attributed_mktg_campaign,
attributed_disposition_no,
customer_segment,
lq_lead_id,
lq_campaign_id,
case when lead.lq_lead_id is not null then
case when lead.lq_transfer = 'Y' then 'LQ Transfer'
when lead.lq_contact = 'Y' then 'LQ Contact'
else 'LQ No Contact' end else null end as lq_status,
crm_system
from leads lead left join 
(select lead_id from shivay.mst_lead where crm_system = 'VELOCIFY') l
on (lead.lead_id = l.lead_id)
where l.lead_id is null;

update shivay.mst_lead l
set attributed_customer_id = b.customer_id,
customer_segment = b.segment
from shivay.stg_email_cust_id_match b
where l.email = b.email
and l.attributed_customer_id is null;

update shivay.mst_lead l
set attributed_customer_id = b.customer_id,
customer_segment = b.customer_segment
from shivay.stg_phone_cust_id_match b
where l.day_phone = b.phone
and l.attributed_customer_id is null
and b.customer_rank  = 1;

update shivay.mst_lead l
set mktg_channel = 'DM/EMAIL'
from
(select * from shivay.reporting_cmp_campaign
where channel in ('DM','EMAIL') 
and program_group in ('CSELL','MEMB','RETN') 
) c 
where l.attributed_mktg_campaign = c.campaign_id
and l.mktg_channel = 'Anything';

update shivay.mst_lead
set mktg_channel = 'Organic'
where mktg_channel = 'Anything';

update shivay.mst_lead
set lead_create_date = 
case when mktg_channel in 
(
'HELOC ITA',
'Internal Transfers',
'Jumbo Refi',
'Servicing Transfers',
'VA IRRRL Digital',
'VA IRRRL Retail'
) then greatest(lead_create_date, last_action_taken_date) else lead_create_date end;

/*
update shivay.mst_lead l
set workable_lead = 'N'
where lead_source in
(
'Attorney',
'Bad Actor',
'Digital Apps',
'FARMS',
'FARMS -  Insurance Agents',
'FARMS -  Past Clients',
'FARMS -  PFR',
'FARMS -  Realtors',
'FARMS -  VIP Realtors',
'Guam',
'HELOC Balloon',
'Home Builders',
'Idomoo',
'Inbound',
'Incomplete Consumer Connect Submission',
'Jornaya Activate',
'Lead Form (General)',
'Others',
'PenFed Opt In Page',
'Realtors',
'Referral - Attorney',
'Referral - Auto',
'Referral - CPA Financial Advisors',
'Referral - Financial Centers',
'Referral - Home',
'Referral - Home Builders',
'Referral - Insurance Agents',
'Referral - Past Clients',
'Referral - PFR',
'Referral - Realtors',
'Referral - VIP Realtors',
'Retail',
'Salesforce Pipeline',
'Aged Pre-Approvals',
'AHRN',
'Employee Loan',
'Encompass Backlog',
'Encompass Holiday Promo',
'Financial Center leads',
'LO Vanity Page',
'PFR',
'Self Generated',
'Test',
'VIP Realtors'
)
and crm_system = 'VELOCIFY';

update shivay.mst_lead
set workable_lead = 'N'
where (lead_source like ('%Outbound%') or lead_source = 'Servicing Campaign')
and sales_channel not in ('RETAIL', 'DIGITAL')
and crm_system = 'VELOCIFY';

update shivay.mst_lead
set first_contact_made_type = 'LO No Contact';

update shivay.mst_lead
set first_contact_made_type = 'LO Contact'
where lead_status in
(
'Already working with MLO',
'Application',
'Application Approved Not Accepted',
'Application Denied',
'Application Received',
'Application Withdrawn',
'Closing',
'Conditionally Approved',
'Contact Disconnected',
'Contacted/Call Back',
'Encompass File Started',
'Encompass File Started - HELOC Pilot',
'File Closed For Incompleteness',
'Final Approved',
'Follow Up 1',
'Follow Up 2',
'Follow Up 3',
'Funded',
'Mortgage Processing Inquiry',
'New Warm Transfer',
'No Product Available',
'Origination',
'PA Contact Attempt 1',
'PA Contact Attempt 2',
'Pre-Approval',
'Pricing Scenario Provided',
'Processing',
'Processor Assigned',
'PS Contact 1',
'PS Follow Up 1',
'Quote Follow Up 1',
'Underwriting');

update shivay.mst_lead
set first_contact_made_type = 'LO Contact'
where lead_status in
(
'New Cold Transfer',
'Not Interested',
'Nurture',
'Pulled From LQ',
'Transfer Failed'
)
and sales_channel <> 'Unassigned';
*/
insert into shivay.stg_trg_tran_disposition_data 
select 
c.cell_id,
c.campaign_id,
l.attributed_customer_id as customer_id,
null as kit,
greatest(l.lead_create_date, l.last_action_taken_date) as drop_date,
l.lead_id,
'N' as processed_flag
from shivay.mst_lead l inner join
(select * from shivay.cmp_campaign where channel in ('OBTM', 'TRANSFERS') 
and program_group in ('TRIG','RETN')) c
on l.lead_source = c.campaign_id
left join shivay.stg_trg_tran_disposition_data s
on (l.lead_id = s.lead_id)
where s.lead_id is null;

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''9. Add Velocify Data'', null, current_timestamp)');

END;
$$;


ALTER PROCEDURE shivay.mst_9_add_leads() OWNER TO postgres;

--
-- TOC entry 483 (class 1255 OID 75522)
-- Name: pf_batch_conversion(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.pf_batch_conversion()
    LANGUAGE plpgsql
    AS $$BEGIN
    CALL shivay.pf_deluxe_daily_conversion();
END;$$;


ALTER PROCEDURE shivay.pf_batch_conversion() OWNER TO postgres;

--
-- TOC entry 481 (class 1255 OID 75457)
-- Name: pf_deluxe_daily_conversion(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.pf_deluxe_daily_conversion()
    LANGUAGE plpgsql
    AS $$
begin
TRUNCATE shivay.deluxe_daily_data_typed;
INSERT INTO shivay.deluxe_daily_data_typed
SELECT
	fname,
	lname,
	street1,
	street2,
	city,
	state,
	zip,
	zip4,
	level,
	orderrecordid,
	numeric_or_null(mtg08),
    numeric_or_null(equity08),
    numeric_or_null(mtg03),
    numeric_or_null(fico),
    numeric_or_null(ltv),
    numeric_or_null(mtg31),
    numeric_or_null(mtg33),
    numeric_or_null(mtg19),
    numeric_or_null(revolving_debt),
    numeric_or_null(owneroccupied),
    numeric_or_null(mtg13),
    numeric_or_null(mtg_rate),
    numeric_or_null(mtg_term),
    numeric_or_null(record_id),
    pf_segment,
    rap_filter,
	date_imported
FROM shivay.deluxe_daily_data;
end;
$$;


ALTER PROCEDURE shivay.pf_deluxe_daily_conversion() OWNER TO postgres;

--
-- TOC entry 454 (class 1255 OID 16467)
-- Name: pivotcode_sql(character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: penfed; Owner: postgres
--

CREATE FUNCTION shivay.pivotcode_sql(tablename character varying, rowc character varying, colc character varying, cellc character varying, celldatatype character varying, tblname character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
    dynsql1 varchar;
    dynsql2 varchar;
    columnlist varchar;
begin
    -- 1. retrieve list of column names.
    dynsql1 = 'select string_agg(distinct ''"''||'||colc||'||''" '||celldatatype||''','','' order by ''"''||'||colc||'||''" '||celldatatype||''') from '||tablename||';';
    execute dynsql1 into columnlist;
    -- 2. set up the crosstab query
    --tablename = REPLACE(text, ''', E'\\"')
    dynsql2 = 'drop table if exists '||  tblname  ||' ; create table ' || tblname   ||   ' as select * from crosstab (
 ''select '||rowc||','||colc||','||cellc||' from '||replace(tablename, chr(39),E'\'\'')||' group by 1,2 order by 1,2'',
 ''select distinct '||colc||' from '||replace(tablename, chr(39),E'\'\'')||' order by 1''
 )
 as newtable (
 '||rowc||' varchar,'||columnlist||'
 );';
    deallocate all;
    execute dynsql2;
    return dynsql2;
end
$$;


ALTER FUNCTION shivay.pivotcode_sql(tablename character varying, rowc character varying, colc character varying, cellc character varying, celldatatype character varying, tblname character varying) OWNER TO postgres;

--
-- TOC entry 455 (class 1255 OID 16468)
-- Name: prc_reporting_data(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.prc_reporting_data()
    LANGUAGE plpgsql
    AS $$
/* DROP */
begin
--rpt_cmp_campaign
DROP TABLE IF EXISTS shivay.reporting_cmp_campaign;
CREATE TABLE shivay.reporting_cmp_campaign AS
SELECT * FROM shivay.rpt_cmp_campaign;

--rpt_cmp_channel
DROP TABLE IF EXISTS shivay.reporting_cmp_channel;
CREATE TABLE shivay.reporting_cmp_channel AS
SELECT * FROM shivay.rpt_cmp_channel;

--rpt_cmp_creative
DROP TABLE IF EXISTS shivay.reporting_cmp_creative;
CREATE TABLE shivay.reporting_cmp_creative AS
SELECT * FROM shivay.rpt_cmp_creative;
	
--rpt_cmp_disposition_history
DROP TABLE IF EXISTS shivay.reporting_cmp_disposition_history;
CREATE TABLE shivay.reporting_cmp_disposition_history AS
SELECT * FROM shivay.rpt_cmp_disposition_history;
	
--rpt_cmp_offer
DROP TABLE IF EXISTS shivay.reporting_cmp_offer;
CREATE TABLE shivay.reporting_cmp_offer AS
SELECT * FROM shivay.rpt_cmp_offer;
	
--rpt_cmp_program
DROP TABLE IF EXISTS shivay.reporting_cmp_program;
CREATE TABLE shivay.reporting_cmp_program AS
SELECT * FROM shivay.rpt_cmp_program;
	
--rpt_jornaya_report
DROP TABLE IF EXISTS shivay.reporting_jornaya_report;
CREATE TABLE shivay.reporting_jornaya_report AS
SELECT * FROM shivay.rpt_jornaya_report;
	
--rpt_mst_app
DROP TABLE IF EXISTS shivay.reporting_mst_app;
CREATE TABLE shivay.reporting_mst_app AS
SELECT * FROM shivay.rpt_mst_app;
	
--rpt_mst_lead
DROP TABLE IF EXISTS shivay.reporting_mst_lead;
CREATE TABLE shivay.reporting_mst_lead AS
SELECT * FROM shivay.rpt_mst_lead;
	
--rpt_mst_loan
DROP TABLE IF EXISTS shivay.reporting_mst_loan;
CREATE TABLE shivay.reporting_mst_loan AS
SELECT * FROM shivay.rpt_mst_loan;
	
--rpt_pricing_offers
DROP TABLE IF EXISTS shivay.reporting_pricing_offers;
CREATE TABLE shivay.reporting_pricing_offers AS
SELECT * FROM shivay.rpt_pricing_offers;

--rpt_share_of_wallet
DROP TABLE IF EXISTS shivay.reporting_share_of_wallet;
CREATE TABLE shivay.reporting_share_of_wallet AS
SELECT * FROM shivay.rpt_share_of_wallet;

--rpt_pricing_summary
DROP TABLE IF EXISTS shivay.reporting_pricing_summary;
CREATE TABLE shivay.reporting_pricing_summary AS
SELECT * FROM shivay.rpt_pricing_summary;
	
--rpt_pricing_waterfall
DROP TABLE IF EXISTS shivay.reporting_pricing_waterfall;
CREATE TABLE shivay.reporting_pricing_waterfall AS
SELECT * FROM shivay.rpt_pricing_waterfall;
	
end;

/* TRUNCATE INSTEAD OF DROP
begin
--rpt_cmp_campaign
TRUNCATE shivay.reporting_cmp_campaign;
INSERT INTO shivay.reporting_cmp_campaign 
SELECT * FROM shivay.rpt_cmp_campaign;

--rpt_cmp_channel
TRUNCATE shivay.reporting_cmp_channel;
INSERT INTO shivay.reporting_cmp_channel 
SELECT * FROM shivay.rpt_cmp_channel;

--rpt_cmp_creative
TRUNCATE shivay.reporting_cmp_creative;
INSERT INTO shivay.reporting_cmp_creative 
SELECT * FROM shivay.rpt_cmp_creative;
	
--rpt_cmp_disposition_history
TRUNCATE shivay.reporting_cmp_disposition_history;
INSERT INTO shivay.reporting_cmp_disposition_history 
SELECT * FROM shivay.rpt_cmp_disposition_history;
	
--rpt_cmp_offer
TRUNCATE shivay.reporting_cmp_offer;
INSERT INTO shivay.reporting_cmp_offer 
SELECT * FROM shivay.rpt_cmp_offer;
	
--rpt_cmp_program
TRUNCATE shivay.reporting_cmp_program;
INSERT INTO shivay.reporting_cmp_program 
SELECT * FROM shivay.rpt_cmp_program;
	
--rpt_jornaya_report
TRUNCATE shivay.reporting_jornaya_report;
INSERT INTO shivay.reporting_jornaya_report 
SELECT * FROM shivay.rpt_jornaya_report;
	
--rpt_mst_app
TRUNCATE shivay.reporting_mst_app;
INSERT INTO shivay.reporting_mst_app 
SELECT * FROM shivay.rpt_mst_app;
	
--rpt_mst_lead
TRUNCATE shivay.reporting_mst_lead;
INSERT INTO shivay.reporting_mst_lead 
SELECT * FROM shivay.rpt_mst_lead;
	
--rpt_mst_loan
TRUNCATE shivay.reporting_mst_loan;
INSERT INTO shivay.reporting_mst_loan 
SELECT * FROM shivay.rpt_mst_loan;
	
--rpt_pricing_offers
TRUNCATE shivay.reporting_pricing_offers;
INSERT INTO shivay.reporting_pricing_offers 
SELECT * FROM shivay.rpt_pricing_offers;

--rpt_share_of_wallet
TRUNCATE shivay.reporting_share_of_wallet;
INSERT INTO shivay.reporting_share_of_wallet 
SELECT * FROM shivay.rpt_share_of_wallet;

--rpt_pricing_summary
TRUNCATE shivay.reporting_pricing_summary;
INSERT INTO shivay.reporting_pricing_summary 
SELECT * FROM shivay.rpt_pricing_summary;
	
--rpt_pricing_waterfall
TRUNCATE shivay.reporting_pricing_waterfall;
INSERT INTO shivay.reporting_pricing_waterfall 
SELECT * FROM shivay.rpt_pricing_waterfall;
	
end;
*/
$$;


ALTER PROCEDURE shivay.prc_reporting_data() OWNER TO postgres;

--
-- TOC entry 425 (class 1255 OID 16469)
-- Name: prepare_campaign_export(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.prepare_campaign_export()
    LANGUAGE plpgsql
    AS $$begin
DROP TABLE IF EXISTS shivay.campaign_export_data;
CREATE TABLE shivay.campaign_export_data AS SELECT * FROM shivay.campaign_export;
UPDATE shivay.meta_data
	SET value='1'
	WHERE name='campaign_export';
end;
$$;


ALTER PROCEDURE shivay.prepare_campaign_export() OWNER TO postgres;

--
-- TOC entry 456 (class 1255 OID 16470)
-- Name: pricing_run_report(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.pricing_run_report()
    LANGUAGE plpgsql
    AS $_$
BEGIN

    	execute 'truncate table shivay.pricing_waterfall';
	   	execute 'truncate table shivay.pricing_offers';
    	execute 'truncate table shivay.pricing_summary';		
		
		insert into shivay.PRICING_WATERFALL
		SELECT
		c.unique_id,
		portfolio || '-' || case when loan_type = 'V' then 'VA' else 'CONF' end as segment,
		case 
		when loan_status_code <> '1' or payoff_date is not null or unpaid_balance = 0 then '1001 - Not Active (payoffs, transfers, REOs)'
		when (LIEN_POSITION <> '01') then '1002 - Not First Lien'
		when (DELINQUENCY_12_MONTH_COUNT > 1) then '2001 - More than 1 DQ Last 12 months'
		when DELINQUENCY_DAYS_PAST_DUE > 30 then '2002 - Over 30 days past due'
		when (COALESCE(FORECLOSURE_FLAG,'N') = 'Y') then '2003 - Loans in Foreclosure'
		when (COALESCE(BANKRUPTCY_CODE,'N') = 'A') then '2004 - Loans in Bankruptcy'
		when (COALESCE(MOD_STATUS,'N') <> 'N') then '2005 - Loans in Modification'

		when PROP_ADDRESS_ID IS NULL or PROP_ADDRESS1 is null then '3001 - Incorrect Property Address'
		when (DO_NOT_MARKET_FLAG = 'Y') then '3002 - Do Not Market'

		when COALESCE(UNPAID_BALANCE,0) < 50000 then '4001 - UPB < $50K'
		when remaining_term < 60 then '4002 - Remaining Term < 60 months' 
		when COALESCE(C.CURRENT_PROPERTY_VALUE,0) = 0 THEN '4003 - No AVM available'
		when (ORIGINATION_DATE > (CURRENT_DATE - 91)) then '4004 - Originated last 90 days'

		when A.UNIQUE_ID IS NULL THEN '4005 - Could not be priced'
		when ls.customer_id is not null then '4006 - Lead in last 30 days'
		when ap.customer_id is not null then '4007 - App in last 30 days'
		else '9999-SELECTED' end AS EXCLUSION,

		case when dns_email_flag_prim = 'N' and email_address_prim like ('%@%') then 1 else 0 end as email_eligible,

		CASE WHEN COALESCE(UNPAID_BALANCE,0) < 20000 THEN '1. UPB: < 20K'
		WHEN COALESCE(UNPAID_BALANCE,0) < 50000 THEN '2. UPB: 20K-50K'
		WHEN COALESCE(UNPAID_BALANCE,0) < 100000 THEN '3. UPB: 50K-100K'
		WHEN COALESCE(UNPAID_BALANCE,0) < 150000 THEN '4. UPB: 100K-150K'
		ELSE '5. UPB: 150K+' END AS UPB,

		CASE WHEN interest_rate < 3 THEN '1. RATE: < 3.0%' 
		WHEN interest_rate < 4 THEN '2. RATE: 3.0% - 4.0%'
		WHEN interest_rate < 5 THEN '3. RATE: 4.0% - 5.0%'
		WHEN interest_rate < 6 THEN '4. RATE: 5.0% - 6.0%'
		ELSE '5. RATE: 6.0%+' END AS RATE,

		case when ltv < 50 then '1. LTV: <50%'
		when ltv < 80 then '2. LTV: 50% - 80%'
		when ltv < 97 then '3. LTV: 80% - 97%'
		else '4. LTV: >97%' end as LTV,
		unpaid_balance,
		loan_amount

		FROM shivay.mst_loan C LEFT JOIN
		(SELECT unique_id, count(*) as cnt FROM shivay.PRICING_OUTPUT_TAB group by unique_id) A
		ON (C.unique_id = A.UNIQUE_ID) 
		LEFT JOIN 
		(select distinct customer_id from shivay.cmp_suppression where suppression_type like ('%Lead%')) LS
		on (c.customer_id_prim = ls.customer_id)
		LEFT JOIN 
		(select distinct customer_id from shivay.cmp_suppression where suppression_type like ('%App%')) AP
		on (c.customer_id_prim = ap.customer_id)
		where prop_address_id is not null 
		and lien_position = '01';
		
		insert into shivay.PRICING_OFFERS
		WITH PI AS
		(
			SELECT
			X.UNIQUE_ID,
			X.NEW_PRODUCT_DESCRIPTION,
			X.SCENARIO_ID
			FROM
			(
				SELECT B.*,
				ROW_NUMBER() OVER(PARTITION BY B.UNIQUE_ID ORDER BY B.NEW_PIMI_SAVINGS_MO DESC) AS RANK
				FROM shivay.PRICING_OUTPUT_TAB B
				WHERE NEW_LOAN_PURPOSE = 'Rate Term Refinance'
				AND NEW_PIMI_SAVINGS_MO >= 75
				AND NEW_TERM_REDUCTION >= -90
				AND NEW_LOAN_AMOUNT >= 50000
				AND NEW_PRODUCT_DESCRIPTION NOT LIKE ('%JUMBO%')
			) X
			WHERE X.RANK = 1
		),
		TE AS
		(
			SELECT
			X.UNIQUE_ID,
			X.NEW_PRODUCT_DESCRIPTION,
			X.SCENARIO_ID
			FROM
			(
				SELECT B.*,
				ROW_NUMBER() OVER(PARTITION BY B.UNIQUE_ID ORDER BY B.NEW_PIMI_SAVINGS_MO DESC) AS RANK
				FROM shivay.PRICING_OUTPUT_TAB B
				WHERE NEW_LOAN_PURPOSE = 'Rate Term Refinance'
				AND NEW_PIMI_SAVINGS_MO >= 75
				AND NEW_TERM_REDUCTION > -90
				AND NEW_LOAN_AMOUNT >= 50000
				AND NEW_PRODUCT_DESCRIPTION NOT LIKE ('%JUMBO%')
			) X
			WHERE X.RANK = 1
		),
		TR AS
		(
			SELECT
			X.UNIQUE_ID,
			X.NEW_PRODUCT_DESCRIPTION,
			X.SCENARIO_ID
			FROM
			(
				SELECT B.*,
				ROW_NUMBER() OVER(PARTITION BY B.UNIQUE_ID ORDER BY B.NEW_PIMI_SAVINGS_MO DESC) AS RANK
				FROM shivay.PRICING_OUTPUT_TAB B
				WHERE NEW_LOAN_PURPOSE = 'Rate Term Refinance'
				AND NEW_TERM_REDUCTION > 24
				AND NEW_LOL_SAVINGS >= 15000
				AND NEW_PIMI_SAVINGS_MO >= -50
				AND NEW_LOAN_AMOUNT >= 50000
				AND NEW_PRODUCT_DESCRIPTION NOT LIKE ('%JUMBO%')
			) X
			WHERE X.RANK = 1
		),
		CO AS 
		(
			SELECT
			X.UNIQUE_ID,
			X.NEW_PRODUCT_DESCRIPTION,
			X.SCENARIO_ID
			FROM
			(
				SELECT B.*,
				ROW_NUMBER() OVER(PARTITION BY B.UNIQUE_ID ORDER BY B.NEW_PIMI_SAVINGS_MO DESC) AS RANK
				FROM shivay.PRICING_OUTPUT_TAB B
				WHERE NEW_LOAN_PURPOSE = 'Cash-Out'
				AND NEW_CASHOUT >= 20000
				AND NEW_CASHOUT <= 250000
			) X
			WHERE X.RANK = 1
		)
		SELECT
		L.UNIQUE_ID,
		CASE WHEN PI.UNIQUE_ID IS NOT NULL THEN 'Rate Refi' ELSE NULL END AS RT,
		CASE WHEN TE.UNIQUE_ID IS NOT NULL THEN 'Term Ext.' ELSE NULL END AS TE,
		CASE WHEN TR.UNIQUE_ID IS NOT NULL THEN 'Term Red.' ELSE NULL END AS TR,
		CASE WHEN CO.UNIQUE_ID IS NOT NULL THEN 'Cash Out' ELSE NULL END AS CO,
		PI.NEW_PRODUCT_DESCRIPTION AS PROD_RT,
		TE.NEW_PRODUCT_DESCRIPTION AS PROD_TE,
		TR.NEW_PRODUCT_DESCRIPTION AS PROD_TR,
		CO.NEW_PRODUCT_DESCRIPTION AS PROD_CO,
		PI.SCENARIO_ID AS ID_RT,
		TE.SCENARIO_ID AS ID_TE,
		TR.SCENARIO_ID AS ID_TR,
		CO.SCENARIO_ID AS ID_CO
		FROM shivay.PRICING_WATERFALL L
		LEFT JOIN PI ON L.UNIQUE_ID = PI.UNIQUE_ID
		LEFT JOIN TE ON L.UNIQUE_ID = TE.UNIQUE_ID
		LEFT JOIN TR ON L.UNIQUE_ID = TR.UNIQUE_ID
		LEFT JOIN CO ON L.UNIQUE_ID = CO.UNIQUE_ID;

		insert into shivay.PRICING_SUMMARY
		SELECT 
		W.SEGMENT,
		W.EXCLUSION,
		W.UPB AS CURRENT_UPB,
		W.RATE AS CURRENT_RATE,
		W.LTV AS CURRENT_LTV,
		CASE WHEN (O.RT IS NOT NULL OR O.TE IS NOT NULL) AND O.CO IS NOT NULL AND O.TR IS NOT NULL THEN '1. Mortgage Review (3 Options)'
		WHEN (
			  ((O.RT IS NOT NULL OR O.TE IS NOT NULL) AND O.CO IS NOT NULL AND O.TR IS NOT NULL) 
			  OR ((O.RT IS NOT NULL OR O.TE IS NOT NULL) AND O.CO IS NOT NULL)
			  OR ((O.RT IS NOT NULL OR O.TE IS NOT NULL) AND O.TR IS NOT NULL)
			  ) THEN '2. Mortgage Review (Any 2 Offers)'
		WHEN (O.RT IS NOT NULL OR O.TE IS NOT NULL) AND (O.PROD_RT LIKE ('%VA%') OR O.PROD_TE LIKE ('%VA%')) THEN '3. IRRL - PI Savings Offer (>$50)'
		WHEN (O.RT IS NOT NULL OR O.TE IS NOT NULL) /*AND O.CO IS NULL*/ THEN '4. PI Savings Offer (>$50)'
		WHEN O.CO IS NOT NULL THEN '5. Cash-Out ($20K - $250K)'
		ELSE '6. Acct Review' END AS KIT, 
		COALESCE(O.RT,'*') || ' - ' || COALESCE(O.TE,'*')  || ' - ' || COALESCE(O.TR,'*') || ' - ' || COALESCE(O.CO,'*') AS OFFER,
		O.RT AS PI_SAV,
		O.TE AS TERM_EXT,
		O.TR AS TERM_RED,
		O.CO AS CASHOUT,
		O.PROD_RT AS PI_SAV_PROD,
		O.PROD_TE AS TERM_EXT_PROD,
		O.PROD_TR AS TERM_RED_PROD,
		O.PROD_CO AS CASHOUT_PROD,
		COUNT(*) AS NO_OF_LOANS,
		sum(email_eligible) as EMAIL_ELIGIBLE_CNT,
		CURRENT_DATE AS DATE_ADDED,
		nextval('shivay.campaign_rpt_seq') as rec_id
		FROM shivay.PRICING_WATERFALL W LEFT JOIN shivay.PRICING_OFFERS O
		ON W.UNIQUE_ID = O.UNIQUE_ID
		GROUP BY 
		W.SEGMENT,
		W.EXCLUSION,
		W.UPB,
		W.RATE,
		W.LTV,
		CASE WHEN (O.RT IS NOT NULL OR O.TE IS NOT NULL) AND O.CO IS NOT NULL AND O.TR IS NOT NULL THEN '1. Mortgage Review (3 Options)'
		WHEN (
			  ((O.RT IS NOT NULL OR O.TE IS NOT NULL) AND O.CO IS NOT NULL AND O.TR IS NOT NULL) 
			  OR ((O.RT IS NOT NULL OR O.TE IS NOT NULL) AND O.CO IS NOT NULL)
			  OR ((O.RT IS NOT NULL OR O.TE IS NOT NULL) AND O.TR IS NOT NULL)
			  ) THEN '2. Mortgage Review (Any 2 Offers)'
		WHEN (O.RT IS NOT NULL OR O.TE IS NOT NULL) AND (O.PROD_RT LIKE ('%VA%') OR O.PROD_TE LIKE ('%VA%')) THEN '3. IRRL - PI Savings Offer (>$50)'
		WHEN (O.RT IS NOT NULL OR O.TE IS NOT NULL) /*AND O.CO IS NULL*/ THEN '4. CONV - PI Savings Offer (>$50)'
		WHEN O.CO IS NOT NULL THEN '5. Cash-Out ($20K - $250K)'
		ELSE '6. Acct Review' END,
		COALESCE(O.RT,'*') || ' - ' || COALESCE(O.TE,'*')  || ' - ' || COALESCE(O.TR,'*') || ' - ' || COALESCE(O.CO,'*'),
		O.RT,
		O.TE,
		O.TR,
		O.CO,
		O.PROD_RT,
		O.PROD_TE,
		O.PROD_TR,
		O.PROD_CO;

insert into shivay.pricing_summary

select 
'All' as segment,
'0001 - Not unique address' as exclusion,
null as current_upb,
null as current_rate,
null as current_ltv,
null as kit,
null as offer,
null as pi_sav,
null as term_ext,
null as term_red,
null as cashout,
null as pi_sav_prod,
null as term_ext_prod,
null as term_red_prod,
null as cashout_prod,
a.cnt - b.cnt as no_of_loans,
0 as email_eligible_cnt,
current_date as date_added,
nextval('shivay.campaign_rpt_seq') as rec_id
from
(select count(*) as cnt from customer_data_typed) a,
(select count(*) as cnt from shivay.bk_cust_export_data
where address_nbr not like ('APP%')
and address_nbr not like ('VEL%')) b

union all

select 
'All' as segment,
case when a.state_cd in ('PR', 'GU') then '0002 - Not Matched BK RAP (PR/ GU)'
when (upper(a.scrub_address_line_1) like ('%BOX%') 
	  or upper(a.scrub_address_line_1) like ('%PO%') 
	  or upper(a.scrub_address_line_1) like ('%P.O%')) 
	  then '0002 - Not Matched BK RAP (P.O. Box)'
when st.state_cd is null then '0002 - Not Matched BK RAP (Invalid state)'
else '0002 - Not Matched BK RAP (Others)' end as exclusion,
null as current_upb,
null as current_rate,
null as current_ltv,
null as kit,
null as offer,
null as pi_sav,
null as term_ext,
null as term_red,
null as cashout,
null as pi_sav_prod,
null as term_ext_prod,
null as term_red_prod,
null as cashout_prod,
count(*) as no_of_loans,
0 as email_eligible_cnt,
current_date as date_added,
nextval('shivay.campaign_rpt_seq') as rec_id
from shivay.bk_cust_export_data a left join 
shivay.bk_rap_cust_data b on
(a.address_nbr = b.customer_id)
left join
(select distinct(state) as state_cd from pricing.zip_code_tab) as st
on (a.state_cd = st.state_cd)
where b.customer_id is null
and a.address_nbr not like ('APP%')
and a.address_nbr not like ('VEL%')
group by
case when a.state_cd in ('PR', 'GU') then '0002 - Not Matched BK RAP (PR/ GU)'
when (upper(a.scrub_address_line_1) like ('%BOX%') 
	  or upper(a.scrub_address_line_1) like ('%PO%') 
	  or upper(a.scrub_address_line_1) like ('%P.O%')) 
	  then '0002 - Not Matched BK RAP (P.O. Box)'
when st.state_cd is null then '0002 - Not Matched BK RAP (Invalid state)'
else '0002 - Not Matched BK RAP (Others)' end

union all

select 
'All' as segment,
'0003 - No Active First Lien (BK RAP)' as exclusion,
null as current_upb,
null as current_rate,
null as current_ltv,
null as kit,
null as offer,
null as pi_sav,
null as term_ext,
null as term_red,
null as cashout,
null as pi_sav_prod,
null as term_ext_prod,
null as term_red_prod,
null as cashout_prod,
a.cnt - b.cnt as no_of_loans,
0 as email_eligible_cnt,
current_date as date_added,
nextval('shivay.campaign_rpt_seq') as rec_id
from
(select count(*) as cnt from shivay.bk_rap_cust_data where customer_id not like ('APP%') and customer_id not like ('VEL%')) a,
(select count(*) as cnt from shivay.mst_loan where lien_position = '01' and prop_address_id is not null) b

union all

select 
'All' as segment,
'0004 - Mktg Exclusions' as exclusion,
null as current_upb,
null as current_rate,
null as current_ltv,
null as kit,
null as offer,
null as pi_sav,
null as term_ext,
null as term_red,
null as cashout,
null as pi_sav_prod,
null as term_ext_prod,
null as term_red_prod,
null as cashout_prod,
sum(no_of_loans) as no_of_loans,
0 as email_eligible_cnt,
current_date as date_added,
nextval('shivay.campaign_rpt_seq') as rec_id
from shivay.pricing_summary
where segment <> 'All'
and exclusion not like ('9999%')
and exclusion not like ('%Could not be priced%')

union all

select 
'All' as segment,
'0005 - Not Priced (High LTV)' as exclusion,
null as current_upb,
null as current_rate,
null as current_ltv,
null as kit,
null as offer,
null as pi_sav,
null as term_ext,
null as term_red,
null as cashout,
null as pi_sav_prod,
null as term_ext_prod,
null as term_red_prod,
null as cashout_prod,
sum(no_of_loans) as no_of_loans,
0 as email_eligible_cnt,
current_date as date_added,
nextval('shivay.campaign_rpt_seq') as rec_id
from shivay.pricing_summary
where segment <> 'All'
and exclusion like ('%Could not be priced%')

union all

select 
'All' as segment,
'0006 - Marketable (Refi)' as exclusion,
null as current_upb,
null as current_rate,
null as current_ltv,
null as kit,
null as offer,
null as pi_sav,
null as term_ext,
null as term_red,
null as cashout,
null as pi_sav_prod,
null as term_ext_prod,
null as term_red_prod,
null as cashout_prod,
sum(no_of_loans) as no_of_loans,
0 as email_eligible_cnt,
current_date as date_added,
nextval('shivay.campaign_rpt_seq') as rec_id
from shivay.pricing_summary
where segment <> 'All'
and exclusion like ('9999%')
;

execute format('insert into public.process_log values(''PENFED'', ''MASTER TABS'', ''10. Update Waterfall'', null, current_timestamp)');

END;
$_$;


ALTER PROCEDURE shivay.pricing_run_report() OWNER TO postgres;

--
-- TOC entry 493 (class 1255 OID 33463)
-- Name: servicing_transfer_file(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.servicing_transfer_file()
    LANGUAGE plpgsql
    AS $$
BEGIN

insert into shivay.stg_servicing_transfers
select
l.account_number,
m.customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'PI Savings' as Offer,
p.credit_score,
p.rate_date,
p.lock_period,
p.new_loan_purpose,
p.new_program_type,
p.new_product_id,
p.new_product_description,
p.new_amort_type,
p.new_term,
p.new_loan_amount,
p.new_ltv,
p.new_rate,
p.new_points_pct,
p.new_points_dol,
p.new_fees_total,
p.new_pi,
p.new_pi_savings_mo,
p.new_cashout,
p.new_lol_savings,
p.new_term_reduction,
current_date as file_date
from shivay.mst_loan l inner join 
shivay.pricing_waterfall w on (l.unique_id = w.unique_id)
inner join 
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_RT)
) p on (l.unique_id = p.unique_id)
left join (select account_number from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
where w.exclusion like ('9999%')
and l.portfolio = 'On Us'
and s.account_number is null;

insert into shivay.stg_servicing_transfers
select
l.account_number,
m.customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'PI Savings' as Offer,
p.credit_score,
p.rate_date,
p.lock_period,
p.new_loan_purpose,
p.new_program_type,
p.new_product_id,
p.new_product_description,
p.new_amort_type,
p.new_term,
p.new_loan_amount,
p.new_ltv,
p.new_rate,
p.new_points_pct,
p.new_points_dol,
p.new_fees_total,
p.new_pi,
p.new_pi_savings_mo,
p.new_cashout,
p.new_lol_savings,
p.new_term_reduction,
current_date as file_date
from shivay.mst_loan l inner join 
shivay.pricing_waterfall w on (l.unique_id = w.unique_id)
inner join 
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_TE)
) p on (l.unique_id = p.unique_id)
left join (select account_number from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
where w.exclusion like ('9999%')
and l.portfolio = 'On Us'
and s.account_number is null
;

insert into shivay.stg_servicing_transfers
select
l.account_number,
m.customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'PI Savings' as Offer,
p.credit_score,
p.rate_date,
p.lock_period,
p.new_loan_purpose,
p.new_program_type,
p.new_product_id,
p.new_product_description,
p.new_amort_type,
p.new_term,
p.new_loan_amount,
p.new_ltv,
p.new_rate,
p.new_points_pct,
p.new_points_dol,
p.new_fees_total,
p.new_pi,
p.new_pi_savings_mo,
p.new_cashout,
p.new_lol_savings,
p.new_term_reduction,
current_date as file_date
from shivay.mst_loan l inner join 
shivay.pricing_waterfall w on (l.unique_id = w.unique_id)
inner join 
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_TR)
) p on (l.unique_id = p.unique_id)
left join (select account_number from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
where w.exclusion like ('9999%')
and l.portfolio = 'On Us'
and s.account_number is null
;

insert into shivay.stg_servicing_transfers
select
l.account_number,
m.customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'Cashout' as Offer,
p.credit_score,
p.rate_date,
p.lock_period,
p.new_loan_purpose,
p.new_program_type,
p.new_product_id,
p.new_product_description,
p.new_amort_type,
p.new_term,
p.new_loan_amount,
p.new_ltv,
p.new_rate,
p.new_points_pct,
p.new_points_dol,
p.new_fees_total,
p.new_pi,
p.new_pi_savings_mo,
p.new_cashout,
p.new_lol_savings,
p.new_term_reduction,
current_date as file_date
from shivay.mst_loan l inner join 
shivay.pricing_waterfall w on (l.unique_id = w.unique_id)
inner join 
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_CO)
) p on (l.unique_id = p.unique_id)
left join (select account_number from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
where w.exclusion like ('9999%')
and l.portfolio = 'On Us'
and s.account_number is null
;

insert into shivay.stg_servicing_transfers
select
l.account_number,
m.customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'General' as Offer,
null as credit_score,
null as rate_date,
null as lock_period,
null as new_loan_purpose,
null as new_program_type,
null as new_product_id,
null as new_product_description,
null as new_amort_type,
null as new_term,
null as new_loan_amount,
null as new_ltv,
null as new_rate,
null as new_points_pct,
null as new_points_dol,
null as new_fees_total,
null as new_pi,
null as new_pi_savings_mo,
null as new_cashout,
null as new_lol_savings,
null as new_term_reduction,
current_date as file_date
from shivay.mst_loan l 
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
left join (select distinct account_number from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
where portfolio = 'On Us'
and loan_status_code = '1'
and lien_position = '01'
and delinquency_12_month_count <= 1
and delinquency_days_past_due <= 30
and prop_address_id is not null
and customer_id_prim is not null
and unpaid_balance >= 50000
and remaining_term >= 60
and origination_date <= current_date - 90
and current_property_value > 0
and bankruptcy_code = 'N'
and foreclosure_flag = 'N'
and ltv <= 90
and s.account_number is null;

insert into shivay.stg_servicing_transfers
select
l.account_number,
m.customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'Debt Consolidation' as Offer,
null as credit_score,
null as rate_date,
null as lock_period,
null as new_loan_purpose,
null as new_program_type,
null as new_product_id,
null as new_product_description,
null as new_amort_type,
null as new_term,
null as new_loan_amount,
null as new_ltv,
null as new_rate,
null as new_points_pct,
null as new_points_dol,
null as new_fees_total,
null as new_pi,
null as new_pi_savings_mo,
null as new_cashout,
null as new_lol_savings,
null as new_term_reduction,
current_date as file_date
from shivay.mst_loan l 
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
left join (select distinct account_number from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
where portfolio = 'On Us'
and loan_status_code = '1'
and lien_position = '02'
and delinquency_12_month_count <= 1
and delinquency_days_past_due <= 30
and unpaid_balance > 0
--and prop_address_id is not null
and customer_id_prim is not null
and origination_date <= current_date - 90
and bankruptcy_code = 'N'
and foreclosure_flag = 'N'
and s.account_number is null
;

/*
select 
s.account_number,
s.customer_id,
s.last_name_prim,
s.first_name_prim,
s.home_phone_prim,
s.work_phone_prim,
s.cell_phone_prim,
l.email_address_prim,
s.prop_state,
s.offer,
s.rate_date,
s.new_loan_purpose,
s.new_product_description,
s.new_term,
s.new_rate,
s.new_points_pct
from shivay.stg_servicing_transfers s inner join shivay.mst_loan l on (s.account_number = l.account_number)
left join (select distinct account_number from shivay.stg_servicing_transfers where file_date < current_date) s1
on (s.account_number = s1.account_number)
where file_date = current_date
--and s1.account_number is null
;
*/

END;
$$;


ALTER PROCEDURE shivay.servicing_transfer_file() OWNER TO postgres;

--
-- TOC entry 492 (class 1255 OID 64585)
-- Name: trg_1_insert_credit_trigger_monitoring(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.trg_1_insert_credit_trigger_monitoring()
    LANGUAGE plpgsql
    AS $$
BEGIN

execute 'truncate table shivay.trg_deluxe_monthly_data';

insert into shivay.stg_credit_trigger_monitoring
select
b.customer_id,
nextval('shivay.deluxe_rec_id') as RECORD_ID,
b.FIRST_NAME,
b.LAST_NAME,
case when c.customer_id is not null then c.property_address else b.address_line_1 end as ADDRESS_1,
null as ADDRESS_2,
case when c.customer_id is not null then c.property_city else b.city end as CITY,
case when c.customer_id is not null then c.property_state else b.state end as STATE,
case when c.customer_id is not null then c.property_zip else b.zip::text end as ZIP,
case when upper(c.pos_1st_lender) like ('PENTAGON%') then 'On Us' else 'Not On Us' end as PF_SEGMENT,
case when c.customer_id is null then 'Not matched' when c.pos_1st_recording_date is null then 'No first lien' else 'First lien' end as RAP_FILTER,
current_date as file_date,
row_number() over(partition by b.customer_id order by b.dob) as customer_rank,
c.pos_1st_lender as lender
from customer_data_typed b left join shivay.bk_rap_cust_data c
on (b.customer_id = c.customer_id)
left join (select distinct customer_id from shivay.cmp_suppression) s
on (b.customer_id = s.customer_id) 
inner join (select customer_id, count(*) as cnt from shivay.stg_customer_bsa_id group by 1) bsa
on (b.customer_id = bsa.customer_id) 
inner join (select customer_id, count(*) as cnt from shivay.stg_email_cust_id_match group by 1) email
on (b.customer_id = email.customer_id) 
inner join (select customer_id, count(*) as cnt from shivay.stg_phone_cust_id_match group by 1) phone
on (b.customer_id = phone.customer_id) 
where pricing.months_between(b.dob, current_date) >= 240
and s.customer_id is null
and b.advert_indicator is null
and b.advertising_ind is null
and upper(b.address_line_1) not like ('%BOX%')
and upper(b.address_line_1) not like ('%PO%')
and upper(b.address_line_1) not like ('%P.O.%')
and upper(b.state) not in ('PR','GU');

insert into shivay.trg_deluxe_monthly_data
select
RECORD_ID,
FIRST_NAME,
LAST_NAME,
ADDRESS_1,
ADDRESS_2,
CITY,
STATE,
ZIP,
PF_SEGMENT,
RAP_FILTER
from shivay.stg_credit_trigger_monitoring 
where customer_rank = 1 
and file_date = (select max(file_date) from shivay.stg_credit_trigger_monitoring);

UPDATE shivay.meta_data
	SET value='1'
	WHERE name='monthly_member';
END;
$$;


ALTER PROCEDURE shivay.trg_1_insert_credit_trigger_monitoring() OWNER TO postgres;

--
-- TOC entry 487 (class 1255 OID 64604)
-- Name: trg_2_insert_jornaya_trigger_monitoring(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.trg_2_insert_jornaya_trigger_monitoring()
    LANGUAGE plpgsql
    AS $$
BEGIN

insert into shivay.stg_jornaya_monitoring_file
select
null as Recordid,
phone01,
phone02,
phone03,
null as phone04,
email01,
email02,
email03,
b.customer_id,
pos_1st_est_loan_balance as unpaid_balance,
round(pos_1st_int_rate_used,3) as interest_rate,
case when upper(pos_1st_lender) like ('PENTAGON%') then 'On Us' else 'Not On Us' end as portfolio,
case when pos_1st_loan_type = 'V' then 'V' else 'C' end as loan_type,
first_name as member_first_name,
last_name as member_last_name,
property_address as address_1,
property_city as city,
property_state as state,
property_zip as zip,
current_date as file_date,
row_number() over(partition by b.customer_id order by property_zip) as customer_rank
from shivay.bk_rap_cust_data a inner join 
customer_data_typed b
on (a.customer_id = b.customer_id)
inner join (select customer_id, count(*) as cnt from shivay.stg_customer_bsa_id group by 1) c
on (a.customer_id = c.customer_id)
left join (select customer_id, count(*) as cnt from shivay.cmp_suppression group by 1) s
on (a.customer_id = s.customer_id)
inner join 
(
	select 
	customer_id,
	max(case when rk = 1 then phone else null end) as phone01,
	max(case when rk = 2 then phone else null end) as phone02,
	max(case when rk = 3 then phone else null end) as phone03
	from
	(
	select
	customer_id,
	phone,
	row_number() over(partition by customer_id order by phone) as rk
	from shivay.stg_phone_cust_id_match
	where customer_rank = 1
	) z group by customer_id
) ph
on (a.customer_id = ph.customer_id)
inner join 
(
	select 
	customer_id,
	max(case when rk = 1 then email else null end) as email01,
	max(case when rk = 2 then email else null end) as email02,
	max(case when rk = 3 then email else null end) as email03
	from
	(
	select
	customer_id,
	email,
	row_number() over(partition by customer_id order by email) as rk
	from shivay.stg_email_cust_id_match
	where customer_rank = 1
	) z group by customer_id
) em
on (a.customer_id = em.customer_id)

where b.advert_indicator is null
and b.advertising_ind is null
and s.customer_id is null
and pricing.months_between(dob, current_date) >= 240;

END;
$$;


ALTER PROCEDURE shivay.trg_2_insert_jornaya_trigger_monitoring() OWNER TO postgres;

--
-- TOC entry 484 (class 1255 OID 64605)
-- Name: trg_3_insert_servicing_monitoring(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.trg_3_insert_servicing_monitoring()
    LANGUAGE plpgsql
    AS $$
BEGIN

insert into shivay.stg_servicing_transfers
select
l.account_number,
m.prim_borr_member_number::text as customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'PI Savings' as Offer,
p.credit_score,
p.rate_date,
p.lock_period,
p.new_loan_purpose,
p.new_program_type,
p.new_product_id,
p.new_product_description,
p.new_amort_type,
p.new_term,
p.new_loan_amount,
p.new_ltv,
p.new_rate,
p.new_points_pct,
p.new_points_dol,
p.new_fees_total,
p.new_pi,
p.new_pi_savings_mo,
p.new_cashout,
p.new_lol_savings,
p.new_term_reduction,
current_Date as file_date
from shivay.mst_loan l inner join 
shivay.pricing_waterfall w on (l.unique_id = w.unique_id)
inner join 
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_RT)
) p on (l.unique_id = p.unique_id)
left join (select * from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
where w.exclusion like ('9999%')
and l.portfolio = 'On Us'
and s.account_number is null;

insert into shivay.stg_servicing_transfers
select
l.account_number,
m.prim_borr_member_number::text as customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'PI Savings' as Offer,
p.credit_score,
p.rate_date,
p.lock_period,
p.new_loan_purpose,
p.new_program_type,
p.new_product_id,
p.new_product_description,
p.new_amort_type,
p.new_term,
p.new_loan_amount,
p.new_ltv,
p.new_rate,
p.new_points_pct,
p.new_points_dol,
p.new_fees_total,
p.new_pi,
p.new_pi_savings_mo,
p.new_cashout,
p.new_lol_savings,
p.new_term_reduction,
current_date as file_date
from shivay.mst_loan l inner join 
shivay.pricing_waterfall w on (l.unique_id = w.unique_id)
inner join 
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_TE)
) p on (l.unique_id = p.unique_id)
left join (select * from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
where w.exclusion like ('9999%')
and l.portfolio = 'On Us'
and s.account_number is null
;
insert into shivay.stg_servicing_transfers
select
l.account_number,
m.prim_borr_member_number::text as customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'PI Savings' as Offer,
p.credit_score,
p.rate_date,
p.lock_period,
p.new_loan_purpose,
p.new_program_type,
p.new_product_id,
p.new_product_description,
p.new_amort_type,
p.new_term,
p.new_loan_amount,
p.new_ltv,
p.new_rate,
p.new_points_pct,
p.new_points_dol,
p.new_fees_total,
p.new_pi,
p.new_pi_savings_mo,
p.new_cashout,
p.new_lol_savings,
p.new_term_reduction,
current_date as file_date 
from shivay.mst_loan l inner join 
shivay.pricing_waterfall w on (l.unique_id = w.unique_id)
inner join 
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_TR)
) p on (l.unique_id = p.unique_id)
left join (select * from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
where w.exclusion like ('9999%')
and l.portfolio = 'On Us'
and s.account_number is null
;

insert into shivay.stg_servicing_transfers
select
l.account_number,
m.prim_borr_member_number::text as customer_id,
l.last_name_prim,
l.first_name_prim,
l.home_phone_prim,
l.work_phone_prim,
l.cell_phone_prim,
l.prop_state,
'Cashout' as Offer,
p.credit_score,
p.rate_date,
p.lock_period,
p.new_loan_purpose,
p.new_program_type,
p.new_product_id,
p.new_product_description,
p.new_amort_type,
p.new_term,
p.new_loan_amount,
p.new_ltv,
p.new_rate,
p.new_points_pct,
p.new_points_dol,
p.new_fees_total,
p.new_pi,
p.new_pi_savings_mo,
p.new_cashout,
p.new_lol_savings,
p.new_term_reduction,
current_date as file_date
from shivay.mst_loan l inner join 
shivay.pricing_waterfall w on (l.unique_id = w.unique_id)
inner join 
(
	SELECT P.*
	FROM shivay.PRICING_OUTPUT_TAB P INNER JOIN shivay.PRICING_OFFERS O
	ON (P.SCENARIO_ID = O.ID_CO)
) p on (l.unique_id = p.unique_id)
left join (select * from shivay.stg_servicing_transfers where file_date = current_date) s
on (l.account_number = s.account_number)
inner join public.mortgage_data_typed m
on (l.account_number = m.account_number::text)
where w.exclusion like ('9999%')
and l.portfolio = 'On Us'
and s.account_number is null;
/*
select
a.account_number,
a.customer_id,
a.last_name_prim,
a.first_name_prim,
a.home_phone_prim,
a.work_phone_prim,
a.cell_phone_prim,
l.email_address_prim,
a.prop_state,
a.offer,
a.rate_date,
a.new_loan_purpose,
a.new_product_description,
a.new_term,
a.new_rate,
a.new_points_pct
from 
(select * from shivay.stg_servicing_transfers where file_date = current_date) a left join 
(select * from shivay.stg_servicing_transfers where file_date = '9/23/2021') b
on (a.account_number = b.account_number)
inner join shivay.mst_loan l
on (a.account_number = l.account_number)
where b.account_number is null;*/
END;
$$;


ALTER PROCEDURE shivay.trg_3_insert_servicing_monitoring() OWNER TO postgres;

--
-- TOC entry 489 (class 1255 OID 74292)
-- Name: trg_4_1_insert_credit_trigger_records(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.trg_4_1_insert_credit_trigger_records()
    LANGUAGE plpgsql
    AS $$
BEGIN

With 
rates as
(
	SELECT
	6 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	100000 AS P_AMT,
	360 AS P_TERM,
	79.99 AS P_LTV_MIN,
	80.01 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .5 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.5
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	5 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	100000 AS P_AMT,
	360 AS P_TERM,
	99.99 AS P_LTV_MIN,
	100.01 AS P_LTV_MAX,
	rate AS P_RATE,
	points AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('30 Year Fixed VA')
			and points >= 0
		) z where rnk = 1
	) x	
	UNION ALL
	SELECT
	1 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	0 AS P_LTV_MIN,
	90.01 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .25 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('30 Year Fixed VA')
			and points >= -0.25
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	2 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	0 AS _LTV_MIN,
	90.01 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .25 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('30 Year Fixed VA')
			and points >= -0.25
		) z where rnk = 1
	) x
--CONF REFI

	UNION ALL
	SELECT
	3 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	70.01 as P_LTV_MIN,
	80 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .375 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.375
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	3 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	60.01 as P_LTV_MIN,
	70 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .25 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.25
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	3 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	0 as P_LTV_MIN,
	60 AS P_LTV_MAX,
	rate AS P_RATE,
	points + 0 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= 0
		) z where rnk = 1
	) x

	UNION ALL
	SELECT
	4 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	70.01 as P_LTV_MIN,
	80 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .375 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.375
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	4 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	60.01 as P_LTV_MIN,
	70 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .25 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.25
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	4 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	0 as P_LTV_MIN,
	60 AS P_LTV_MAX,
	rate AS P_RATE,
	points + 0 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= 0
		) z where rnk = 1
	) x
),

cell as
(select * from shivay.cmp_campaign where cell_key = 10983),

level as 
(select * from shivay.trg_deluxe_levels),

sol_sup as
(select customer_id, count(*) as cnt from shivay.cmp_solicitation_history
where cell_key in (10983,10984) and file_date >= current_date - 7 group by 1)

insert into shivay.stg_solicitation_history
select 
unique_id,
null as solicitation_key,
cell_key,
cell_id,
campaign_id,
current_date as file_date,
loan.customer_id,
email,
phone,
first_name,
last_name,
property_address,
property_city,
property_state,
property_zip,
null as county_name,
current_loan_upb,
current_loan_rate,
current_loan_rem_term,
round(current_loan_upb/ltv*100,2) current_property_value,
ltv as current_ltv,
credit_score,
greatest(rate_date,case when to_char(current_date, 'fmday') = 'monday' then current_date - 3 else current_date -1 end) as rate_date,
lock_period,
l1.offer as offer_1,
p_product as new_product_description_1,
p_term as new_term_1,
current_loan_upb as new_loan_amount_1,
ltv as new_ltv_1,
p_rate as new_rate_1,
null as new_arm_reset_rate_1,
p_points as new_points_pct_1,
0 as new_apr_1,
970 as new_base_fees_1,
round(p_points*current_loan_upb/100,2) as new_points_dol_1,
0 as new_interim_int_1,
970 + round(p_points*current_loan_upb/100,2) as new_fees_total_1,
pricing.pmt(current_loan_upb,p_rate,p_term) as new_pi_1,
0 as new_pi_savings_mo_1,
0 as new_pimi_savings_mo_1,
0 as new_cashout_1,
0 as new_lol_savings_1,
0 as new_term_reduction_1,
0 as new_ufmip_pct_1,
0 as new_mip_pct_1,
0 as new_mi_1,
0 as new_ufmip_1,
ROUND(PRICING.FV_AT_PERIOD(current_loan_upb, p_rate, p_term, p_term - 1),2) as last_payment_1
from
(
select 
d.record_id as unique_id,
m.customer_id,
em.email as email,
ph.phone as phone,
d.fname as first_name,
d.lname as last_name,
d.street1 || ' ' || d.street2 as property_address,
d.city as property_city,
d.state as property_state,
d.zip as property_zip,
case when coalesce(mtg08,0) < 100000 then 100000 else mtg08 end as current_loan_upb,
mtg_rate as current_loan_rate,
360 as current_loan_rem_term,
case when ltv > 0 then least(ltv,78) else 
case when level::numeric in (1,2) then 90
when level::numeric in (3,4,6) then 80
else 100 end end as ltv,
level::numeric as level,
fico as credit_score
from shivay.stg_credit_trigger_monitoring m 
inner join shivay.deluxe_daily_data_typed d 
on (m.record_id = d.record_id)
left join
(
	select 
	*	
	from
	(
	select
	customer_id,
	phone,
	row_number() over(partition by customer_id order by phone) as rk
	from shivay.stg_phone_cust_id_match where phone is not null
	) z where rk = 1
) ph
on (m.customer_id = ph.customer_id)
left join 
(
	select 
	*	
	from
	(
	select
	customer_id,
	email,
	row_number() over(partition by customer_id order by email) as rk
	from shivay.stg_email_cust_id_match where email is not null
	) z where rk = 1
) em
on (m.customer_id = em.customer_id)
where d.date_imported = current_date
) loan 
inner join rates rt
on (loan.level = rt.p_segment)
inner join level l1 
on (loan.level = l1.level)
left join sol_sup ss on
(loan.customer_id = ss.customer_id)
,
cell c
where loan.ltv between rt.p_ltv_min and rt.p_ltv_max
and ss.customer_id is null;

With 
rates as
(
	SELECT
	6 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	100000 AS P_AMT,
	360 AS P_TERM,
	79.99 AS P_LTV_MIN,
	80.01 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .5 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.5
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	5 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	100000 AS P_AMT,
	360 AS P_TERM,
	99.99 AS P_LTV_MIN,
	100.01 AS P_LTV_MAX,
	rate AS P_RATE,
	points AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('30 Year Fixed VA')
			and points >= 0
		) z where rnk = 1
	) x	
	UNION ALL
	SELECT
	1 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	0 AS P_LTV_MIN,
	90.01 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .25 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('30 Year Fixed VA')
			and points >= -0.25
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	2 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	0 AS _LTV_MIN,
	90.01 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .25 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('30 Year Fixed VA')
			and points >= -0.25
		) z where rnk = 1
	) x
--CONF REFI

	UNION ALL
	SELECT
	3 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	70.01 as P_LTV_MIN,
	80 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .375 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.375
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	3 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	60.01 as P_LTV_MIN,
	70 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .25 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.25
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	3 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	0 as P_LTV_MIN,
	60 AS P_LTV_MAX,
	rate AS P_RATE,
	points + 0 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= 0
		) z where rnk = 1
	) x

	UNION ALL
	SELECT
	4 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	70.01 as P_LTV_MIN,
	80 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .375 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.375
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	4 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	60.01 as P_LTV_MIN,
	70 AS P_LTV_MAX,
	rate AS P_RATE,
	points + .25 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= -.25
		) z where rnk = 1
	) x
	UNION ALL
	SELECT
	4 AS P_SEGMENT,
	product_description AS P_PRODUCT,
	300000 AS P_AMT,
	360 AS P_TERM,
	0 as P_LTV_MIN,
	60 AS P_LTV_MAX,
	rate AS P_RATE,
	points + 0 AS P_POINTS,
	rate_date as RATE_DATE,
	lock_period as LOCK_PERIOD
	FROM 
	(
		select * from
		(
			select 
			product_description,
			rate,
			points,
			lock_period,
			rate_date,
			row_number() over(partition by product_description order by points) as rnk
			from shivay.pricing_ratesheet_dump 
			where trim(product_description) in
			('Conforming 30 YR Fixed')
			and points >= 0
		) z where rnk = 1
	) x
),

cell as
(select * from shivay.cmp_campaign where cell_key = 10984),

level as 
(select * from shivay.trg_deluxe_levels),

sol_sup as
(select customer_id, count(*) as cnt from shivay.cmp_solicitation_history
where cell_key in (10983,10984) and file_date >= current_date - 7 group by 1)

insert into shivay.stg_solicitation_history
select 
unique_id,
null as solicitation_key,
cell_key,
cell_id,
campaign_id,
current_date as file_date,
loan.customer_id,
email,
phone,
first_name,
last_name,
property_address,
property_city,
property_state,
property_zip,
null as county_name,
current_loan_upb,
current_loan_rate,
current_loan_rem_term,
round(current_loan_upb/ltv*100,2) current_property_value,
ltv as current_ltv,
credit_score,
greatest(rate_date,case when to_char(current_date, 'fmday') = 'monday' then current_date - 3 else current_date -1 end) as rate_date,
lock_period,
l1.offer as offer_1,
p_product as new_product_description_1,
p_term as new_term_1,
current_loan_upb as new_loan_amount_1,
ltv as new_ltv_1,
p_rate as new_rate_1,
null as new_arm_reset_rate_1,
p_points as new_points_pct_1,
0 as new_apr_1,
970 as new_base_fees_1,
round(p_points*current_loan_upb/100,2) as new_points_dol_1,
0 as new_interim_int_1,
970 + round(p_points*current_loan_upb/100,2) as new_fees_total_1,
pricing.pmt(current_loan_upb,p_rate,p_term) as new_pi_1,
0 as new_pi_savings_mo_1,
0 as new_pimi_savings_mo_1,
0 as new_cashout_1,
0 as new_lol_savings_1,
0 as new_term_reduction_1,
0 as new_ufmip_pct_1,
0 as new_mip_pct_1,
0 as new_mi_1,
0 as new_ufmip_1,
ROUND(PRICING.FV_AT_PERIOD(current_loan_upb, p_rate, p_term, p_term - 1),2) as last_payment_1
from
(
select 
d.record_id as unique_id,
m.customer_id,
em.email as email,
ph.phone as phone,
d.fname as first_name,
d.lname as last_name,
d.street1 || ' ' || d.street2 as property_address,
d.city as property_city,
d.state as property_state,
d.zip as property_zip,
case when coalesce(mtg08,0) < 100000 then 100000 else mtg08 end as current_loan_upb,
mtg_rate as current_loan_rate,
360 as current_loan_rem_term,
case when ltv > 0 then least(ltv,78) else 
case when level::numeric in (1,2) then 90
when level::numeric in (3,4,6) then 80
else 100 end end as ltv,
level::numeric as level,
fico as credit_score
from shivay.stg_credit_trigger_monitoring m 
inner join shivay.deluxe_daily_data_typed d 
on (m.record_id = d.record_id)
left join
(
	select 
	*	
	from
	(
	select
	customer_id,
	phone,
	row_number() over(partition by customer_id order by phone) as rk
	from shivay.stg_phone_cust_id_match where phone is not null
	) z where rk = 1
) ph
on (m.customer_id = ph.customer_id)
left join 
(
	select 
	*	
	from
	(
	select
	customer_id,
	email,
	row_number() over(partition by customer_id order by email) as rk
	from shivay.stg_email_cust_id_match where email is not null
	) z where rk = 1
) em
on (m.customer_id = em.customer_id)
where d.date_imported = current_date
) loan 
inner join rates rt
on (loan.level = rt.p_segment)
inner join level l1 
on (loan.level = l1.level)
left join sol_sup ss 
on (loan.customer_id = ss.customer_id)
,
cell c
where loan.ltv between rt.p_ltv_min and rt.p_ltv_max
and ss.customer_id is null;

update shivay.stg_solicitation_history
set new_apr_1 = round(pricing.rate(new_loan_amount_1 - new_fees_total_1, new_pi_1,new_term_1 )*100,3)
where cell_key in (10983, 10984)
and file_date = current_date;

END;
$$;


ALTER PROCEDURE shivay.trg_4_1_insert_credit_trigger_records() OWNER TO postgres;

--
-- TOC entry 494 (class 1255 OID 74297)
-- Name: trg_4_daily_triggers_process(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.trg_4_daily_triggers_process()
    LANGUAGE plpgsql
    AS $$
BEGIN

call shivay.trg_4_1_insert_credit_trigger_records();

insert into shivay.trg_daily_velocify_file
select distinct
s.CUSTOMER_ID,
b.bsa_id as BSAID,
s.first_name as FNAME,
s.last_name as LNAME,
s.property_address as Street1,
null as Street2,
s.property_city as CITY,
s.property_state as STATE,
s.property_zip as ZIP,
null as Zip4,
s.email as EMAIL_ADDRESS,
case when s.phone = ph.phone01 then s.phone else ph.phone01 end as PHONE_1,
case when s.phone = ph.phone02 then s.phone else ph.phone02 end as PHONE_2,
s.offer_1 as OFFER,
s.CREDIT_SCORE,
s.RATE_DATE,
s.rate_date + 60 as OFFER_EXPIRATION_DATE,
s.new_loan_amount_1 as LOAN_AMOUNT,
s.CURRENT_PROPERTY_VALUE,
s.new_product_description_1 as NEW_PRODUCT_DESCRIPTION,
s.new_rate_1 as NEW_RATE,
s.new_apr_1 as NEW_APR,
s.new_pi_1 as NEW_PI,
s.new_pi_savings_mo_1 as NEW_PI_SAVINGS,
s.new_ltv_1 as NEW_LTV,
s.new_term_1 as NEW_TERM,
s.new_term_1 -1 as NEW_TERM_1,
s.last_payment_1 as LAST_PAYMENT
from shivay.stg_solicitation_history s 
left join shivay.stg_customer_bsa_id_dups b
on (s.customer_id = b.customer_id)
left join (select customer_id, count(*) as cnt 
		   from shivay.cmp_solicitation_history
		   where cell_key in (10983, 10984)
		   and file_date >= current_date - 7
		   group by 1
		  ) ss
on (s.customer_id = ss.customer_id)
left join
(
	select 
	customer_id,
	max(case when rk = 1 then phone else null end) as phone01,
	max(case when rk = 2 then phone else null end) as phone02,
	max(case when rk = 3 then phone else null end) as phone03
	from
	(
	select
	customer_id,
	phone,
	row_number() over(partition by customer_id order by phone) as rk
	from shivay.stg_phone_cust_id_match
	where customer_rank = 1 and phone is not null
	) z
	group by customer_id
) ph
on (s.customer_id = ph.customer_id)
where s.cell_key = 10984
and s.file_date = current_date
and ss.customer_id is null;

UPDATE shivay.meta_data
	SET value='1'
	WHERE name='priced_daily_trigger';
	
insert into shivay.cmp_solicitation_history
select * from shivay.stg_solicitation_history
where cell_key in (10984, 10983);

delete from shivay.stg_solicitation_history
where cell_key in (10984, 10983);

END;
$$;


ALTER PROCEDURE shivay.trg_4_daily_triggers_process() OWNER TO postgres;

--
-- TOC entry 496 (class 1255 OID 74307)
-- Name: trg_5_dm_triggers_process(); Type: PROCEDURE; Schema: penfed; Owner: postgres
--

CREATE PROCEDURE shivay.trg_5_dm_triggers_process()
    LANGUAGE plpgsql
    AS $$
BEGIN

insert into shivay.trg_dm_file
select
s.unique_id,
solicitation_key,
cell_key,
cell_id,
campaign_id,
s.customer_id,
s.email,
phone,
first_name,
last_name,
property_address,
property_city,
property_state,
property_zip,
county_name,
current_loan_upb,
current_loan_rate,
current_loan_rem_term,
s.current_property_value,
0 as current_pi,
current_ltv,
credit_score,
rate_date,
lock_period,
offer_1,
new_product_description_1,
new_term_1,
new_loan_amount_1,
new_ltv_1,
new_rate_1,
new_arm_reset_rate_1,
new_points_pct_1,
new_apr_1,
new_base_fees_1,
new_points_dol_1,
new_interim_int_1,
new_fees_total_1,
new_pi_1,
new_pi_savings_mo_1,
new_pimi_savings_mo_1,
new_cashout_1,
new_lol_savings_1,
new_term_reduction_1,
new_ufmip_pct_1,
new_mip_pct_1,
new_mi_1,
new_ufmip_1,
last_payment_1,
l1.creative,
rate_date + 60 as offer_expiration_date,
null as unique_offer_code
from shivay.cmp_solicitation_history s 
inner join shivay.trg_dm_leads dm
on (s.customer_id = dm.customer_id)
left join shivay.trg_dm_suppression d
on (s.customer_id = d.customer_id)
inner join (select distinct offer, creative from shivay.trg_deluxe_levels) l1
on (s.offer_1 = l1.offer)
and d.customer_id is null
where s.cell_key = 10983
and s.rate_date >= current_date - 10;

insert into shivay.trg_dm_suppression
select customer_id, email from shivay.trg_dm_file;

UPDATE shivay.meta_data
	SET value='1'
	WHERE name='dm_file';

END;
$$;


ALTER PROCEDURE shivay.trg_5_dm_triggers_process() OWNER TO postgres;

SET default_tablespace = '';

--
-- TOC entry 394 (class 1259 OID 142413)
-- Name: at_temp; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.at_temp (
    lender text,
    loan_type character varying(10),
    units numeric,
    dol numeric
);


ALTER TABLE shivay.at_temp OWNER TO postgres;

--
-- TOC entry 391 (class 1259 OID 122102)
-- Name: at_temp1; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.at_temp1 (
    lead_id text,
    referral_source text,
    sales_channel text,
    mktg_channel text,
    lead_source character varying(50),
    prop_value numeric,
    lead_fico numeric,
    borr_last_name text,
    borr_first_name text,
    borrower_ssn text,
    coborrower_name text,
    borrower_city character varying(75),
    borrower_state character varying(2),
    borrower_zip text,
    property_city character varying(75),
    property_state character varying(2),
    property_zip text,
    day_phone text,
    evening_phone text,
    mobile_phone text,
    email text,
    best_contact_method text,
    loan_purpose character varying(30),
    property_type character varying(75),
    current_need_situation character varying(30),
    purpose_of_refinance character varying(30),
    do_not_email text,
    loan_type character varying(15),
    loan_amount numeric,
    lead_status character varying(50),
    lead_create_date date,
    lo_name character varying(75),
    lo_work_phone text,
    lo_nmls text,
    lo_email text,
    parent_lead character varying(15),
    crm_campaign_name character varying(100),
    crm_campaign_id date,
    first_contact_date date,
    last_action_taken character varying(50),
    last_action_taken_date date,
    time_period text,
    workable_lead text,
    first_contact_attempt_date date,
    total_contact_attempts numeric,
    first_contact_attempt_type text,
    first_contact_made_date date,
    first_contact_made_type text,
    lead_status_grp text,
    first_va_loan text,
    cash_out_amount numeric,
    first_time_homebuyer character varying(15),
    app_no text,
    current_customer_id text,
    attributed_app_no text,
    attributed_customer_id text,
    attributed_mktg_campaign text,
    attributed_disposition_no text,
    customer_segment text,
    lq_lead_id character varying(50),
    lq_campaign_id character varying(100),
    lq_status character varying(50),
    lo_contact_flag text,
    lq_contact text,
    lq_transfer text,
    crm_system text
);


ALTER TABLE shivay.at_temp1 OWNER TO postgres;

--
-- TOC entry 363 (class 1259 OID 70912)
-- Name: at_temp_disp; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.at_temp_disp (
    record_id text,
    campaign_id text,
    campaign_date date,
    email text,
    disposition_date timestamp without time zone,
    disposition_description text,
    cnt_sent integer,
    cnt_opened integer,
    cnt_clicked integer,
    cnt_bounced integer,
    cnt_unsubscribed integer,
    customer_id text,
    customer_segment text,
    cell_key text
);


ALTER TABLE shivay.at_temp_disp OWNER TO postgres;

--
-- TOC entry 364 (class 1259 OID 71000)
-- Name: at_temp_disp_2; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.at_temp_disp_2 (
    customer_id text,
    campaign_id text,
    disposition_date timestamp without time zone,
    disposition_description text,
    cnt_clicked bigint,
    cnt_opened bigint,
    cnt_bounced integer,
    cnt_unsubscribed bigint
);


ALTER TABLE shivay.at_temp_disp_2 OWNER TO postgres;

--
-- TOC entry 233 (class 1259 OID 16703)
-- Name: bk_cust_export_data; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.bk_cust_export_data AS
 SELECT z.address_nbr,
    z.scrub_address_line_1,
    z.scrub_city_name,
    z.state_cd,
    z.zips
   FROM ( SELECT customer_data_typed.customer_id AS address_nbr,
            customer_data_typed.address_line_1 AS scrub_address_line_1,
            customer_data_typed.city AS scrub_city_name,
            customer_data_typed.state AS state_cd,
            lpad(((customer_data_typed.zip)::character varying(5))::text, 5, '0'::text) AS zips,
            row_number() OVER (PARTITION BY customer_data_typed.customer_id ORDER BY customer_data_typed.addr_maint_date DESC) AS c_rank
           FROM public.customer_data_typed
          WHERE (((customer_data_typed.address_line_1)::text <> ''::text) AND ((customer_data_typed.customer_id)::text <> ''::text))) z
  WHERE (z.c_rank = 1)
UNION ALL
 SELECT ('APP-'::text || (encompass_data_typed.app_no)::text) AS address_nbr,
    upper((encompass_data_typed.app_prop_address)::text) AS scrub_address_line_1,
    upper((encompass_data_typed.app_prop_city)::text) AS scrub_city_name,
    upper((encompass_data_typed.app_prop_state)::text) AS state_cd,
    lpad(split_part((encompass_data_typed.app_prop_zip)::text, '-'::text, 1), 5, '0'::text) AS zips
   FROM public.encompass_data_typed
  WHERE ((upper((encompass_data_typed.app_prop_address)::text) <> 'TBD'::text) AND (encompass_data_typed.app_prop_address IS NOT NULL))
UNION ALL
 SELECT ('VEL-'::text || velocify_data_typed."Id") AS address_nbr,
    upper((velocify_data_typed."Property Street")::text) AS scrub_address_line_1,
    upper((velocify_data_typed."Property City")::text) AS scrub_city_name,
    upper((velocify_data_typed."Property State")::text) AS state_cd,
    lpad(substr((velocify_data_typed."Property Zip Code")::text, 1, 5), 5, '0'::text) AS zips
   FROM public.velocify_data_typed
  WHERE ((velocify_data_typed."Property Street" IS NOT NULL) AND (upper(btrim((velocify_data_typed."Property Street")::text)) <> 'TBD'::text) AND ((velocify_data_typed."Lead Source")::text <> 'Jornaya Activate'::text))
UNION ALL
 SELECT ('MRG-'::text || mortgage_data_typed.account_number) AS address_nbr,
    upper((mortgage_data_typed.property_address)::text) AS scrub_address_line_1,
    NULL::character varying AS scrub_city_name,
    mortgage_data_typed.prop_state AS state_cd,
    lpad(substr((mortgage_data_typed.prop_zip)::text, 1, 5), 5, '0'::text) AS zips
   FROM public.mortgage_data_typed;


ALTER TABLE shivay.bk_cust_export_data OWNER TO postgres;

--
-- TOC entry 234 (class 1259 OID 16708)
-- Name: bk_rap_cust_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.bk_rap_cust_data (
    customer_id character varying(50),
    apn character varying(50),
    fipscode character varying(50),
    property_address character varying(50),
    property_city character varying(50),
    property_state character varying(50),
    property_zip character varying(50),
    avm_ez_confidence_score numeric,
    avm_ez_estimated_value numeric,
    curr_comb_ltv_1st numeric,
    curr_comb_ltv_2nd numeric,
    curr_estimated_equity_1st numeric,
    curr_estimated_equity_2nd numeric,
    est_ownership_start_date numeric,
    orig_comb_ltv_1st numeric,
    orig_comb_ltv_2nd numeric,
    owner_occupancy_indicator character varying(50),
    pos_1st_est_loan_balance numeric,
    pos_1st_int_rate_type character varying(50),
    pos_1st_int_rate_used numeric,
    pos_1st_interest_only_period character varying(50),
    pos_1st_lender character varying(150),
    pos_1st_loan_amount numeric,
    pos_1st_loan_term numeric,
    pos_1st_loan_term_code character varying(50),
    pos_1st_loan_type character varying(50),
    pos_1st_original_date numeric,
    pos_1st_purpose character varying(50),
    pos_1st_recording_date numeric,
    pos_2nd_est_loan_balance numeric,
    pos_2nd_int_rate_type character varying(50),
    pos_2nd_int_rate_used numeric,
    pos_2nd_loan_amount numeric,
    pos_2nd_loan_term numeric,
    pos_2nd_loan_term_code character varying(50),
    pos_2nd_loan_type character varying(50),
    pos_2nd_original_date character varying(50),
    pos_2nd_purpose character varying(50),
    sales_price character varying(50),
    pos_2nd_lender_fixed character varying(50)
);


ALTER TABLE shivay.bk_rap_cust_data OWNER TO postgres;

--
-- TOC entry 235 (class 1259 OID 16714)
-- Name: bk_rap_mls_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.bk_rap_mls_data (
    customer_id character varying(50),
    apn character varying(50),
    fipscode numeric,
    listingdate numeric,
    listprice numeric,
    daysinsystem numeric,
    mls_status character varying(1)
);


ALTER TABLE shivay.bk_rap_mls_data OWNER TO postgres;

--
-- TOC entry 236 (class 1259 OID 16720)
-- Name: cmp_disposition_history; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_disposition_history (
    record_id numeric NOT NULL,
    campaign_id character varying(100),
    campaign_date date,
    email character varying(75),
    disposition_date timestamp without time zone,
    disposition_description character varying(50),
    cnt_sent numeric,
    cnt_opened numeric,
    cnt_clicked numeric,
    cnt_bounced numeric,
    cnt_unsubscribed numeric,
    customer_id character varying(50),
    customer_segment character varying(30),
    cell_key numeric
);


ALTER TABLE shivay.cmp_disposition_history OWNER TO postgres;

--
-- TOC entry 237 (class 1259 OID 16726)
-- Name: mst_app; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.mst_app (
    app_no character varying(15) NOT NULL,
    app_channel character varying(30),
    app_branch character varying(30),
    app_lnoff_cd character varying(10),
    app_lnoff_name character varying(80),
    app_create_date date,
    app_rate_lock_date date,
    app_setup_date date,
    app_fund_date date,
    app_cancel_date date,
    app_status_code character varying(10),
    app_status_desc character varying(50),
    app_status_date date,
    app_source character varying(70),
    app_purpose_code character varying(10),
    app_purpose_desc character varying(75),
    app_loan_amt numeric,
    app_term numeric,
    app_rate numeric,
    app_pi numeric,
    app_prim_last character varying(70),
    app_prim_first character varying(70),
    app_prim_ssn character varying(10),
    app_secd_last character varying(70),
    app_secd_first character varying(70),
    app_secd_ssn character varying(10),
    app_prim_home_phone character varying(10),
    app_prim_email character varying(75),
    app_prop_address1 character varying(70),
    app_prop_address2 character varying(70),
    app_prop_city character varying(70),
    app_prop_state character varying(2),
    app_prop_zip character varying(5),
    app_appraised_value numeric,
    app_ltv numeric,
    app_cancel_reason character varying(70),
    app_decline_reason character varying(70),
    app_total_cl_cost numeric,
    app_disc_pts_amt numeric,
    app_product_code character varying(10),
    app_product_desc character varying(70),
    app_product_group character varying(30),
    app_fa_flag character varying(1),
    app_property_type character varying(50),
    app_occupancy_type character varying(50),
    lead_id character varying(15),
    attributed_lead_id character varying(15),
    current_customer_id character varying(50),
    attributed_customer_id character varying(50),
    attributed_mktg_campaign character varying(100),
    attributed_disposition_no numeric,
    customer_segment character varying(30)
);


ALTER TABLE shivay.mst_app OWNER TO postgres;

--
-- TOC entry 238 (class 1259 OID 16732)
-- Name: mst_lead; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.mst_lead (
    lead_id character varying(15) NOT NULL,
    referral_source character varying(50),
    sales_channel character varying(30),
    mktg_channel character varying(30),
    lead_source character varying(70),
    prop_value numeric,
    lead_fico numeric,
    borr_last_name character varying(75),
    borr_first_name character varying(75),
    borrower_ssn character varying(10),
    coborrower_name character varying(75),
    borrower_city character varying(75),
    borrower_state character varying(2),
    borrower_zip character varying(5),
    property_city character varying(75),
    property_state character varying(2),
    property_zip character varying(20),
    day_phone character varying(10),
    evening_phone character varying(10),
    mobile_phone character varying(10),
    email character varying(75),
    best_contact_method character varying(20),
    loan_purpose character varying(75),
    property_type character varying(50),
    current_need_situation character varying(80),
    purpose_of_refinance character varying(50),
    do_not_email character varying(1),
    loan_type character varying(50),
    loan_amount numeric,
    lead_status character varying(70),
    lead_create_date date,
    lo_name character varying(80),
    lo_work_phone character varying(10),
    lo_nmls character varying(10),
    lo_email character varying(70),
    parent_lead character varying(15),
    crm_campaign_name character varying(100),
    crm_campaign_id character varying(100),
    first_contact_date date,
    last_action_taken character varying(70),
    last_action_taken_date date,
    time_period character varying(8),
    workable_lead character varying(1),
    first_contact_attempt_date date,
    total_contact_attempts numeric,
    first_contact_attempt_type character varying(70),
    first_contact_made_date date,
    first_contact_made_type character varying(70),
    lead_status_grp character varying(40),
    first_va_loan character varying(1),
    cash_out_amount numeric,
    first_time_homebuyer character varying(20),
    app_no character varying(15),
    current_customer_id character varying(50),
    attributed_app_no character varying(15),
    attributed_customer_id character varying(50),
    attributed_mktg_campaign character varying(100),
    attributed_disposition_no numeric,
    customer_segment character varying(30),
    lq_lead_id character varying(15),
    lq_campaign_id character varying(100),
    lq_status character varying(30),
    crm_system character varying(15)
);


ALTER TABLE shivay.mst_lead OWNER TO postgres;

--
-- TOC entry 239 (class 1259 OID 16738)
-- Name: campaign_export; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.campaign_export AS
 SELECT d.campaign_id AS campaign,
    d.campaign_date,
    NULL::text AS control_population_flg,
        CASE
            WHEN (z.customer_id IS NULL) THEN d.customer_id
            ELSE z.customer_id
        END AS member_no,
    d.email,
    z.last_name AS lname,
    z.first_name AS fname,
    l.lead_create_date AS lead_date,
    a.app_setup_date AS app_date,
    a.app_fund_date AS fund_date,
    l.lead_id,
    a.app_no
   FROM (((shivay.cmp_disposition_history d
     LEFT JOIN shivay.mst_lead l ON ((d.record_id = l.attributed_disposition_no)))
     LEFT JOIN shivay.mst_app a ON ((d.record_id = a.attributed_disposition_no)))
     LEFT JOIN public.customer_data_typed z ON (((d.customer_id)::text = (z.customer_id)::text)))
  WHERE (d.campaign_date >= (CURRENT_DATE - 180));


ALTER TABLE shivay.campaign_export OWNER TO postgres;

--
-- TOC entry 240 (class 1259 OID 16743)
-- Name: campaign_rpt_seq; Type: SEQUENCE; Schema: penfed; Owner: postgres
--

CREATE SEQUENCE shivay.campaign_rpt_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE shivay.campaign_rpt_seq OWNER TO postgres;

--
-- TOC entry 241 (class 1259 OID 16745)
-- Name: cell_key_seq; Type: SEQUENCE; Schema: penfed; Owner: postgres
--

CREATE SEQUENCE shivay.cell_key_seq
    START WITH 7000
    INCREMENT BY 1
    MINVALUE 7000
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE shivay.cell_key_seq OWNER TO postgres;

--
-- TOC entry 242 (class 1259 OID 16747)
-- Name: channel_rpt_seq; Type: SEQUENCE; Schema: penfed; Owner: postgres
--

CREATE SEQUENCE shivay.channel_rpt_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE shivay.channel_rpt_seq OWNER TO postgres;

--
-- TOC entry 243 (class 1259 OID 16749)
-- Name: cmp_campaign; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_campaign (
    cell_key numeric NOT NULL,
    cell_id character varying(10),
    campaign_id character varying(100) NOT NULL,
    lot_no character varying(10),
    time_period character varying(7),
    program_group character varying(10),
    channel character varying(10),
    file_date date,
    campaign_start_date date,
    campaign_end_date date,
    offer_key numeric,
    creative_key numeric,
    vendor_key numeric,
    file_key numeric,
    phone_number character varying(15),
    utm_string character varying(50),
    est_quantity numeric,
    cost_per_piece numeric,
    est_response_rate numeric,
    est_app_rate numeric,
    executed_flag character varying(1),
    processed_flag character varying(1)
);


ALTER TABLE shivay.cmp_campaign OWNER TO postgres;

--
-- TOC entry 244 (class 1259 OID 16755)
-- Name: cmp_channel; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_channel (
    channel character varying(10) NOT NULL,
    channel_description character varying(50)
);


ALTER TABLE shivay.cmp_channel OWNER TO postgres;

--
-- TOC entry 245 (class 1259 OID 16758)
-- Name: cmp_creative; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_creative (
    creative_key numeric NOT NULL,
    creative_id character varying(20),
    creative_description character varying(50),
    creative_repository_link text
);


ALTER TABLE shivay.cmp_creative OWNER TO postgres;

--
-- TOC entry 246 (class 1259 OID 16764)
-- Name: cmp_exclusions; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_exclusions (
    offer_key numeric,
    exclusion_code numeric,
    exclusion_type character varying(15),
    exclusion_description text,
    sql_str text,
    active_flag character varying(1)
);


ALTER TABLE shivay.cmp_exclusions OWNER TO postgres;

--
-- TOC entry 247 (class 1259 OID 16770)
-- Name: cmp_file; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_file (
    file_key numeric NOT NULL,
    vendor_key numeric,
    file_type character varying(10),
    file_description text,
    file_name character varying(40),
    file_extension character varying(10),
    header_flag character varying(1)
);


ALTER TABLE shivay.cmp_file OWNER TO postgres;

--
-- TOC entry 248 (class 1259 OID 16776)
-- Name: cmp_file_layout; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_file_layout (
    file_key numeric,
    vendor_key numeric,
    field_seq numeric,
    field_name character varying(70),
    cmp_field_name character varying(70)
);


ALTER TABLE shivay.cmp_file_layout OWNER TO postgres;

--
-- TOC entry 249 (class 1259 OID 16782)
-- Name: cmp_offer; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_offer (
    offer_key numeric NOT NULL,
    offer_id character varying(30),
    offer_description text
);


ALTER TABLE shivay.cmp_offer OWNER TO postgres;

--
-- TOC entry 250 (class 1259 OID 16788)
-- Name: cmp_program; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_program (
    program_group character varying(10) NOT NULL,
    program_description character varying(50),
    program_details text
);


ALTER TABLE shivay.cmp_program OWNER TO postgres;

--
-- TOC entry 291 (class 1259 OID 17099)
-- Name: stg_solicitation_history; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_solicitation_history (
    unique_id character varying(20),
    solicitation_key text,
    cell_key numeric,
    cell_id character varying(10),
    campaign_id character varying(100),
    file_date date,
    customer_id character varying(50),
    email character varying(80),
    phone character varying(10),
    first_name character varying(80),
    last_name character varying(80),
    property_address character varying(80),
    property_city character varying(80),
    property_state character varying(2),
    property_zip character varying(5),
    county_name character varying(15),
    current_loan_upb numeric,
    current_loan_rate numeric,
    current_loan_rem_term numeric,
    current_property_value numeric,
    current_ltv numeric,
    credit_score numeric,
    rate_date date,
    lock_period numeric,
    offer_1 text,
    new_product_description_1 character varying(75),
    new_term_1 numeric,
    new_loan_amount_1 numeric,
    new_ltv_1 numeric,
    new_rate_1 numeric,
    new_arm_reset_rate_1 numeric,
    new_points_pct_1 numeric,
    new_apr_1 numeric,
    new_base_fees_1 numeric,
    new_points_dol_1 numeric,
    new_interim_int_1 numeric,
    new_fees_total_1 numeric,
    new_pi_1 numeric,
    new_pi_savings_mo_1 numeric,
    new_pimi_savings_mo_1 numeric,
    new_cashout_1 numeric,
    new_lol_savings_1 numeric,
    new_term_reduction_1 numeric,
    new_ufmip_pct_1 numeric,
    new_mip_pct_1 numeric,
    new_mi_1 numeric,
    new_ufmip_1 numeric,
    last_payment_1 numeric,
    offer_2 text,
    new_product_description_2 character varying(75),
    new_term_2 numeric,
    new_loan_amount_2 numeric,
    new_ltv_2 numeric,
    new_rate_2 numeric,
    new_arm_reset_rate_2 numeric,
    new_points_pct_2 numeric,
    new_apr_2 numeric,
    new_base_fees_2 numeric,
    new_points_dol_2 numeric,
    new_interim_int_2 numeric,
    new_fees_total_2 numeric,
    new_pi_2 numeric,
    new_pi_savings_mo_2 numeric,
    new_pimi_savings_mo_2 numeric,
    new_cashout_2 numeric,
    new_lol_savings_2 numeric,
    new_term_reduction_2 numeric,
    new_ufmip_pct_2 numeric,
    new_mip_pct_2 numeric,
    new_mi_2 numeric,
    new_ufmip_2 numeric,
    last_payment_2 numeric,
    offer_3 text,
    new_product_description_3 character varying(75),
    new_term_3 numeric,
    new_loan_amount_3 numeric,
    new_ltv_3 numeric,
    new_rate_3 numeric,
    new_arm_reset_rate_3 numeric,
    new_points_pct_3 numeric,
    new_apr_3 numeric,
    new_base_fees_3 numeric,
    new_points_dol_3 numeric,
    new_interim_int_3 numeric,
    new_fees_total_3 numeric,
    new_pi_3 numeric,
    new_pi_savings_mo_3 numeric,
    new_pimi_savings_mo_3 numeric,
    new_cashout_3 numeric,
    new_lol_savings_3 numeric,
    new_term_reduction_3 numeric,
    new_ufmip_pct_3 numeric,
    new_mip_pct_3 numeric,
    new_mi_3 numeric,
    new_ufmip_3 numeric,
    last_payment_3 numeric,
    offer_4 text,
    new_product_description_4 character varying(75),
    new_term_4 numeric,
    new_loan_amount_4 numeric,
    new_ltv_4 numeric,
    new_rate_4 numeric,
    new_arm_reset_rate_4 numeric,
    new_points_pct_4 numeric,
    new_apr_4 numeric,
    new_base_fees_4 numeric,
    new_points_dol_4 numeric,
    new_interim_int_4 numeric,
    new_fees_total_4 numeric,
    new_pi_4 numeric,
    new_pi_savings_mo_4 numeric,
    new_pimi_savings_mo_4 numeric,
    new_cashout_4 numeric,
    new_lol_savings_4 numeric,
    new_term_reduction_4 numeric,
    new_ufmip_pct_4 numeric,
    new_mip_pct_4 numeric,
    new_mi_4 numeric,
    new_ufmip_4 numeric,
    last_payment_4 numeric
);


ALTER TABLE shivay.stg_solicitation_history OWNER TO postgres;

--
-- TOC entry 392 (class 1259 OID 122703)
-- Name: cmp_purchase_math; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.cmp_purchase_math AS
 SELECT z.cell_key,
    z.cpv,
    z.new_product_description_4 AS new_product_description_300,
    z.new_term_4 AS new_term_300,
    z.new_loan_amount_4 AS new_loan_amount_300,
    z.new_rate_4 AS new_rate_300,
    z.new_points_pct_4 AS new_points_pct_300,
    round((pricing.rate(((z.new_loan_amount_4 - ((z.new_loan_amount_4 * z.new_points_pct_4) / (100)::numeric)) - (970)::numeric), z.new_pi_4, z.new_term_4) * (100)::numeric), 3) AS new_apr_300,
    z.new_pi_4 AS new_pi_300,
    z.last_payment_4 AS last_payment_300,
    z.new_product_description_4 AS new_product_description_250,
    z.new_term_4 AS new_term_250,
    (z.new_loan_amount_4 - (50000)::numeric) AS new_loan_amount_250,
    z.new_rate_4 AS new_rate_250,
    z.new_points_pct_4 AS new_points_pct_250,
    round((pricing.rate((((z.new_loan_amount_4 - (50000)::numeric) - (((z.new_loan_amount_4 - (50000)::numeric) * z.new_points_pct_4) / (100)::numeric)) - (970)::numeric), round(pricing.pmt((z.new_loan_amount_4 - (50000)::numeric), z.new_rate_4, z.new_term_4), 2), z.new_term_4) * (100)::numeric), 3) AS new_apr_250,
    round(pricing.pmt((z.new_loan_amount_4 - (50000)::numeric), z.new_rate_4, z.new_term_4), 2) AS new_pi_250,
    round(pricing.fv_at_period((z.new_loan_amount_4 - (50000)::numeric), z.new_rate_4, z.new_term_4, (z.new_term_4 - (1)::numeric)), 2) AS last_payment_250,
    z.new_product_description_4 AS new_product_description_200,
    z.new_term_4 AS new_term_200,
    (z.new_loan_amount_4 - (100000)::numeric) AS new_loan_amount_200,
    z.new_rate_4 AS new_rate_200,
    z.new_points_pct_4 AS new_points_pct_200,
    round((pricing.rate((((z.new_loan_amount_4 - (100000)::numeric) - (((z.new_loan_amount_4 - (100000)::numeric) * z.new_points_pct_4) / (100)::numeric)) - (970)::numeric), round(pricing.pmt((z.new_loan_amount_4 - (100000)::numeric), z.new_rate_4, z.new_term_4), 2), z.new_term_4) * (100)::numeric), 3) AS new_apr_200,
    round(pricing.pmt((z.new_loan_amount_4 - (100000)::numeric), z.new_rate_4, z.new_term_4), 2) AS new_pi_200,
    round(pricing.fv_at_period((z.new_loan_amount_4 - (100000)::numeric), z.new_rate_4, z.new_term_4, (z.new_term_4 - (1)::numeric)), 2) AS last_payment_200,
    z.new_product_description_4 AS new_product_description_150,
    z.new_term_4 AS new_term_150,
    (z.new_loan_amount_4 - (150000)::numeric) AS new_loan_amount_150,
    z.new_rate_4 AS new_rate_150,
    z.new_points_pct_4 AS new_points_pct_150,
    round((pricing.rate((((z.new_loan_amount_4 - (150000)::numeric) - (((z.new_loan_amount_4 - (150000)::numeric) * z.new_points_pct_4) / (100)::numeric)) - (970)::numeric), round(pricing.pmt((z.new_loan_amount_4 - (150000)::numeric), z.new_rate_4, z.new_term_4), 2), z.new_term_4) * (100)::numeric), 3) AS new_apr_150,
    round(pricing.pmt((z.new_loan_amount_4 - (150000)::numeric), z.new_rate_4, z.new_term_4), 2) AS new_pi_150,
    round(pricing.fv_at_period((z.new_loan_amount_4 - (150000)::numeric), z.new_rate_4, z.new_term_4, (z.new_term_4 - (1)::numeric)), 2) AS last_payment_150,
    z.new_product_description_4 AS new_product_description_100,
    z.new_term_4 AS new_term_100,
    (z.new_loan_amount_4 - (200000)::numeric) AS new_loan_amount_100,
    z.new_rate_4 AS new_rate_100,
    z.new_points_pct_4 AS new_points_pct_100,
    round((pricing.rate((((z.new_loan_amount_4 - (200000)::numeric) - (((z.new_loan_amount_4 - (200000)::numeric) * z.new_points_pct_4) / (100)::numeric)) - (970)::numeric), round(pricing.pmt((z.new_loan_amount_4 - (200000)::numeric), z.new_rate_4, z.new_term_4), 2), z.new_term_4) * (100)::numeric), 3) AS new_apr_100,
    round(pricing.pmt((z.new_loan_amount_4 - (200000)::numeric), z.new_rate_4, z.new_term_4), 2) AS new_pi_100,
    round(pricing.fv_at_period((z.new_loan_amount_4 - (200000)::numeric), z.new_rate_4, z.new_term_4, (z.new_term_4 - (1)::numeric)), 2) AS last_payment_100
   FROM ( SELECT s.cell_key,
            s.cell_id,
            s.campaign_id,
            s.new_product_description_4,
            s.new_loan_amount_4,
            round((s.new_loan_amount_4 / (s.new_ltv_4 / (100)::numeric)), 2) AS cpv,
            s.new_rate_4,
            s.new_term_4,
            s.new_points_pct_4,
            s.new_pi_4,
            s.last_payment_4,
            count(*) AS cnt
           FROM (shivay.stg_solicitation_history s
             JOIN shivay.cmp_campaign c ON ((s.cell_key = c.cell_key)))
          WHERE (c.offer_key = ANY (ARRAY[(88)::numeric, (98)::numeric]))
          GROUP BY s.cell_key, s.cell_id, s.campaign_id, s.new_product_description_4, s.new_loan_amount_4, (round((s.new_loan_amount_4 / (s.new_ltv_4 / (100)::numeric)), 2)), s.new_rate_4, s.new_term_4, s.new_points_pct_4, s.new_pi_4, s.last_payment_4) z;


ALTER TABLE shivay.cmp_purchase_math OWNER TO postgres;

--
-- TOC entry 251 (class 1259 OID 16794)
-- Name: cmp_sol_history_old; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_sol_history_old (
    solicitation_key numeric,
    customer_id character varying(50),
    campaign_id character varying(100),
    channel character varying(10),
    email character varying(75),
    first_name character varying(75),
    last_name character varying(75),
    property_address character varying(80),
    property_city character varying(50),
    property_state character varying(50),
    property_zip character varying(50),
    campaign_type character varying(50),
    file_date date,
    cell_key numeric
);


ALTER TABLE shivay.cmp_sol_history_old OWNER TO postgres;

--
-- TOC entry 252 (class 1259 OID 16800)
-- Name: cmp_solicitation_history; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_solicitation_history (
    unique_id character varying(20),
    solicitation_key text,
    cell_key numeric,
    cell_id character varying(10),
    campaign_id character varying(100),
    file_date date,
    customer_id character varying(50),
    email character varying(80),
    phone character varying(10),
    first_name character varying(80),
    last_name character varying(80),
    property_address character varying(80),
    property_city character varying(80),
    property_state character varying(2),
    property_zip character varying(5),
    county_name character varying(15),
    current_loan_upb numeric,
    current_loan_rate numeric,
    current_loan_rem_term numeric,
    current_property_value numeric,
    current_ltv numeric,
    credit_score numeric,
    rate_date date,
    lock_period numeric,
    offer_1 text,
    new_product_description_1 character varying(75),
    new_term_1 numeric,
    new_loan_amount_1 numeric,
    new_ltv_1 numeric,
    new_rate_1 numeric,
    new_arm_reset_rate_1 numeric,
    new_points_pct_1 numeric,
    new_apr_1 numeric,
    new_base_fees_1 numeric,
    new_points_dol_1 numeric,
    new_interim_int_1 numeric,
    new_fees_total_1 numeric,
    new_pi_1 numeric,
    new_pi_savings_mo_1 numeric,
    new_pimi_savings_mo_1 numeric,
    new_cashout_1 numeric,
    new_lol_savings_1 numeric,
    new_term_reduction_1 numeric,
    new_ufmip_pct_1 numeric,
    new_mip_pct_1 numeric,
    new_mi_1 numeric,
    new_ufmip_1 numeric,
    last_payment_1 numeric,
    offer_2 text,
    new_product_description_2 character varying(75),
    new_term_2 numeric,
    new_loan_amount_2 numeric,
    new_ltv_2 numeric,
    new_rate_2 numeric,
    new_arm_reset_rate_2 numeric,
    new_points_pct_2 numeric,
    new_apr_2 numeric,
    new_base_fees_2 numeric,
    new_points_dol_2 numeric,
    new_interim_int_2 numeric,
    new_fees_total_2 numeric,
    new_pi_2 numeric,
    new_pi_savings_mo_2 numeric,
    new_pimi_savings_mo_2 numeric,
    new_cashout_2 numeric,
    new_lol_savings_2 numeric,
    new_term_reduction_2 numeric,
    new_ufmip_pct_2 numeric,
    new_mip_pct_2 numeric,
    new_mi_2 numeric,
    new_ufmip_2 numeric,
    last_payment_2 numeric,
    offer_3 text,
    new_product_description_3 character varying(75),
    new_term_3 numeric,
    new_loan_amount_3 numeric,
    new_ltv_3 numeric,
    new_rate_3 numeric,
    new_arm_reset_rate_3 numeric,
    new_points_pct_3 numeric,
    new_apr_3 numeric,
    new_base_fees_3 numeric,
    new_points_dol_3 numeric,
    new_interim_int_3 numeric,
    new_fees_total_3 numeric,
    new_pi_3 numeric,
    new_pi_savings_mo_3 numeric,
    new_pimi_savings_mo_3 numeric,
    new_cashout_3 numeric,
    new_lol_savings_3 numeric,
    new_term_reduction_3 numeric,
    new_ufmip_pct_3 numeric,
    new_mip_pct_3 numeric,
    new_mi_3 numeric,
    new_ufmip_3 numeric,
    last_payment_3 numeric,
    offer_4 text,
    new_product_description_4 character varying(75),
    new_term_4 numeric,
    new_loan_amount_4 numeric,
    new_ltv_4 numeric,
    new_rate_4 numeric,
    new_arm_reset_rate_4 numeric,
    new_points_pct_4 numeric,
    new_apr_4 numeric,
    new_base_fees_4 numeric,
    new_points_dol_4 numeric,
    new_interim_int_4 numeric,
    new_fees_total_4 numeric,
    new_pi_4 numeric,
    new_pi_savings_mo_4 numeric,
    new_pimi_savings_mo_4 numeric,
    new_cashout_4 numeric,
    new_lol_savings_4 numeric,
    new_term_reduction_4 numeric,
    new_ufmip_pct_4 numeric,
    new_mip_pct_4 numeric,
    new_mi_4 numeric,
    new_ufmip_4 numeric,
    last_payment_4 numeric
);


ALTER TABLE shivay.cmp_solicitation_history OWNER TO postgres;

--
-- TOC entry 253 (class 1259 OID 16806)
-- Name: cmp_suppression; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_suppression (
    customer_id character varying(50),
    cnt numeric,
    suppression_type character varying(75)
);


ALTER TABLE shivay.cmp_suppression OWNER TO postgres;

--
-- TOC entry 254 (class 1259 OID 16812)
-- Name: cmp_vendor; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.cmp_vendor (
    vendor_key numeric NOT NULL,
    vendor_type text,
    vendor_name character varying(80),
    vendor_address character varying(80),
    vendor_city character varying(80),
    vendor_state character varying(2),
    vendor_zip character varying(5),
    vendor_email character varying(80),
    vendor_phone character varying(10),
    vendor_cell character varying(10),
    vendor_contact_name character varying(80)
);


ALTER TABLE shivay.cmp_vendor OWNER TO postgres;

--
-- TOC entry 368 (class 1259 OID 73344)
-- Name: deluxe_daily_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.deluxe_daily_data (
    fname text,
    lname text,
    street1 text,
    street2 text,
    city text,
    state text,
    zip text,
    zip4 text,
    level text,
    orderrecordid text,
    mtg08 text,
    equity08 text,
    mtg03 text,
    fico text,
    ltv text,
    mtg31 text,
    mtg33 text,
    mtg19 text,
    revolving_debt text,
    owneroccupied text,
    mtg13 text,
    mtg_rate text,
    mtg_term text,
    record_id text,
    pf_segment text,
    rap_filter text,
    date_imported date DEFAULT CURRENT_DATE
);


ALTER TABLE shivay.deluxe_daily_data OWNER TO postgres;

--
-- TOC entry 370 (class 1259 OID 73353)
-- Name: deluxe_daily_data_tracker; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.deluxe_daily_data_tracker (
    id integer NOT NULL,
    filename text,
    date_imported date DEFAULT CURRENT_DATE
);


ALTER TABLE shivay.deluxe_daily_data_tracker OWNER TO postgres;

--
-- TOC entry 369 (class 1259 OID 73351)
-- Name: deluxe_daily_data_tracker_id_seq; Type: SEQUENCE; Schema: penfed; Owner: postgres
--

CREATE SEQUENCE shivay.deluxe_daily_data_tracker_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE shivay.deluxe_daily_data_tracker_id_seq OWNER TO postgres;

--
-- TOC entry 4855 (class 0 OID 0)
-- Dependencies: 369
-- Name: deluxe_daily_data_tracker_id_seq; Type: SEQUENCE OWNED BY; Schema: penfed; Owner: postgres
--

ALTER SEQUENCE shivay.deluxe_daily_data_tracker_id_seq OWNED BY shivay.deluxe_daily_data_tracker.id;


--
-- TOC entry 379 (class 1259 OID 75371)
-- Name: deluxe_daily_data_typed; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.deluxe_daily_data_typed (
    fname text,
    lname text,
    street1 text,
    street2 text,
    city text,
    state text,
    zip text,
    zip4 text,
    level text,
    orderrecordid text,
    mtg08 numeric,
    equity08 numeric,
    mtg03 numeric,
    fico numeric,
    ltv numeric,
    mtg31 numeric,
    mtg33 numeric,
    mtg19 numeric,
    revolving_debt numeric,
    owneroccupied text,
    mtg13 numeric,
    mtg_rate numeric,
    mtg_term numeric,
    record_id numeric,
    pf_segment text,
    rap_filter text,
    date_imported date
);


ALTER TABLE shivay.deluxe_daily_data_typed OWNER TO postgres;

--
-- TOC entry 373 (class 1259 OID 74254)
-- Name: deluxe_rec_id; Type: SEQUENCE; Schema: penfed; Owner: postgres
--

CREATE SEQUENCE shivay.deluxe_rec_id
    START WITH 2000000
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE shivay.deluxe_rec_id OWNER TO postgres;

--
-- TOC entry 255 (class 1259 OID 16818)
-- Name: disposition_key_seq; Type: SEQUENCE; Schema: penfed; Owner: postgres
--

CREATE SEQUENCE shivay.disposition_key_seq
    START WITH 10
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE shivay.disposition_key_seq OWNER TO postgres;

--
-- TOC entry 256 (class 1259 OID 16820)
-- Name: mst_loan; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.mst_loan (
    unique_id character varying(20) NOT NULL,
    account_number character varying(20),
    portfolio character varying(30),
    lien_position character varying(2),
    investor_full_name character varying(50),
    investor_loan_no character varying(15),
    origination_date date,
    loan_amount numeric,
    current_2nd_balance numeric,
    unpaid_balance numeric,
    loan_term numeric,
    remaining_term numeric,
    maturity_date date,
    payoff_date date,
    payoff_upb numeric,
    loan_status_code character varying(1),
    mod_status character varying(1),
    interest_rate numeric,
    rate_type character varying(1),
    arm_next_reset_date date,
    arm_next_reset_rate numeric,
    principal_and_interest numeric,
    io_flag character varying(1),
    loan_type character varying(1),
    product_id character varying(10),
    product_name character varying(50),
    purpose_code character varying(10),
    delq_12_mth_str character varying(12),
    delinquency_days_past_due numeric,
    delinquency_12_month_count numeric,
    bankruptcy_code character varying(1),
    bankruptcy_chapter character varying(10),
    bankruptcy_disposition_date date,
    bankruptcy_disposition_desc character varying(10),
    foreclosure_flag character varying(1),
    forebearance_flag character varying(1),
    forebearance_amt numeric,
    do_not_market_flag character varying(1),
    mi_type character varying(15),
    mi_amt numeric,
    customer_id_prim character varying(50),
    last_name_prim character varying(80),
    first_name_prim character varying(80),
    full_name_prim character varying(80),
    ssn_prim character varying(10),
    mail_address_id character varying(100),
    mail_address1 character varying(80),
    mail_address2 character varying(80),
    mail_city character varying(80),
    mail_state character varying(2),
    mail_zip character varying(5),
    home_phone_prim character varying(10),
    email_address_prim character varying(80),
    work_phone_prim character varying(10),
    cell_phone_prim character varying(10),
    dns_mail_flag character varying(1),
    dns_phone_flag character varying(1),
    dns_email_flag_prim character varying(1),
    employee_flag character varying(1),
    original_fico_prim numeric,
    current_fico_prim numeric,
    customer_id_secd character varying(50),
    last_name_secd character varying(80),
    first_name_secd character varying(80),
    full_name_secd character varying(80),
    ssn_secd character varying(10),
    email_address_secd character varying(80),
    home_phone_secd character varying(10),
    dns_email_flag_secd character varying(1),
    original_fico_secd numeric,
    current_fico_secd numeric,
    prop_address_id character varying(100),
    prop_address1 character varying(80),
    prop_address2 character varying(80),
    prop_city character varying(80),
    prop_state character varying(2),
    prop_zip character varying(5),
    original_appraised_value numeric,
    original_ltv numeric,
    current_property_value numeric,
    ltv numeric,
    current_occupancy_type character varying(80),
    current_occupancy_code character varying(5),
    property_type character varying(80),
    property_type_code character varying(5),
    number_of_units character varying(1),
    channel character varying(15),
    assigned_lo character varying(80)
);


ALTER TABLE shivay.mst_loan OWNER TO postgres;

--
-- TOC entry 367 (class 1259 OID 73339)
-- Name: loan_input_tab; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.loan_input_tab AS
 SELECT 'PENFED'::text AS company_name,
    l.unique_id,
    720 AS current_borrower_fico,
    l.prop_state AS current_prop_state,
    l.prop_zip AS current_prop_zip,
    l.unpaid_balance AS current_loan_upb,
    l.interest_rate AS current_loan_rate,
    l.principal_and_interest AS current_loan_pi,
    COALESCE(l.mi_amt, (0)::numeric) AS current_loan_mi,
    l.loan_type AS current_loan_type,
    l.loan_term AS current_loan_term,
    l.origination_date AS current_loan_org_date,
    l.remaining_term AS current_loan_rem_term,
    0 AS current_second_lien_amt,
    l.current_property_value AS current_prop_value,
    l.property_type_code AS current_property_type,
    l.current_occupancy_code AS current_occupancy_type,
    l.number_of_units AS current_number_of_units,
    NULL::text AS investor_name
   FROM shivay.mst_loan l
  WHERE (((l.lien_position)::text = '01'::text) AND ((l.loan_status_code)::text = '1'::text) AND (l.current_property_value > (0)::numeric) AND (l.unpaid_balance > (0)::numeric) AND (l.interest_rate > (0)::numeric) AND (l.principal_and_interest > (0)::numeric));


ALTER TABLE shivay.loan_input_tab OWNER TO postgres;

--
-- TOC entry 371 (class 1259 OID 73374)
-- Name: meta_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.meta_data (
    name text,
    value text
);


ALTER TABLE shivay.meta_data OWNER TO postgres;

--
-- TOC entry 388 (class 1259 OID 117374)
-- Name: mst_lead_lookups; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.mst_lead_lookups (
    "User" text,
    "Group" text,
    "Lead Source" text,
    "Status" text,
    "Tavant_Status" text,
    "LQ Status" text,
    "NQ Reason" text,
    sales_channel text,
    workable_lead text,
    lead_channel text,
    lead_campaign text,
    lead_status_grp text,
    lq_contact text,
    lq_transfer text,
    lo_contact text
);


ALTER TABLE shivay.mst_lead_lookups OWNER TO postgres;

--
-- TOC entry 257 (class 1259 OID 16834)
-- Name: pricing_lender_pricing_assumptions; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.pricing_lender_pricing_assumptions (
    company_name character varying(50),
    base_cashout_ltv_per numeric,
    lock_period numeric,
    min_base_points numeric,
    max_base_points numeric,
    base_fee numeric,
    interim_interest_flag character varying(1)
);


ALTER TABLE shivay.pricing_lender_pricing_assumptions OWNER TO postgres;

--
-- TOC entry 258 (class 1259 OID 16840)
-- Name: pricing_llpa_dump; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.pricing_llpa_dump (
    company_name character varying(50),
    llpa_code numeric,
    llpa_source character varying(20),
    llpa_description character varying(70),
    purpose_code text,
    program_type text,
    property_type text,
    amort_type text,
    occupancy_type text,
    number_of_units text,
    llpa_prop_state text,
    min_llpa_upb numeric,
    max_llpa_upb numeric,
    min_llpa_ltv numeric,
    max_llpa_ltv numeric,
    min_llpa_fico numeric,
    max_llpa_fico numeric,
    min_llpa_cltv numeric,
    max_llpa_cltv numeric,
    min_llpa_term numeric,
    max_llpa_term numeric,
    llpa_pts numeric
);


ALTER TABLE shivay.pricing_llpa_dump OWNER TO postgres;

--
-- TOC entry 259 (class 1259 OID 16846)
-- Name: pricing_offers; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.pricing_offers (
    unique_id character varying(20) NOT NULL,
    rt text,
    te text,
    tr text,
    co text,
    prod_rt character varying(75),
    prod_te character varying(75),
    prod_tr character varying(75),
    prod_co character varying(75),
    id_rt character varying(13),
    id_te character varying(13),
    id_tr character varying(13),
    id_co character varying(13)
);


ALTER TABLE shivay.pricing_offers OWNER TO postgres;

--
-- TOC entry 260 (class 1259 OID 16852)
-- Name: pricing_output_tab; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.pricing_output_tab (
    company_name character varying(50),
    unique_id character varying(20),
    scenario_id character varying(13) NOT NULL,
    credit_score numeric,
    rate_date date,
    lock_period numeric,
    new_loan_purpose character varying(50),
    new_program_type character varying(10),
    new_product_id character varying(20),
    new_product_description character varying(75),
    new_amort_type character varying(1),
    new_term numeric,
    new_loan_amount numeric,
    new_ltv numeric,
    new_rate numeric,
    new_arm_reset_rate numeric,
    new_arm_reset_term numeric,
    new_net_llpa numeric,
    new_points_pct numeric,
    new_apr numeric,
    new_base_fees numeric,
    new_points_dol numeric,
    new_interim_int numeric,
    new_fees_total numeric,
    new_pi numeric,
    new_pi_savings_mo numeric,
    new_pimi_savings_mo numeric,
    new_cashout numeric,
    new_lol_savings numeric,
    new_term_reduction numeric,
    new_ufmip_pct numeric,
    new_mip_pct numeric,
    new_mip_duration numeric,
    new_mi numeric,
    new_ufmip numeric
);


ALTER TABLE shivay.pricing_output_tab OWNER TO postgres;

--
-- TOC entry 261 (class 1259 OID 16858)
-- Name: pricing_product_dump; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.pricing_product_dump (
    company_name character varying(50),
    product_id character varying(20),
    product_description character varying(75),
    product_term numeric,
    program_type character varying(10),
    amort_type character varying(1),
    min_prod_ltv numeric,
    max_prod_ltv numeric,
    min_prod_upb numeric,
    max_prod_upb numeric,
    mi_rate_type character varying(1),
    first_adj numeric,
    first_inc numeric,
    sec_adj numeric,
    sec_inc numeric,
    margin numeric,
    indx numeric,
    life_cap numeric
);


ALTER TABLE shivay.pricing_product_dump OWNER TO postgres;

--
-- TOC entry 262 (class 1259 OID 16864)
-- Name: pricing_ratesheet_dump; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.pricing_ratesheet_dump (
    company_name character varying(50),
    rate_date date,
    product_id character varying(20),
    product_description character varying(75),
    lock_period numeric,
    rate numeric,
    points numeric
);


ALTER TABLE shivay.pricing_ratesheet_dump OWNER TO postgres;

--
-- TOC entry 263 (class 1259 OID 16870)
-- Name: pricing_summary; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.pricing_summary (
    segment text,
    exclusion text,
    current_upb text,
    current_rate text,
    current_ltv text,
    kit text,
    offer text,
    pi_sav text,
    term_ext text,
    term_red text,
    cashout text,
    pi_sav_prod character varying(75),
    term_ext_prod character varying(75),
    term_red_prod character varying(75),
    cashout_prod character varying(75),
    no_of_loans bigint,
    email_eligible_cnt bigint,
    date_added date,
    rec_id numeric NOT NULL
);


ALTER TABLE shivay.pricing_summary OWNER TO postgres;

--
-- TOC entry 264 (class 1259 OID 16876)
-- Name: pricing_waterfall; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.pricing_waterfall (
    unique_id character varying(20) NOT NULL,
    segment text,
    exclusion text,
    email_eligible integer,
    upb text,
    rate text,
    ltv text,
    unpaid_balance numeric,
    loan_amount numeric
);


ALTER TABLE shivay.pricing_waterfall OWNER TO postgres;

--
-- TOC entry 397 (class 1259 OID 144976)
-- Name: reporting_cmp_campaign; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_cmp_campaign (
    cell_key numeric,
    cell_id character varying(10),
    campaign_id character varying(100),
    lot_no character varying(10),
    time_period character varying(7),
    program_group character varying(10),
    channel character varying(10),
    file_date date,
    campaign_start_date date,
    campaign_end_date date,
    offer_key numeric,
    creative_key numeric,
    vendor_key numeric,
    file_key numeric,
    phone_number character varying(15),
    utm_string character varying(50),
    est_quantity numeric,
    cost_per_piece numeric,
    est_response_rate numeric,
    est_app_rate numeric,
    executed_flag character varying(1),
    processed_flag character varying(1)
);


ALTER TABLE shivay.reporting_cmp_campaign OWNER TO postgres;

--
-- TOC entry 398 (class 1259 OID 144982)
-- Name: reporting_cmp_channel; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_cmp_channel (
    channel character varying(10),
    channel_description character varying(50)
);


ALTER TABLE shivay.reporting_cmp_channel OWNER TO postgres;

--
-- TOC entry 399 (class 1259 OID 144985)
-- Name: reporting_cmp_creative; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_cmp_creative (
    creative_key numeric,
    creative_id character varying(20),
    creative_description character varying(50),
    creative_repository_link text
);


ALTER TABLE shivay.reporting_cmp_creative OWNER TO postgres;

--
-- TOC entry 400 (class 1259 OID 144991)
-- Name: reporting_cmp_disposition_history; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_cmp_disposition_history (
    record_id numeric,
    campaign_id character varying(100),
    campaign_date date,
    disposition_date timestamp without time zone,
    disposition_description character varying(50),
    cnt_sent numeric,
    cnt_opened numeric,
    cnt_clicked numeric,
    cnt_bounced numeric,
    cnt_unsubscribed numeric,
    customer_id character varying(50),
    customer_segment character varying(30),
    cell_key numeric
);


ALTER TABLE shivay.reporting_cmp_disposition_history OWNER TO postgres;

--
-- TOC entry 401 (class 1259 OID 144997)
-- Name: reporting_cmp_offer; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_cmp_offer (
    offer_key numeric,
    offer_id character varying(30),
    offer_description text
);


ALTER TABLE shivay.reporting_cmp_offer OWNER TO postgres;

--
-- TOC entry 402 (class 1259 OID 145003)
-- Name: reporting_cmp_program; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_cmp_program (
    program_group character varying(10),
    program_description character varying(50),
    program_details text
);


ALTER TABLE shivay.reporting_cmp_program OWNER TO postgres;

--
-- TOC entry 403 (class 1259 OID 145009)
-- Name: reporting_jornaya_report; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_jornaya_report (
    log_date date,
    lead_id character varying(15),
    first_event_day_flag text,
    first_record_flag bigint,
    general_events_1day bigint,
    general_events_7day bigint,
    purchase_events_1day bigint,
    purchase_events_7day bigint,
    refinance_events_1day bigint,
    refinance_events_7day bigint,
    heloc_events_1day bigint,
    heloc_events_7day bigint,
    reverse_events_1day bigint,
    reverse_events_7day bigint,
    homebuyer_events_1day bigint,
    homebuyers_events_7day bigint,
    purchase_1 numeric,
    purchase_2 numeric,
    purchase_day_12 numeric,
    purchase_day_22 numeric,
    purchase_day_30 numeric,
    purchase_day_45 numeric,
    purchase_day_60 numeric,
    refinance_1 numeric,
    refinance_2 numeric,
    unique_email_open_count numeric,
    email_bounced integer,
    email_sent_count numeric,
    last_email_sent_date date,
    last_email_link_clicked_date date,
    email_links_clicked_count numeric,
    jo_id character varying,
    jo_lead_date date,
    jo_lead_status character varying,
    jo_lq_status character varying,
    rec_cnt integer,
    jo_lead_cnt integer,
    jo_app_cnt integer,
    jo_fund_cnt integer,
    lead_rank bigint
);


ALTER TABLE shivay.reporting_jornaya_report OWNER TO postgres;

--
-- TOC entry 404 (class 1259 OID 145015)
-- Name: reporting_mst_app; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_mst_app (
    app_no character varying(15),
    app_channel character varying(30),
    app_branch character varying(30),
    app_lnoff_cd character varying(10),
    app_lnoff_name character varying(80),
    app_create_date date,
    app_rate_lock_date date,
    app_setup_date date,
    app_fund_date date,
    app_cancel_date date,
    app_status_code character varying(10),
    app_status_desc character varying(50),
    app_status_date date,
    app_source character varying(70),
    app_purpose_code character varying(10),
    app_purpose_desc character varying(75),
    app_loan_amt numeric,
    app_term numeric,
    app_rate numeric,
    app_pi numeric,
    app_prop_city character varying(70),
    app_prop_state character varying(2),
    app_prop_zip character varying(5),
    app_appraised_value numeric,
    app_ltv numeric,
    app_cancel_reason character varying(70),
    app_decline_reason character varying(70),
    app_total_cl_cost numeric,
    app_disc_pts_amt numeric,
    app_product_code character varying(10),
    app_product_desc character varying(70),
    app_product_group character varying(30),
    app_fa_flag character varying(1),
    app_property_type character varying(50),
    app_occupancy_type character varying(50),
    lead_id character varying(15),
    attributed_lead_id character varying(15),
    current_customer_id character varying(50),
    attributed_customer_id character varying(50),
    attributed_mktg_campaign character varying(100),
    attributed_disposition_no numeric,
    customer_segment character varying(30)
);


ALTER TABLE shivay.reporting_mst_app OWNER TO postgres;

--
-- TOC entry 405 (class 1259 OID 145021)
-- Name: reporting_mst_lead; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_mst_lead (
    lead_id character varying(15),
    referral_source character varying(50),
    sales_channel character varying(30),
    mktg_channel character varying(30),
    lead_source character varying(70),
    prop_value numeric,
    lead_fico numeric,
    property_city character varying(75),
    property_state character varying(2),
    property_zip character varying(20),
    loan_purpose character varying(75),
    property_type character varying(50),
    current_need_situation character varying(80),
    purpose_of_refinance character varying(50),
    loan_type character varying(50),
    loan_amount numeric,
    lead_status character varying(70),
    lead_create_date date,
    lo_name character varying(80),
    lo_nmls character varying(10),
    parent_lead character varying(15),
    crm_campaign_name character varying(100),
    crm_campaign_id character varying(100),
    first_contact_date date,
    last_action_taken character varying(70),
    last_action_taken_date date,
    time_period character varying(8),
    workable_lead character varying(1),
    first_contact_attempt_date date,
    total_contact_attempts numeric,
    first_contact_attempt_type character varying(70),
    first_contact_made_date date,
    first_contact_made_type character varying(70),
    lead_status_grp character varying(40),
    first_va_loan character varying(1),
    cash_out_amount numeric,
    first_time_homebuyer character varying(20),
    app_no character varying(15),
    current_customer_id character varying(50),
    attributed_app_no character varying(15),
    attributed_customer_id character varying(50),
    attributed_mktg_campaign character varying(100),
    attributed_disposition_no numeric,
    customer_segment character varying(30),
    lq_lead_id character varying(15),
    lq_campaign_id character varying(100),
    lq_status character varying(30),
    crm_system character varying(15)
);


ALTER TABLE shivay.reporting_mst_lead OWNER TO postgres;

--
-- TOC entry 406 (class 1259 OID 145027)
-- Name: reporting_mst_loan; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_mst_loan (
    unique_id character varying(20),
    current_borrower_fico integer,
    lien_position character varying(2),
    portfolio character varying(30),
    org_loan_amount numeric,
    current_prop_state character varying(2),
    current_prop_zip character varying(5),
    current_loan_upb numeric,
    current_loan_rate numeric,
    current_loan_pi numeric,
    current_loan_mi numeric,
    current_loan_type character varying(1),
    current_loan_term numeric,
    current_loan_org_date date,
    current_loan_rem_term numeric,
    current_second_lien_amt numeric,
    current_prop_value numeric,
    current_property_type character varying(5),
    current_occupancy_type character varying(5),
    current_number_of_units character varying(1),
    investor_name text
);


ALTER TABLE shivay.reporting_mst_loan OWNER TO postgres;

--
-- TOC entry 407 (class 1259 OID 145033)
-- Name: reporting_pricing_offers; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_pricing_offers (
    unique_id character varying(20),
    rt character varying,
    te character varying,
    tr character varying,
    co character varying,
    prod_rt character varying(75),
    prod_te character varying(75),
    prod_tr character varying(75),
    prod_co character varying(75),
    id_rt character varying(13),
    id_te character varying(13),
    id_tr character varying(13),
    id_co character varying(13)
);


ALTER TABLE shivay.reporting_pricing_offers OWNER TO postgres;

--
-- TOC entry 409 (class 1259 OID 145045)
-- Name: reporting_pricing_summary; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_pricing_summary (
    segment character varying,
    exclusion character varying,
    current_upb character varying,
    current_rate character varying,
    current_ltv character varying,
    kit character varying,
    offer character varying,
    pi_sav character varying,
    term_ext character varying,
    term_red character varying,
    cashout character varying,
    pi_sav_prod character varying(75),
    term_ext_prod character varying(75),
    term_red_prod character varying(75),
    cashout_prod character varying(75),
    no_of_loans bigint,
    email_eligible_cnt bigint,
    date_added date,
    rec_id numeric
);


ALTER TABLE shivay.reporting_pricing_summary OWNER TO postgres;

--
-- TOC entry 410 (class 1259 OID 145051)
-- Name: reporting_pricing_waterfall; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_pricing_waterfall (
    unique_id character varying(20),
    segment character varying,
    exclusion character varying,
    email_eligible integer,
    upb character varying,
    rate character varying,
    ltv character varying,
    unpaid_balance numeric,
    loan_amount numeric
);


ALTER TABLE shivay.reporting_pricing_waterfall OWNER TO postgres;

--
-- TOC entry 408 (class 1259 OID 145039)
-- Name: reporting_share_of_wallet; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.reporting_share_of_wallet (
    loan_origination_month text,
    lender character varying,
    loan_type text,
    loan_purpose text,
    member_segment text,
    age double precision,
    loan_amount numeric,
    ltv numeric,
    interest_rate numeric,
    property_state character varying(50),
    total_originations bigint,
    pf_originations bigint
);


ALTER TABLE shivay.reporting_share_of_wallet OWNER TO postgres;

--
-- TOC entry 265 (class 1259 OID 16963)
-- Name: rpt_cmp_campaign; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_cmp_campaign AS
 SELECT cmp_campaign.cell_key,
    cmp_campaign.cell_id,
    cmp_campaign.campaign_id,
    cmp_campaign.lot_no,
    cmp_campaign.time_period,
    cmp_campaign.program_group,
    cmp_campaign.channel,
    cmp_campaign.file_date,
    cmp_campaign.campaign_start_date,
    cmp_campaign.campaign_end_date,
    cmp_campaign.offer_key,
    cmp_campaign.creative_key,
    cmp_campaign.vendor_key,
    cmp_campaign.file_key,
    cmp_campaign.phone_number,
    cmp_campaign.utm_string,
    cmp_campaign.est_quantity,
    cmp_campaign.cost_per_piece,
    cmp_campaign.est_response_rate,
    cmp_campaign.est_app_rate,
    cmp_campaign.executed_flag,
    cmp_campaign.processed_flag
   FROM shivay.cmp_campaign;


ALTER TABLE shivay.rpt_cmp_campaign OWNER TO postgres;

--
-- TOC entry 266 (class 1259 OID 16967)
-- Name: rpt_cmp_channel; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_cmp_channel AS
 SELECT cmp_channel.channel,
    cmp_channel.channel_description
   FROM shivay.cmp_channel;


ALTER TABLE shivay.rpt_cmp_channel OWNER TO postgres;

--
-- TOC entry 267 (class 1259 OID 16971)
-- Name: rpt_cmp_creative; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_cmp_creative AS
 SELECT cmp_creative.creative_key,
    cmp_creative.creative_id,
    cmp_creative.creative_description,
    cmp_creative.creative_repository_link
   FROM shivay.cmp_creative;


ALTER TABLE shivay.rpt_cmp_creative OWNER TO postgres;

--
-- TOC entry 268 (class 1259 OID 16975)
-- Name: rpt_cmp_disposition_history; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_cmp_disposition_history AS
 SELECT cmp_disposition_history.record_id,
    cmp_disposition_history.campaign_id,
    cmp_disposition_history.campaign_date,
    cmp_disposition_history.disposition_date,
    cmp_disposition_history.disposition_description,
    cmp_disposition_history.cnt_sent,
    cmp_disposition_history.cnt_opened,
    cmp_disposition_history.cnt_clicked,
    cmp_disposition_history.cnt_bounced,
    cmp_disposition_history.cnt_unsubscribed,
    cmp_disposition_history.customer_id,
    cmp_disposition_history.customer_segment,
    cmp_disposition_history.cell_key
   FROM shivay.cmp_disposition_history;


ALTER TABLE shivay.rpt_cmp_disposition_history OWNER TO postgres;

--
-- TOC entry 269 (class 1259 OID 16979)
-- Name: rpt_cmp_offer; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_cmp_offer AS
 SELECT cmp_offer.offer_key,
    cmp_offer.offer_id,
    cmp_offer.offer_description
   FROM shivay.cmp_offer;


ALTER TABLE shivay.rpt_cmp_offer OWNER TO postgres;

--
-- TOC entry 270 (class 1259 OID 16983)
-- Name: rpt_cmp_program; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_cmp_program AS
 SELECT cmp_program.program_group,
    cmp_program.program_description,
    cmp_program.program_details
   FROM shivay.cmp_program;


ALTER TABLE shivay.rpt_cmp_program OWNER TO postgres;

--
-- TOC entry 271 (class 1259 OID 16987)
-- Name: stg_jornaya_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_jornaya_data (
    id character varying(15),
    date_added date,
    encompass_guid character varying(50),
    encompass_loan_number character varying(15),
    log_note character varying(100),
    log_type character varying(50),
    log_date timestamp without time zone,
    log_result character varying(15),
    loan_purpose character varying(30),
    general_events_1day character varying(10),
    general_events_7day character varying(10),
    purchase_events_1day character varying(10),
    purchase_events_7day character varying(10),
    refinance_events_1day character varying(10),
    refinance_events_7day character varying(10),
    heloc_events_1day character varying(10),
    heloc_events_7day character varying(10),
    reverse_events_1day character varying(10),
    reverse_events_7day character varying(10),
    homebuyer_events_1day character varying(10),
    homebuyers_events_7day character varying(10),
    time_of_day_shopping_min_1day character varying(15),
    time_of_day_shopping_max_1day character varying(15),
    time_of_day_shopping_min_7day character varying(15),
    time_of_day_shopping_max_7day character varying(15)
);


ALTER TABLE shivay.stg_jornaya_data OWNER TO postgres;

--
-- TOC entry 272 (class 1259 OID 16990)
-- Name: rpt_jornaya_report; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_jornaya_report AS
 SELECT t.log_date,
    t.lead_id,
    t.first_event_day_flag,
    t.first_record_flag,
    t.general_events_1day,
    t.general_events_7day,
    t.purchase_events_1day,
    t.purchase_events_7day,
    t.refinance_events_1day,
    t.refinance_events_7day,
    t.heloc_events_1day,
    t.heloc_events_7day,
    t.reverse_events_1day,
    t.reverse_events_7day,
    t.homebuyer_events_1day,
    t.homebuyers_events_7day,
    t.purchase_1,
    t.purchase_2,
    t.purchase_day_12,
    t.purchase_day_22,
    t.purchase_day_30,
    t.purchase_day_45,
    t.purchase_day_60,
    t.refinance_1,
    t.refinance_2,
    t.unique_email_open_count,
    t.email_bounced,
    t.email_sent_count,
    t.last_email_sent_date,
    t.last_email_link_clicked_date,
    t.email_links_clicked_count,
    t.jo_id,
    t.jo_lead_date,
    t.jo_lead_status,
    t.jo_lq_status,
    t.rec_cnt,
    t.jo_lead_cnt,
    t.jo_app_cnt,
    t.jo_fund_cnt,
    row_number() OVER (PARTITION BY t.lead_id ORDER BY t.jo_id) AS lead_rank
   FROM ( SELECT e.log_date,
            e.lead_id,
                CASE
                    WHEN ((b.purchase_1 > (0)::numeric) OR (b.refinance_1 > (0)::numeric)) THEN 'Y'::text
                    ELSE 'N'::text
                END AS first_event_day_flag,
            row_number() OVER (PARTITION BY e.lead_id ORDER BY e.log_date) AS first_record_flag,
            e.general_events_1day,
            e.general_events_7day,
            e.purchase_events_1day,
            e.purchase_events_7day,
            e.refinance_events_1day,
            e.refinance_events_7day,
            e.heloc_events_1day,
            e.heloc_events_7day,
            e.reverse_events_1day,
            e.reverse_events_7day,
            e.homebuyer_events_1day,
            e.homebuyers_events_7day,
            b.purchase_1,
            b.purchase_2,
            b.purchase_day_12,
            b.purchase_day_22,
            b.purchase_day_30,
            b.purchase_day_45,
            b.purchase_day_60,
            b.refinance_1,
            b.refinance_2,
            v."Unique_Email_Open_Count" AS unique_email_open_count,
                CASE
                    WHEN ((v."Email_Bounced")::text = 'TRUE'::text) THEN 1
                    ELSE 0
                END AS email_bounced,
            v."Email_Sent_Count" AS email_sent_count,
            v."Last_Email_Sent_Date" AS last_email_sent_date,
            v."Last_Email_Link_Clicked_Date" AS last_email_link_clicked_date,
            v."Email_Links_Clicked_Count" AS email_links_clicked_count,
                CASE
                    WHEN ((jo.jo_id IS NOT NULL) AND (jo.jo_lead_date >= e.log_date)) THEN jo.jo_id
                    ELSE NULL::character varying
                END AS jo_id,
                CASE
                    WHEN ((jo.jo_id IS NOT NULL) AND (jo.jo_lead_date >= e.log_date)) THEN jo.jo_lead_date
                    ELSE NULL::date
                END AS jo_lead_date,
                CASE
                    WHEN ((jo.jo_id IS NOT NULL) AND (jo.jo_lead_date >= e.log_date)) THEN jo.jo_lead_status
                    ELSE NULL::character varying
                END AS jo_lead_status,
                CASE
                    WHEN ((jo.jo_id IS NOT NULL) AND (jo.jo_lead_date >= e.log_date)) THEN jo.jo_lq_status
                    ELSE NULL::character varying
                END AS jo_lq_status,
            1 AS rec_cnt,
                CASE
                    WHEN ((jo.jo_id IS NOT NULL) AND (jo.jo_lead_date >= e.log_date)) THEN 1
                    ELSE NULL::integer
                END AS jo_lead_cnt,
                CASE
                    WHEN ((jo.jo_id IS NOT NULL) AND (jo.jo_lead_date >= e.log_date)) THEN jo.app_cnt
                    ELSE NULL::integer
                END AS jo_app_cnt,
                CASE
                    WHEN ((jo.jo_id IS NOT NULL) AND (jo.jo_lead_date >= e.log_date)) THEN jo.fund_cnt
                    ELSE NULL::integer
                END AS jo_fund_cnt
           FROM (((( SELECT z.log_date,
                    z.lead_id,
                    sum(
                        CASE
                            WHEN (z.general_events_1day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS general_events_1day,
                    sum(
                        CASE
                            WHEN (z.general_events_7day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS general_events_7day,
                    sum(
                        CASE
                            WHEN (z.purchase_events_1day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS purchase_events_1day,
                    sum(
                        CASE
                            WHEN (z.purchase_events_7day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS purchase_events_7day,
                    sum(
                        CASE
                            WHEN (z.refinance_events_1day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS refinance_events_1day,
                    sum(
                        CASE
                            WHEN (z.refinance_events_7day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS refinance_events_7day,
                    sum(
                        CASE
                            WHEN (z.heloc_events_1day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS heloc_events_1day,
                    sum(
                        CASE
                            WHEN (z.heloc_events_7day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS heloc_events_7day,
                    sum(
                        CASE
                            WHEN (z.reverse_events_1day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS reverse_events_1day,
                    sum(
                        CASE
                            WHEN (z.reverse_events_7day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS reverse_events_7day,
                    sum(
                        CASE
                            WHEN (z.homebuyer_events_1day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS homebuyer_events_1day,
                    sum(
                        CASE
                            WHEN (z.homebuyers_events_7day IS NOT NULL) THEN 1
                            ELSE 0
                        END) AS homebuyers_events_7day
                   FROM ( SELECT DISTINCT (stg_jornaya_data.log_date)::date AS log_date,
                            stg_jornaya_data.id AS lead_id,
                            stg_jornaya_data.general_events_1day,
                            stg_jornaya_data.general_events_7day,
                            stg_jornaya_data.purchase_events_1day,
                            stg_jornaya_data.purchase_events_7day,
                            stg_jornaya_data.refinance_events_1day,
                            stg_jornaya_data.refinance_events_7day,
                            stg_jornaya_data.heloc_events_1day,
                            stg_jornaya_data.heloc_events_7day,
                            stg_jornaya_data.reverse_events_1day,
                            stg_jornaya_data.reverse_events_7day,
                            stg_jornaya_data.homebuyer_events_1day,
                            stg_jornaya_data.homebuyers_events_7day
                           FROM shivay.stg_jornaya_data) z
                  GROUP BY z.log_date, z.lead_id) e
             LEFT JOIN ( SELECT to_date(substr((x.str1)::text, 1, 10), 'mm/dd/yyyy'::text) AS log_date,
                    (substr((x.str1)::text, 12, 30))::character varying(15) AS lead_id,
                    COALESCE(x.purchase_1, (0)::numeric) AS purchase_1,
                    COALESCE(x.purchase_2, (0)::numeric) AS purchase_2,
                    COALESCE(x.purchase_day_12, (0)::numeric) AS purchase_day_12,
                    COALESCE(x.purchase_day_22, (0)::numeric) AS purchase_day_22,
                    COALESCE(x.purchase_day_30, (0)::numeric) AS purchase_day_30,
                    COALESCE(x.purchase_day_45, (0)::numeric) AS purchase_day_45,
                    COALESCE(x.purchase_day_60, (0)::numeric) AS purchase_day_60,
                    COALESCE(x.refinance_1, (0)::numeric) AS refinance_1,
                    COALESCE(x.refinance_2, (0)::numeric) AS refinance_2
                   FROM ( SELECT crosstab.str1,
                            crosstab.purchase_1,
                            crosstab.purchase_2,
                            crosstab.purchase_day_12,
                            crosstab.purchase_day_22,
                            crosstab.purchase_day_30,
                            crosstab.purchase_day_45,
                            crosstab.purchase_day_60,
                            crosstab.refinance_1,
                            crosstab.refinance_2
                           FROM public.crosstab('select distinct
			to_char(log_date::date,''mm/dd/yyyy'') || ''-'' || id as str1,
			log_note as campaign_type,
			count(*) as cnt
			from shivay.stg_jornaya_data
			where log_type <> ''Email Queued''
			group by 1,2
			order by 1;'::text, 'select distinct log_note from shivay.stg_jornaya_data order by 1'::text) crosstab(str1 character varying(30), purchase_1 numeric, purchase_2 numeric, purchase_day_12 numeric, purchase_day_22 numeric, purchase_day_30 numeric, purchase_day_45 numeric, purchase_day_60 numeric, refinance_1 numeric, refinance_2 numeric)) x) b ON (((e.log_date = b.log_date) AND ((e.lead_id)::text = (b.lead_id)::text))))
             JOIN ( SELECT velocify_data_typed.id,
                    velocify_data_typed."Id",
                    velocify_data_typed."Lead Source",
                    velocify_data_typed."Status",
                    velocify_data_typed."Milestone",
                    velocify_data_typed."User",
                    velocify_data_typed."User Id",
                    velocify_data_typed."Group",
                    velocify_data_typed."Date Added",
                    velocify_data_typed."Date Modified",
                    velocify_data_typed."Action Count",
                    velocify_data_typed."Total Contact Attempts",
                    velocify_data_typed."Lead Type",
                    velocify_data_typed."Last Action",
                    velocify_data_typed."Last Action Date",
                    velocify_data_typed."Last Assignment Date",
                    velocify_data_typed."Last Distribution Date",
                    velocify_data_typed."Last Assignment / Distribution Date",
                    velocify_data_typed."Last Distributed By",
                    velocify_data_typed."First Contact Attempt Date",
                    velocify_data_typed."Last Contact Attempt Date",
                    velocify_data_typed."First Assignment / Distribution Date",
                    velocify_data_typed."First Assignment / Distribution User",
                    velocify_data_typed."Parent Lead Id",
                    velocify_data_typed."Child Count",
                    velocify_data_typed."Lead Source Group",
                    velocify_data_typed."Ref Id",
                    velocify_data_typed."Lead Source1",
                    velocify_data_typed."LQ Status",
                    velocify_data_typed."NQ Reason",
                    velocify_data_typed."Source of File",
                    velocify_data_typed."LQ Lead ID1",
                    velocify_data_typed."LQ Campaign",
                    velocify_data_typed."HttpReferrer",
                    velocify_data_typed."Lead Price Paid ($)",
                    velocify_data_typed."LQ Lead Source",
                    velocify_data_typed."Loan Purpose",
                    velocify_data_typed."Purchase Plan",
                    velocify_data_typed."Current Home Status",
                    velocify_data_typed."1st Time Buyer",
                    velocify_data_typed."Lead Purpose",
                    velocify_data_typed."LQ Lead ID",
                    velocify_data_typed."Marital Status",
                    velocify_data_typed."Date of Birth",
                    velocify_data_typed."Occupational Status",
                    velocify_data_typed."Credit Score",
                    velocify_data_typed."Employment Length In Years",
                    velocify_data_typed."Dependent Count",
                    velocify_data_typed."Co-Borrower First Name",
                    velocify_data_typed."Middle Name (Co-Borrower)",
                    velocify_data_typed."Co-Borrower Last Name",
                    velocify_data_typed."Co-Borrower Email",
                    velocify_data_typed."Day Phone (Co-Borrower)",
                    velocify_data_typed."Co-Borrower Home Phone",
                    velocify_data_typed."Co-Borrower Mobile Phone",
                    velocify_data_typed."Co-Borrower Street",
                    velocify_data_typed."Co-Borrower City",
                    velocify_data_typed."Co-Borrower State",
                    velocify_data_typed."Co-Borrower Zip Code",
                    velocify_data_typed."County (Co-Borrower)",
                    velocify_data_typed."Years in Property (Co-Borrower)",
                    velocify_data_typed."Co-Borrower Marital Status",
                    velocify_data_typed."Co-Borrower Date Of Birth",
                    velocify_data_typed."Property Street",
                    velocify_data_typed."Property City",
                    velocify_data_typed."Property Zip Code",
                    velocify_data_typed."Property County",
                    velocify_data_typed."Property State",
                    velocify_data_typed."Existing Home Value",
                    velocify_data_typed."Years in Property",
                    velocify_data_typed."Year Built",
                    velocify_data_typed."Property Type (from Summary)",
                    velocify_data_typed."First Loan Amount",
                    velocify_data_typed."First Rate Type",
                    velocify_data_typed."First Rate (_)",
                    velocify_data_typed."Second Loan Amount",
                    velocify_data_typed."Second Rate Type",
                    velocify_data_typed."Second Rate (_)",
                    velocify_data_typed."Loan Type",
                    velocify_data_typed."LMB Preferred Loan Type",
                    velocify_data_typed."Mortgage Lien Type",
                    velocify_data_typed."Amortization Type",
                    velocify_data_typed."Current Need Situation",
                    velocify_data_typed."Purchase Price (from Summary)",
                    velocify_data_typed."Loan Amount (from Summary)",
                    velocify_data_typed."Down Payment Amount",
                    velocify_data_typed."Loan Term (years)",
                    velocify_data_typed."Subordinate Financing Amount",
                    velocify_data_typed."Loan To Value (LTV)",
                    velocify_data_typed."Combined LTV (CLTV)",
                    velocify_data_typed."Loan Term (months)",
                    velocify_data_typed."Year Acquired",
                    velocify_data_typed."Original Cost",
                    velocify_data_typed."Purpose of Refinance",
                    velocify_data_typed."Total Household Income",
                    velocify_data_typed."Term (years)",
                    velocify_data_typed."Total Housing Expense",
                    velocify_data_typed."Loan Amount (for this tab only)",
                    velocify_data_typed."Interest Rate (_)",
                    velocify_data_typed."First Name",
                    velocify_data_typed."Encompass GUID",
                    velocify_data_typed."Encompass Loan Number",
                    velocify_data_typed."Last Name",
                    velocify_data_typed."Email",
                    velocify_data_typed."Day Phone",
                    velocify_data_typed."Home Phone",
                    velocify_data_typed."Mobile Phone",
                    velocify_data_typed.date_imported,
                    velocify_data_typed."Mortgage_General_Events_1Day",
                    velocify_data_typed."Mortgage_General_Events_7Day",
                    velocify_data_typed."Mortgage_Purchase_Events_1Day",
                    velocify_data_typed."Mortgage_Purchase_Events_7Day",
                    velocify_data_typed."Mortgage_Refinance_Events_1Day",
                    velocify_data_typed."Mortgage_Refinance_Events_7Day",
                    velocify_data_typed."Mortgage_HELOC_Events_1Day",
                    velocify_data_typed."Mortgage_HELOC_Events_7Day",
                    velocify_data_typed."Mortgage_Reverse_Events_1Day",
                    velocify_data_typed."Mortgage_Reverse_Events_7Day",
                    velocify_data_typed."Time_of_Day_Shopping_Min_1Day",
                    velocify_data_typed."Time_of_Day_Shopping_Max_1Day",
                    velocify_data_typed."Time_of_Day_Shopping_Min_7Day",
                    velocify_data_typed."Time_of_Day_Shopping_Max_7Day",
                    velocify_data_typed."Homebuyer_Events_1Day",
                    velocify_data_typed."Homebuyers_Events_7Day",
                    velocify_data_typed."Unique_Email_Open_Count",
                    velocify_data_typed."Email_Bounced",
                    velocify_data_typed."Email_Sent_Count",
                    velocify_data_typed."Last_Email_Sent_Date",
                    velocify_data_typed."Last_Email_Link_Clicked_Date",
                    velocify_data_typed."Email_Links_Clicked_Count"
                   FROM public.velocify_data_typed
                  WHERE ((velocify_data_typed."Lead Source")::text = 'Jornaya Activate'::text)) v ON (((e.lead_id)::text = v."Id")))
             LEFT JOIN ( SELECT z.ja_id,
                    z.jo_id,
                    z.jo_lead_date,
                    z.jo_lead_status,
                    z.jo_lq_lead_id,
                    z.jo_lq_status,
                    z.app_no,
                        CASE
                            WHEN (a.app_setup_date IS NOT NULL) THEN 1
                            ELSE 0
                        END AS app_cnt,
                        CASE
                            WHEN (a.app_fund_date IS NOT NULL) THEN 1
                            ELSE 0
                        END AS fund_cnt
                   FROM (( SELECT DISTINCT ja.lead_id AS ja_id,
                            jo_1.lead_id AS jo_id,
                            jo_1.lead_create_date AS jo_lead_date,
                                CASE
                                    WHEN ((jo_1.lo_name)::text = 'User, Unassigned'::text) THEN 'Unassigned'::character varying
                                    ELSE jo_1.lead_status
                                END AS jo_lead_status,
                            jo_1.lq_lead_id AS jo_lq_lead_id,
                            jo_1.lq_status AS jo_lq_status,
                            row_number() OVER (PARTITION BY jo_1.lead_id ORDER BY jo_1.attributed_app_no) AS rnk,
                            jo_1.attributed_app_no AS app_no
                           FROM (( SELECT mst_lead.lead_id,
                                    mst_lead.lo_name,
                                    mst_lead.lead_create_date,
                                    mst_lead.lead_status,
                                    mst_lead.lq_lead_id,
                                    mst_lead.lq_status,
                                    mst_lead.email,
                                    mst_lead.attributed_customer_id,
                                    mst_lead.attributed_app_no
                                   FROM shivay.mst_lead
                                  WHERE ((mst_lead.lead_source)::text = 'Jornaya Outbound'::text)) jo_1
                             JOIN ( SELECT mst_lead.lead_id,
                                    mst_lead.attributed_customer_id
                                   FROM shivay.mst_lead
                                  WHERE (((mst_lead.lead_source)::text = 'Jornaya Activate'::text) AND ((mst_lead.email)::text ~~ '%@%'::text))) ja ON (((jo_1.attributed_customer_id)::text = (ja.attributed_customer_id)::text)))) z
                     LEFT JOIN shivay.mst_app a ON (((z.app_no)::text = (a.app_no)::text)))
                  WHERE (z.rnk = 1)) jo ON (((e.lead_id)::text = (jo.ja_id)::text)))
          ORDER BY e.lead_id, e.log_date) t;


ALTER TABLE shivay.rpt_jornaya_report OWNER TO postgres;

--
-- TOC entry 273 (class 1259 OID 16995)
-- Name: rpt_mst_app; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_mst_app AS
 SELECT mst_app.app_no,
    mst_app.app_channel,
    mst_app.app_branch,
    mst_app.app_lnoff_cd,
    mst_app.app_lnoff_name,
    mst_app.app_create_date,
    mst_app.app_rate_lock_date,
    mst_app.app_setup_date,
    mst_app.app_fund_date,
    mst_app.app_cancel_date,
    mst_app.app_status_code,
    mst_app.app_status_desc,
    mst_app.app_status_date,
    mst_app.app_source,
    mst_app.app_purpose_code,
    mst_app.app_purpose_desc,
    mst_app.app_loan_amt,
    mst_app.app_term,
    mst_app.app_rate,
    mst_app.app_pi,
    mst_app.app_prop_city,
    mst_app.app_prop_state,
    mst_app.app_prop_zip,
    mst_app.app_appraised_value,
    mst_app.app_ltv,
    mst_app.app_cancel_reason,
    mst_app.app_decline_reason,
    mst_app.app_total_cl_cost,
    mst_app.app_disc_pts_amt,
    mst_app.app_product_code,
    mst_app.app_product_desc,
    mst_app.app_product_group,
    mst_app.app_fa_flag,
    mst_app.app_property_type,
    mst_app.app_occupancy_type,
    mst_app.lead_id,
    mst_app.attributed_lead_id,
    mst_app.current_customer_id,
    mst_app.attributed_customer_id,
    mst_app.attributed_mktg_campaign,
    mst_app.attributed_disposition_no,
    mst_app.customer_segment
   FROM shivay.mst_app;


ALTER TABLE shivay.rpt_mst_app OWNER TO postgres;

--
-- TOC entry 389 (class 1259 OID 117933)
-- Name: rpt_mst_lead; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_mst_lead AS
 SELECT mst_lead.lead_id,
    mst_lead.referral_source,
    mst_lead.sales_channel,
    mst_lead.mktg_channel,
    mst_lead.lead_source,
    mst_lead.prop_value,
    mst_lead.lead_fico,
    mst_lead.property_city,
    mst_lead.property_state,
    mst_lead.property_zip,
    mst_lead.loan_purpose,
    mst_lead.property_type,
    mst_lead.current_need_situation,
    mst_lead.purpose_of_refinance,
    mst_lead.loan_type,
    mst_lead.loan_amount,
    mst_lead.lead_status,
    mst_lead.lead_create_date,
    mst_lead.lo_name,
    mst_lead.lo_nmls,
    mst_lead.parent_lead,
    mst_lead.crm_campaign_name,
    mst_lead.crm_campaign_id,
    mst_lead.first_contact_date,
    mst_lead.last_action_taken,
    mst_lead.last_action_taken_date,
    mst_lead.time_period,
    mst_lead.workable_lead,
    mst_lead.first_contact_attempt_date,
    mst_lead.total_contact_attempts,
    mst_lead.first_contact_attempt_type,
    mst_lead.first_contact_made_date,
    mst_lead.first_contact_made_type,
    mst_lead.lead_status_grp,
    mst_lead.first_va_loan,
    mst_lead.cash_out_amount,
    mst_lead.first_time_homebuyer,
    mst_lead.app_no,
    mst_lead.current_customer_id,
    mst_lead.attributed_app_no,
    mst_lead.attributed_customer_id,
    mst_lead.attributed_mktg_campaign,
    mst_lead.attributed_disposition_no,
    mst_lead.customer_segment,
    mst_lead.lq_lead_id,
    mst_lead.lq_campaign_id,
    mst_lead.lq_status,
    mst_lead.crm_system
   FROM shivay.mst_lead;


ALTER TABLE shivay.rpt_mst_lead OWNER TO postgres;

--
-- TOC entry 274 (class 1259 OID 17005)
-- Name: rpt_mst_loan; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_mst_loan AS
 SELECT l.unique_id,
    720 AS current_borrower_fico,
    l.lien_position,
    l.portfolio,
    l.loan_amount AS org_loan_amount,
    l.prop_state AS current_prop_state,
    l.prop_zip AS current_prop_zip,
    l.unpaid_balance AS current_loan_upb,
    l.interest_rate AS current_loan_rate,
    l.principal_and_interest AS current_loan_pi,
    COALESCE(l.mi_amt, (0)::numeric) AS current_loan_mi,
    l.loan_type AS current_loan_type,
    l.loan_term AS current_loan_term,
    l.origination_date AS current_loan_org_date,
    l.remaining_term AS current_loan_rem_term,
    l.current_2nd_balance AS current_second_lien_amt,
    l.current_property_value AS current_prop_value,
    l.property_type_code AS current_property_type,
    l.current_occupancy_code AS current_occupancy_type,
    l.number_of_units AS current_number_of_units,
    NULL::text AS investor_name
   FROM shivay.mst_loan l
  WHERE ((l.loan_status_code)::text = '1'::text);


ALTER TABLE shivay.rpt_mst_loan OWNER TO postgres;

--
-- TOC entry 275 (class 1259 OID 17010)
-- Name: rpt_pricing_offers; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_pricing_offers AS
 SELECT pricing_offers.unique_id,
    (pricing_offers.rt)::character varying AS rt,
    (pricing_offers.te)::character varying AS te,
    (pricing_offers.tr)::character varying AS tr,
    (pricing_offers.co)::character varying AS co,
    pricing_offers.prod_rt,
    pricing_offers.prod_te,
    pricing_offers.prod_tr,
    pricing_offers.prod_co,
    pricing_offers.id_rt,
    pricing_offers.id_te,
    pricing_offers.id_tr,
    pricing_offers.id_co
   FROM shivay.pricing_offers;


ALTER TABLE shivay.rpt_pricing_offers OWNER TO postgres;

--
-- TOC entry 276 (class 1259 OID 17014)
-- Name: rpt_pricing_summary; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_pricing_summary AS
 SELECT (pricing_summary.segment)::character varying AS segment,
    (pricing_summary.exclusion)::character varying AS exclusion,
    (pricing_summary.current_upb)::character varying AS current_upb,
    (pricing_summary.current_rate)::character varying AS current_rate,
    (pricing_summary.current_ltv)::character varying AS current_ltv,
    (pricing_summary.kit)::character varying AS kit,
    (pricing_summary.offer)::character varying AS offer,
    (pricing_summary.pi_sav)::character varying AS pi_sav,
    (pricing_summary.term_ext)::character varying AS term_ext,
    (pricing_summary.term_red)::character varying AS term_red,
    (pricing_summary.cashout)::character varying AS cashout,
    pricing_summary.pi_sav_prod,
    pricing_summary.term_ext_prod,
    pricing_summary.term_red_prod,
    pricing_summary.cashout_prod,
    pricing_summary.no_of_loans,
    pricing_summary.email_eligible_cnt,
    pricing_summary.date_added,
    pricing_summary.rec_id
   FROM shivay.pricing_summary;


ALTER TABLE shivay.rpt_pricing_summary OWNER TO postgres;

--
-- TOC entry 277 (class 1259 OID 17018)
-- Name: rpt_pricing_waterfall; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_pricing_waterfall AS
 SELECT pricing_waterfall.unique_id,
    (pricing_waterfall.segment)::character varying AS segment,
    (pricing_waterfall.exclusion)::character varying AS exclusion,
    pricing_waterfall.email_eligible,
    (pricing_waterfall.upb)::character varying AS upb,
    (pricing_waterfall.rate)::character varying AS rate,
    (pricing_waterfall.ltv)::character varying AS ltv,
    pricing_waterfall.unpaid_balance,
    pricing_waterfall.loan_amount
   FROM shivay.pricing_waterfall;


ALTER TABLE shivay.rpt_pricing_waterfall OWNER TO postgres;

--
-- TOC entry 280 (class 1259 OID 17034)
-- Name: rpt_share_of_wallet; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.rpt_share_of_wallet AS
 SELECT to_char((z.org_date)::timestamp with time zone, 'yyyy-mm'::text) AS loan_origination_month,
    z.lender,
    z.loan_type,
    z.loan_purpose,
    z.cust_type AS member_segment,
    z.age,
    z.loan_amount,
    z.ltv,
    z.interest_rate,
    z.property_state,
    count(*) AS total_originations,
    sum(
        CASE
            WHEN ((z.lender)::text = 'PENFED'::text) THEN 1
            ELSE 0
        END) AS pf_originations
   FROM ( SELECT a.customer_id,
            to_date((a.pos_1st_recording_date)::text, 'yyyymmdd'::text) AS org_date,
                CASE
                    WHEN ((a.pos_1st_lender)::text ~~ '%PENTAGON%'::text) THEN 'PENFED'::character varying
                    ELSE a.pos_1st_lender
                END AS lender,
                CASE
                    WHEN ((a.pos_1st_loan_type)::text = 'V'::text) THEN 'VA'::text
                    WHEN ((a.pos_1st_loan_type)::text = 'F'::text) THEN 'FHA'::text
                    ELSE 'CONV'::text
                END AS loan_type,
                CASE
                    WHEN ((a.pos_1st_purpose)::text = 'Purchase'::text) THEN 'Purchase'::text
                    ELSE 'Refinance'::text
                END AS loan_purpose,
            to_date(substr(j.addr_maint_date, 1, 9), 'ddmonyyyy'::text) AS jan_ad_date,
            c.addr_maint_date,
            l.org_date AS ou_org_date,
                CASE
                    WHEN (l.org_date IS NOT NULL) THEN 'On Us'::text
                    WHEN (j.addr_maint_date IS NOT NULL) THEN 'Not On Us'::text
                    WHEN ((j.addr_maint_date IS NULL) AND (c.addr_maint_date IS NOT NULL)) THEN 'New'::text
                    ELSE NULL::text
                END AS cust_type,
                CASE
                    WHEN (j.customer_id IS NOT NULL) THEN
                    CASE
                        WHEN ((j.dob IS NULL) OR ((trunc(((pricing.months_between(((j.dob)::date)::timestamp without time zone, (CURRENT_DATE)::timestamp without time zone) / 120))::double precision) * (10)::double precision) <= (10)::double precision)) THEN (10)::double precision
                        WHEN ((trunc(((pricing.months_between(((j.dob)::date)::timestamp without time zone, (CURRENT_DATE)::timestamp without time zone) / 120))::double precision) * (10)::double precision) >= (80)::double precision) THEN (80)::double precision
                        ELSE (trunc(((pricing.months_between(((j.dob)::date)::timestamp without time zone, (CURRENT_DATE)::timestamp without time zone) / 120))::double precision) * (10)::double precision)
                    END
                    ELSE
                    CASE
                        WHEN ((c.dob IS NULL) OR ((trunc(((pricing.months_between((c.dob)::timestamp without time zone, (CURRENT_DATE)::timestamp without time zone) / 120))::double precision) * (10)::double precision) <= (10)::double precision)) THEN (10)::double precision
                        WHEN ((trunc(((pricing.months_between((c.dob)::timestamp without time zone, (CURRENT_DATE)::timestamp without time zone) / 120))::double precision) * (10)::double precision) >= (80)::double precision) THEN (80)::double precision
                        ELSE (trunc(((pricing.months_between((c.dob)::timestamp without time zone, (CURRENT_DATE)::timestamp without time zone) / 120))::double precision) * (10)::double precision)
                    END
                END AS age,
            a.property_state,
                CASE
                    WHEN ((COALESCE(a.avm_ez_estimated_value, (0)::numeric) = (0)::numeric) OR (round((trunc((((a.pos_1st_loan_amount / a.avm_ez_estimated_value) * (100)::numeric) / (20)::numeric)) * (20)::numeric), 0) < (20)::numeric)) THEN (10)::numeric
                    WHEN (round((trunc((((a.pos_1st_loan_amount / a.avm_ez_estimated_value) * (100)::numeric) / (20)::numeric)) * (20)::numeric), 0) > (100)::numeric) THEN (100)::numeric
                    ELSE round((trunc((((a.pos_1st_loan_amount / a.avm_ez_estimated_value) * (100)::numeric) / (20)::numeric)) * (20)::numeric), 0)
                END AS ltv,
                CASE
                    WHEN ((a.pos_1st_loan_amount IS NULL) OR (a.pos_1st_loan_amount < (50000)::numeric)) THEN (40000)::numeric
                    WHEN (a.pos_1st_loan_amount > (500000)::numeric) THEN (500000)::numeric
                    ELSE (trunc((a.pos_1st_loan_amount / (50000)::numeric)) * (50000)::numeric)
                END AS loan_amount,
                CASE
                    WHEN ((a.pos_1st_int_rate_used IS NULL) OR (a.pos_1st_int_rate_used <= (2)::numeric)) THEN (2)::numeric
                    WHEN (a.pos_1st_int_rate_used >= (6)::numeric) THEN (6)::numeric
                    ELSE round((trunc((a.pos_1st_int_rate_used / 0.5)) * 0.5), 3)
                END AS interest_rate
           FROM (((shivay.bk_rap_cust_data a
             LEFT JOIN public.customer_data_jan j ON (((a.customer_id)::text = j.customer_id)))
             LEFT JOIN public.customer_data_typed c ON (((a.customer_id)::text = (c.customer_id)::text)))
             LEFT JOIN ( SELECT mortgage_data_typed.customer_nbr AS customer_id,
                    max(mortgage_data_typed.date_closed) AS org_date
                   FROM public.mortgage_data_typed
                  WHERE (((mortgage_data_typed.ms_mortgage_status_description)::text <> 'Paid_Off'::text) AND ((mortgage_data_typed.product_group)::text = '1st Mortgage'::text) AND (mortgage_data_typed.customer_nbr IS NOT NULL))
                  GROUP BY mortgage_data_typed.customer_nbr) l ON (((a.customer_id)::text = l.customer_id)))
          WHERE (to_date((a.pos_1st_recording_date)::text, 'yyyymmdd'::text) >= '2021-01-01'::date)) z
  GROUP BY (to_char((z.org_date)::timestamp with time zone, 'yyyy-mm'::text)), z.lender, z.loan_type, z.loan_purpose, z.cust_type, z.age, z.loan_amount, z.ltv, z.interest_rate, z.property_state;


ALTER TABLE shivay.rpt_share_of_wallet OWNER TO postgres;

--
-- TOC entry 281 (class 1259 OID 17039)
-- Name: stg_bk_scrub_import; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_bk_scrub_import (
    customer_id character varying(50),
    apn character varying(50),
    fipscode character varying(50),
    property_address character varying(50),
    property_city character varying(50),
    property_state character varying(50),
    property_zip character varying(50),
    avm_ez_confidence_score numeric,
    avm_ez_estimated_value numeric,
    curr_comb_ltv_1st numeric,
    curr_comb_ltv_2nd numeric,
    curr_estimated_equity_1st numeric,
    curr_estimated_equity_2nd numeric,
    est_ownership_start_date numeric,
    orig_comb_ltv_1st numeric,
    orig_comb_ltv_2nd numeric,
    owner_occupancy_indicator character varying(50),
    pos_1st_est_loan_balance numeric,
    pos_1st_int_rate_type character varying(50),
    pos_1st_int_rate_used numeric,
    pos_1st_interest_only_period character varying(50),
    pos_1st_lender character varying(150),
    pos_1st_loan_amount numeric,
    pos_1st_loan_term numeric,
    pos_1st_loan_term_code character varying(50),
    pos_1st_loan_type character varying(50),
    pos_1st_original_date numeric,
    pos_1st_purpose character varying(50),
    pos_1st_recording_date numeric,
    pos_2nd_est_loan_balance numeric,
    pos_2nd_int_rate_type character varying(50),
    pos_2nd_int_rate_used numeric,
    pos_2nd_loan_amount numeric,
    pos_2nd_loan_term numeric,
    pos_2nd_loan_term_code character varying(50),
    pos_2nd_loan_type character varying(50),
    pos_2nd_original_date character varying(50),
    pos_2nd_purpose character varying(50),
    sales_price character varying(50),
    pos_2nd_lender_fixed character varying(50)
);


ALTER TABLE shivay.stg_bk_scrub_import OWNER TO postgres;

--
-- TOC entry 282 (class 1259 OID 17045)
-- Name: stg_campaign; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_campaign (
    cell_key numeric,
    cell_id character varying(10),
    campaign_id character varying(100),
    lot_no character varying(10),
    time_period character varying(7),
    program_group character varying(10),
    channel character varying(10),
    file_date date,
    campaign_start_date date,
    campaign_end_date date,
    offer_key numeric,
    creative_key numeric,
    vendor_key numeric,
    file_key numeric,
    phone_number character varying(15),
    utm_string character varying(50),
    est_quantity numeric,
    cost_per_piece numeric,
    est_response_rate numeric,
    est_app_rate numeric,
    executed_flag character varying(1),
    processed_flag character varying(1)
);


ALTER TABLE shivay.stg_campaign OWNER TO postgres;

--
-- TOC entry 358 (class 1259 OID 64561)
-- Name: stg_credit_trigger_monitoring; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_credit_trigger_monitoring (
    customer_id character varying(50),
    record_id numeric,
    first_name text,
    last_name text,
    address_1 text,
    address_2 text,
    city text,
    state text,
    zip text,
    pf_segment text,
    rap_filter text,
    file_date date,
    customer_rank numeric,
    lender character varying(150)
);


ALTER TABLE shivay.stg_credit_trigger_monitoring OWNER TO postgres;

--
-- TOC entry 357 (class 1259 OID 47951)
-- Name: stg_customer_bsa_id; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_customer_bsa_id (
    customer_id character varying(50),
    bsa_id numeric
);


ALTER TABLE shivay.stg_customer_bsa_id OWNER TO postgres;

--
-- TOC entry 359 (class 1259 OID 65669)
-- Name: stg_customer_bsa_id_dups; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_customer_bsa_id_dups (
    customer_id character varying(50),
    bsa_id numeric
);


ALTER TABLE shivay.stg_customer_bsa_id_dups OWNER TO postgres;

--
-- TOC entry 283 (class 1259 OID 17051)
-- Name: stg_dm_disposition_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_dm_disposition_data (
    cell_id character varying(10),
    campaign_id character varying(100),
    customer_id character varying(50),
    kit character varying(10),
    drop_date date
);


ALTER TABLE shivay.stg_dm_disposition_data OWNER TO postgres;

--
-- TOC entry 284 (class 1259 OID 17054)
-- Name: stg_email_cust_id_match; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_email_cust_id_match (
    customer_id character varying(50),
    email character varying(80),
    no_of_times bigint,
    segment character varying(30),
    customer_rank bigint
);


ALTER TABLE shivay.stg_email_cust_id_match OWNER TO postgres;

--
-- TOC entry 285 (class 1259 OID 17057)
-- Name: stg_email_disposition_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_email_disposition_data (
    campaign_id character varying(100),
    email_address character varying(75),
    phone character varying(11),
    disposition_date timestamp without time zone,
    disposition_description character varying(50),
    cell_key numeric
);


ALTER TABLE shivay.stg_email_disposition_data OWNER TO postgres;

--
-- TOC entry 286 (class 1259 OID 17063)
-- Name: stg_jornaya_disposition_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_jornaya_disposition_data (
    record_id numeric,
    campaign_id character varying(100),
    campaign_date date,
    email character varying(75),
    disposition_date timestamp without time zone,
    disposition_description character varying(50),
    cnt_sent numeric,
    cnt_opened numeric,
    cnt_clicked numeric,
    cnt_bounced numeric,
    cnt_unsubscribed numeric,
    customer_id character varying(50),
    customer_segment character varying(30),
    cell_key numeric
);


ALTER TABLE shivay.stg_jornaya_disposition_data OWNER TO postgres;

--
-- TOC entry 356 (class 1259 OID 46203)
-- Name: stg_jornaya_monitoring_file; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_jornaya_monitoring_file (
    recordid character varying(15),
    phone01 character varying(10),
    phone02 character varying(10),
    phone03 character varying(10),
    phone04 text,
    email01 character varying(75),
    email02 text,
    email03 text,
    customer_id character varying(50),
    unpaid_balance numeric,
    interest_rate numeric,
    portfolio character varying(30),
    loan_type character varying(1),
    member_first_name character varying(75),
    member_last_name character varying(75),
    address_1 character varying(50),
    city character varying(50),
    state character varying(50),
    zip character varying(50),
    file_date date,
    row_cnt numeric,
    customer_rank numeric
);


ALTER TABLE shivay.stg_jornaya_monitoring_file OWNER TO postgres;

--
-- TOC entry 287 (class 1259 OID 17069)
-- Name: stg_lead_app_match; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_lead_app_match (
    app_no character varying(15),
    lead_id character varying(15),
    match_type text
);


ALTER TABLE shivay.stg_lead_app_match OWNER TO postgres;

--
-- TOC entry 393 (class 1259 OID 127772)
-- Name: stg_lead_lookups; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_lead_lookups (
    "User" text,
    "Group" text,
    "Lead Source" text,
    "Status" text,
    "Tavant_Status" text,
    "LQ Status" text,
    "NQ Reason" text,
    sales_channel text,
    workable_lead text,
    lead_channel text,
    lead_campaign text,
    lead_status_grp text,
    lq_contact text,
    lq_transfer text,
    lo_contact text
);


ALTER TABLE shivay.stg_lead_lookups OWNER TO postgres;

--
-- TOC entry 382 (class 1259 OID 92849)
-- Name: stg_lq_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_lq_data (
    masterclient character varying(15),
    productname character varying(30),
    clientproductid numeric,
    clientname character varying(15),
    clientid numeric,
    lead_id character varying(15),
    creationdate timestamp without time zone,
    creationdatetime timestamp without time zone,
    modtime timestamp without time zone,
    leadstateid numeric,
    leadstatename character varying(30)
);


ALTER TABLE shivay.stg_lq_data OWNER TO postgres;

--
-- TOC entry 288 (class 1259 OID 17075)
-- Name: stg_phone_cust_id_match; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_phone_cust_id_match (
    customer_id character varying(50),
    phone character varying(10),
    customer_segment character varying(30),
    customer_rank numeric
);


ALTER TABLE shivay.stg_phone_cust_id_match OWNER TO postgres;

--
-- TOC entry 390 (class 1259 OID 118514)
-- Name: stg_ratesheet_history; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_ratesheet_history (
    rate_date date,
    product_id text,
    rate text,
    lock_45_day text,
    lock_60_day text,
    lock_90_day text
);


ALTER TABLE shivay.stg_ratesheet_history OWNER TO postgres;

--
-- TOC entry 362 (class 1259 OID 68301)
-- Name: stg_response_analysis; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_response_analysis (
    time_period character varying(7),
    channel character varying(10),
    current_loan_upb numeric,
    current_loan_rem_term numeric,
    current_ltv numeric,
    current_loan_rate numeric,
    customer_segment text,
    pi_sav numeric,
    cashout numeric,
    offer_rate numeric,
    rate_delta numeric,
    offer text,
    sol_cnt bigint,
    lead_resp_cnt bigint,
    app_resp_cnt bigint
);


ALTER TABLE shivay.stg_response_analysis OWNER TO postgres;

--
-- TOC entry 289 (class 1259 OID 17087)
-- Name: stg_servicing_transfers; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_servicing_transfers (
    account_number character varying(20),
    customer_id character varying(50),
    last_name_prim character varying(80),
    first_name_prim character varying(80),
    home_phone_prim character varying(10),
    work_phone_prim character varying(10),
    cell_phone_prim character varying(10),
    prop_state character varying(2),
    offer text,
    credit_score numeric,
    rate_date date,
    lock_period numeric,
    new_loan_purpose character varying(50),
    new_program_type character varying(10),
    new_product_id character varying(20),
    new_product_description character varying(75),
    new_amort_type character varying(1),
    new_term numeric,
    new_loan_amount numeric,
    new_ltv numeric,
    new_rate numeric,
    new_points_pct numeric,
    new_points_dol numeric,
    new_fees_total numeric,
    new_pi numeric,
    new_pi_savings_mo numeric,
    new_cashout numeric,
    new_lol_savings numeric,
    new_term_reduction numeric,
    file_date date
);


ALTER TABLE shivay.stg_servicing_transfers OWNER TO postgres;

--
-- TOC entry 290 (class 1259 OID 17093)
-- Name: stg_solicit_lead_match; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_solicit_lead_match (
    record_id numeric,
    lead_id character varying(15),
    match_type text
);


ALTER TABLE shivay.stg_solicit_lead_match OWNER TO postgres;

--
-- TOC entry 380 (class 1259 OID 91178)
-- Name: stg_trg_tran_disposition_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_trg_tran_disposition_data (
    cell_id character varying(10),
    campaign_id character varying(100),
    customer_id character varying(50),
    kit character varying(10),
    drop_date date,
    lead_id character varying(15),
    processed_flag character varying(1)
);


ALTER TABLE shivay.stg_trg_tran_disposition_data OWNER TO postgres;

--
-- TOC entry 365 (class 1259 OID 72415)
-- Name: stg_usaa_vu_det; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_usaa_vu_det (
    customer_id character varying(50),
    apn character varying(50),
    fipscode character varying(50),
    property_address character varying(50),
    property_city character varying(50),
    property_state character varying(50),
    property_zip character varying(50),
    avm_ez_confidence_score numeric,
    avm_ez_estimated_value numeric,
    curr_comb_ltv_1st numeric,
    curr_comb_ltv_2nd numeric,
    curr_estimated_equity_1st numeric,
    curr_estimated_equity_2nd numeric,
    est_ownership_start_date numeric,
    orig_comb_ltv_1st numeric,
    orig_comb_ltv_2nd numeric,
    owner_occupancy_indicator character varying(50),
    pos_1st_est_loan_balance numeric,
    pos_1st_int_rate_type character varying(50),
    pos_1st_int_rate_used numeric,
    pos_1st_interest_only_period character varying(50),
    pos_1st_lender character varying(150),
    pos_1st_loan_amount numeric,
    pos_1st_loan_term numeric,
    pos_1st_loan_term_code character varying(50),
    pos_1st_loan_type character varying(50),
    pos_1st_original_date numeric,
    pos_1st_purpose character varying(50),
    pos_1st_recording_date numeric,
    pos_2nd_est_loan_balance numeric,
    pos_2nd_int_rate_type character varying(50),
    pos_2nd_int_rate_used numeric,
    pos_2nd_loan_amount numeric,
    pos_2nd_loan_term numeric,
    pos_2nd_loan_term_code character varying(50),
    pos_2nd_loan_type character varying(50),
    pos_2nd_original_date character varying(50),
    pos_2nd_purpose character varying(50),
    sales_price character varying(50),
    pos_2nd_lender_fixed character varying(50)
);


ALTER TABLE shivay.stg_usaa_vu_det OWNER TO postgres;

--
-- TOC entry 366 (class 1259 OID 72426)
-- Name: stg_usaa_vu_pi; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.stg_usaa_vu_pi (
    address_nbr numeric,
    fipscode character varying(50),
    apn character varying(50),
    first_name character varying(75),
    last_name character varying(75),
    scrub_address_line_1 character varying(100),
    scrub_city_name character varying(75),
    state_cd character varying(2),
    zips character varying(5)
);


ALTER TABLE shivay.stg_usaa_vu_pi OWNER TO postgres;

--
-- TOC entry 292 (class 1259 OID 17105)
-- Name: tmp_campaign_report; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.tmp_campaign_report (
    uid bigint,
    report_level text,
    campaign_mth text,
    preferred_interest text,
    campaign_type text,
    campaign_id character varying(100),
    campaign_grp text,
    lead_owner_title character varying,
    fixed_lead_owner_title text,
    lead_source character varying,
    fixed_lead_source character varying,
    count_of_solicits numeric,
    count_unq_opens bigint,
    count_unq_clicks bigint,
    count_unq_bounce bigint,
    count_unq_unsub bigint,
    tot_cnt_opened numeric,
    tot_cnt_clicked numeric,
    leads_created_in_sf bigint,
    duplicate_leads_in_sf bigint,
    incomplete_leads_in_sf bigint,
    other_bad_leads_in_sf bigint,
    net_leads_in_sf bigint,
    cnt_lq_no_contact bigint,
    cnt_lq_contact bigint,
    cnt_lq_transfer bigint,
    app_created_encompass bigint,
    gfe_app_created_encompass bigint,
    helco_gfe_app bigint,
    conv_gfe_app bigint,
    va_gfe_app bigint,
    va_pur_gfe_app bigint,
    other_gfe_app bigint,
    purchase_gfe_app bigint,
    no_co_refi_gfe_app bigint,
    cashout_gfe_app bigint,
    app_funded bigint,
    app_active bigint,
    date_added date
);


ALTER TABLE shivay.tmp_campaign_report OWNER TO postgres;

--
-- TOC entry 293 (class 1259 OID 17111)
-- Name: tmp_channel_report; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.tmp_channel_report (
    uid bigint,
    rpt_week_code double precision,
    week_start_date timestamp without time zone,
    rpt_month text,
    preferred_interest character varying(50),
    campaign_type text,
    campaign_id character varying(100),
    lead_owner_title character varying,
    fixed_lead_owner_title text,
    lead_owner character varying(75),
    lead_source character varying,
    fixed_lead_source character varying,
    lead_prop_state character varying(70),
    count_of_solicits bigint,
    count_unq_opens bigint,
    count_unq_clicks bigint,
    count_unq_bounce bigint,
    count_unq_unsub bigint,
    tot_cnt_opened bigint,
    tot_cnt_clicked bigint,
    lead_created_in_sf bigint,
    duplicate_leads_in_sf bigint,
    incomplete_leads_in_sf bigint,
    other_bad_leads_in_sf bigint,
    net_leads_in_sf bigint,
    cnt_lq_no_contact bigint,
    cnt_lq_contact bigint,
    cnt_lq_transfer bigint,
    app_created_encompass bigint,
    gfe_app_created_encompass bigint,
    helco_gfe_app bigint,
    conv_gfe_app bigint,
    va_gfe_app bigint,
    va_pur_gfe_app bigint,
    other_gfe_app bigint,
    purchase_gfe_app bigint,
    no_co_refi_gfe_app bigint,
    cashout_gfe_app bigint,
    app_funded bigint,
    app_active bigint,
    date_added date
);


ALTER TABLE shivay.tmp_channel_report OWNER TO postgres;

--
-- TOC entry 361 (class 1259 OID 68285)
-- Name: tmp_dispositions; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.tmp_dispositions (
    "Customer Id" text,
    "Email" text,
    "Campaign Id" text,
    "Campaign Label" text,
    "First Name" text,
    "Last Name" text,
    "Contact Date" text,
    "Tracking Activity Date" text,
    "Type" text,
    "URL" text
);


ALTER TABLE shivay.tmp_dispositions OWNER TO postgres;

--
-- TOC entry 360 (class 1259 OID 68279)
-- Name: tmp_sent; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.tmp_sent (
    "Customer Id" text,
    "Email" text,
    "Campaign Id" text,
    "Campaign Label" text,
    "First Name" text,
    "Last Name" text,
    "Contact Date" text
);


ALTER TABLE shivay.tmp_sent OWNER TO postgres;

--
-- TOC entry 376 (class 1259 OID 74286)
-- Name: trg_daily_velocify_file; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.trg_daily_velocify_file (
    customer_id character varying(50),
    bsaid numeric,
    fname character varying(80),
    lname character varying(80),
    street1 character varying(80),
    street2 text,
    city character varying(80),
    state character varying(2),
    zip character varying(5),
    zip4 text,
    email_address character varying(80),
    phone_1 character varying(10),
    phone_2 text,
    offer text,
    credit_score numeric,
    rate_date date,
    offer_expiration_date date,
    loan_amount numeric,
    current_property_value numeric,
    new_product_description character varying(75),
    new_rate numeric,
    new_apr numeric,
    new_pi numeric,
    new_pi_savings numeric,
    new_ltv numeric,
    new_term numeric,
    new_term_1 numeric,
    last_payment numeric
);


ALTER TABLE shivay.trg_daily_velocify_file OWNER TO postgres;

--
-- TOC entry 375 (class 1259 OID 74274)
-- Name: trg_deluxe_levels; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.trg_deluxe_levels (
    level numeric,
    offer character varying(30),
    creative character varying(30),
    velocify_offer character varying(20)
);


ALTER TABLE shivay.trg_deluxe_levels OWNER TO postgres;

--
-- TOC entry 374 (class 1259 OID 74262)
-- Name: trg_deluxe_monthly_data; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.trg_deluxe_monthly_data (
    record_id numeric,
    first_name text,
    last_name text,
    address_1 text,
    address_2 text,
    city text,
    state text,
    zip text,
    pf_segment text,
    rap_filter text
);


ALTER TABLE shivay.trg_deluxe_monthly_data OWNER TO postgres;

--
-- TOC entry 378 (class 1259 OID 74301)
-- Name: trg_dm_file; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.trg_dm_file (
    unique_id character varying(20),
    solicitation_key text,
    cell_key numeric,
    cell_id character varying(10),
    campaign_id character varying(100),
    customer_id character varying(50),
    email character varying(80),
    phone character varying(10),
    first_name character varying(80),
    last_name character varying(80),
    property_address character varying(80),
    property_city character varying(80),
    property_state character varying(2),
    property_zip character varying(5),
    county_name character varying(15),
    current_loan_upb numeric,
    current_loan_rate numeric,
    current_loan_rem_term numeric,
    current_property_value numeric,
    current_pi integer,
    current_ltv numeric,
    credit_score numeric,
    rate_date date,
    lock_period numeric,
    offer_1 text,
    new_product_description_1 character varying(75),
    new_term_1 numeric,
    new_loan_amount_1 numeric,
    new_ltv_1 numeric,
    new_rate_1 numeric,
    new_arm_reset_rate_1 numeric,
    new_points_pct_1 numeric,
    new_apr_1 numeric,
    new_base_fees_1 numeric,
    new_points_dol_1 numeric,
    new_interim_int_1 numeric,
    new_fees_total_1 numeric,
    new_pi_1 numeric,
    new_pi_savings_mo_1 numeric,
    new_pimi_savings_mo_1 numeric,
    new_cashout_1 numeric,
    new_lol_savings_1 numeric,
    new_term_reduction_1 numeric,
    new_ufmip_pct_1 numeric,
    new_mip_pct_1 numeric,
    new_mi_1 numeric,
    new_ufmip_1 numeric,
    last_payment_1 numeric,
    creative character varying(30),
    offer_expiration_date date,
    unique_offer_code text
);


ALTER TABLE shivay.trg_dm_file OWNER TO postgres;

--
-- TOC entry 381 (class 1259 OID 92407)
-- Name: trg_dm_leads; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.trg_dm_leads AS
 SELECT (v."Customer ID")::character varying(50) AS customer_id
   FROM public.velocify_data_typed v
  WHERE ((((v."Status")::text = 'Follow Up Required'::text) OR ((v."Email_Bounced")::text = 'True'::text)) AND ((v."Lead Source")::text ~~ '%Deluxe%'::text) AND (v."Customer ID" IS NOT NULL));


ALTER TABLE shivay.trg_dm_leads OWNER TO postgres;

--
-- TOC entry 377 (class 1259 OID 74298)
-- Name: trg_dm_suppression; Type: TABLE; Schema: penfed; Owner: postgres
--

CREATE TABLE shivay.trg_dm_suppression (
    customer_id character varying(50),
    email character varying(75)
);


ALTER TABLE shivay.trg_dm_suppression OWNER TO postgres;

--
-- TOC entry 294 (class 1259 OID 17117)
-- Name: v_reporting_campaign; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.v_reporting_campaign AS
 SELECT c.time_period AS campaign_mth,
    c.channel AS solicit_channel,
    l.crm_system,
    c.program_description,
    c.offer_description,
    d.record_id,
    d.campaign_id,
    d.customer_segment,
    (c.campaign_end_date - d.campaign_date) AS campaign_window,
        CASE
            WHEN (c.campaign_end_date < CURRENT_DATE) THEN (c.campaign_end_date - d.campaign_date)
            ELSE (CURRENT_DATE - c.campaign_start_date)
        END AS days_since_campaign,
    sum(d.cnt_sent) AS count_of_solicits,
    sum(
        CASE
            WHEN ((l.workable_lead)::text = 'N'::text) THEN 1
            ELSE 0
        END) AS duplicate_incomplete_bad_leads,
    sum(
        CASE
            WHEN ((l.workable_lead)::text = 'Y'::text) THEN 1
            ELSE 0
        END) AS net_workable_leads,
    round(sum((d.cnt_sent * c.est_response_rate)), 0) AS est_response_cnt,
    sum(
        CASE
            WHEN ((l.lq_status)::text = 'No Contact'::text) THEN 1
            ELSE 0
        END) AS cnt_lq_no_contact,
    sum(
        CASE
            WHEN ((l.lq_status)::text = 'Contact Made'::text) THEN 1
            ELSE 0
        END) AS cnt_lq_contact,
    sum(
        CASE
            WHEN ((l.lq_status)::text = 'Transfered'::text) THEN 1
            ELSE 0
        END) AS cnt_lq_transfer,
    sum(
        CASE
            WHEN (a.app_no IS NOT NULL) THEN 1
            ELSE 0
        END) AS cnt_created_apps,
    sum(
        CASE
            WHEN ((a.app_no IS NOT NULL) AND (a.app_setup_date IS NOT NULL)) THEN 1
            ELSE 0
        END) AS cnt_setup_apps,
    round(sum(((d.cnt_sent * c.est_response_rate) * c.est_app_rate)), 0) AS est_app_cnt,
    sum(
        CASE
            WHEN ((a.app_no IS NOT NULL) AND (a.app_setup_date IS NOT NULL)) THEN a.app_loan_amt
            ELSE (0)::numeric
        END) AS amt_setup_apps,
    sum(
        CASE
            WHEN ((a.app_status_desc)::text = 'Loan Originated'::text) THEN 1
            ELSE 0
        END) AS funded_units,
    sum(
        CASE
            WHEN ((a.app_status_desc)::text = 'Loan Originated'::text) THEN a.app_loan_amt
            ELSE (0)::numeric
        END) AS funded_amt,
    CURRENT_DATE AS date_added
   FROM (((shivay.cmp_disposition_history d
     JOIN ( SELECT x.cell_key,
            x.time_period,
            p.program_description,
            o.offer_description,
            x.channel,
            x.est_response_rate,
            x.est_app_rate,
            x.campaign_start_date,
            x.campaign_end_date
           FROM ((shivay.cmp_campaign x
             JOIN shivay.cmp_program p ON (((x.program_group)::text = (p.program_group)::text)))
             JOIN shivay.cmp_offer o ON ((x.offer_key = o.offer_key)))
          WHERE ((x.time_period)::text >= '2021-01'::text)) c ON ((d.cell_key = c.cell_key)))
     LEFT JOIN shivay.mst_lead l ON ((d.record_id = l.attributed_disposition_no)))
     LEFT JOIN shivay.mst_app a ON ((d.record_id = a.attributed_disposition_no)))
  GROUP BY c.time_period, c.channel, l.crm_system, c.program_description, c.offer_description, d.record_id, d.campaign_id, d.customer_segment, (c.campaign_end_date - d.campaign_date),
        CASE
            WHEN (c.campaign_end_date < CURRENT_DATE) THEN (c.campaign_end_date - d.campaign_date)
            ELSE (CURRENT_DATE - c.campaign_start_date)
        END;


ALTER TABLE shivay.v_reporting_campaign OWNER TO postgres;

--
-- TOC entry 295 (class 1259 OID 17122)
-- Name: v_reporting_channel; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.v_reporting_channel AS
 SELECT s.rpt_week_code,
    s.week_start_date,
    s.rpt_month,
    s.crm_system,
    s.sales_channel,
    s.mktg_channel,
    s.lead_id,
    s.lead_create_date,
    s.lead_source,
    s.lead_status,
    s.property_state,
    s.app_fund_date,
    s.app_setup_date,
    s.app_product_group,
    s.app_status_desc,
    s.app_purpose_desc,
    s.attributed_customer_segment,
    s.attributed_mktg_campaign,
    s.no_of_leads,
    s.duplicate_incomplete_bad_leads,
    s.net_workable_leads,
    s.cnt_lq_no_contact,
    s.cnt_lq_contact,
    s.cnt_lq_transfer,
    s.cnt_created_apps,
    s.cnt_setup_apps,
    s.amt_setup_apps,
    s.funded_units,
    s.funded_amt,
    s.date_added
   FROM ( SELECT date_part('WEEK'::text, l.lead_create_date) AS rpt_week_code,
            x.dt AS week_start_date,
            to_char((l.lead_create_date)::timestamp with time zone, 'YYYY-MM'::text) AS rpt_month,
            l.crm_system,
            l.sales_channel,
            l.mktg_channel,
            l.lead_id,
            l.lead_create_date,
            l.lead_source,
            l.lead_status,
            l.property_state,
            a.app_fund_date,
            a.app_setup_date,
            a.app_product_group,
            a.app_status_desc,
            a.app_purpose_desc,
            l.customer_segment AS attributed_customer_segment,
            l.attributed_mktg_campaign,
            count(*) AS no_of_leads,
            sum(
                CASE
                    WHEN ((l.workable_lead)::text = 'N'::text) THEN 1
                    ELSE 0
                END) AS duplicate_incomplete_bad_leads,
            sum(
                CASE
                    WHEN ((l.workable_lead)::text = 'Y'::text) THEN 1
                    ELSE 0
                END) AS net_workable_leads,
            sum(
                CASE
                    WHEN ((l.lq_status)::text = 'No Contact'::text) THEN 1
                    ELSE 0
                END) AS cnt_lq_no_contact,
            sum(
                CASE
                    WHEN ((l.lq_status)::text = 'Contact Made'::text) THEN 1
                    ELSE 0
                END) AS cnt_lq_contact,
            sum(
                CASE
                    WHEN ((l.lq_status)::text = 'Transferred'::text) THEN 1
                    ELSE 0
                END) AS cnt_lq_transfer,
            sum(
                CASE
                    WHEN (a.app_no IS NOT NULL) THEN 1
                    ELSE 0
                END) AS cnt_created_apps,
            sum(
                CASE
                    WHEN ((a.app_no IS NOT NULL) AND (a.app_setup_date IS NOT NULL)) THEN 1
                    ELSE 0
                END) AS cnt_setup_apps,
            sum(
                CASE
                    WHEN ((a.app_no IS NOT NULL) AND (a.app_setup_date IS NOT NULL)) THEN a.app_loan_amt
                    ELSE (0)::numeric
                END) AS amt_setup_apps,
            sum(
                CASE
                    WHEN ((a.app_status_desc)::text = 'Loan Originated'::text) THEN 1
                    ELSE 0
                END) AS funded_units,
            sum(
                CASE
                    WHEN ((a.app_status_desc)::text = 'Loan Originated'::text) THEN a.app_loan_amt
                    ELSE (0)::numeric
                END) AS funded_amt,
            CURRENT_DATE AS date_added
           FROM ((shivay.mst_lead l
             LEFT JOIN shivay.mst_app a ON (((l.attributed_app_no)::text = (a.app_no)::text)))
             LEFT JOIN ( SELECT date_part('WEEK'::text, mst_lead.lead_create_date) AS wk,
                    min(mst_lead.lead_create_date) AS dt
                   FROM shivay.mst_lead
                  GROUP BY (date_part('WEEK'::text, mst_lead.lead_create_date))) x ON ((date_part('WEEK'::text, l.lead_create_date) = x.wk)))
          GROUP BY (date_part('WEEK'::text, l.lead_create_date)), x.dt, (to_char((l.lead_create_date)::timestamp with time zone, 'YYYY-MM'::text)), l.crm_system, l.customer_segment, l.sales_channel, l.mktg_channel, l.lead_id, l.lead_create_date, l.lead_source, l.lead_status, l.property_state, a.app_fund_date, a.app_setup_date, a.app_product_group, a.app_status_desc, a.app_purpose_desc, l.attributed_mktg_campaign) s
  ORDER BY s.rpt_week_code;


ALTER TABLE shivay.v_reporting_channel OWNER TO postgres;

--
-- TOC entry 372 (class 1259 OID 73380)
-- Name: zip_county; Type: VIEW; Schema: penfed; Owner: postgres
--

CREATE VIEW shivay.zip_county AS
 SELECT zip.zip_code,
    zip.county_name,
    zip.rnk
   FROM ( SELECT zip_code_tab.zip_code,
            zip_code_tab.county_name,
            row_number() OVER (PARTITION BY zip_code_tab.zip_code ORDER BY zip_code_tab.county_code) AS rnk
           FROM pricing.zip_code_tab) zip
  WHERE (zip.rnk = 1);


ALTER TABLE shivay.zip_county OWNER TO postgres;

--
-- TOC entry 4618 (class 2604 OID 73356)
-- Name: deluxe_daily_data_tracker id; Type: DEFAULT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.deluxe_daily_data_tracker ALTER COLUMN id SET DEFAULT nextval('shivay.deluxe_daily_data_tracker_id_seq'::regclass);


--
-- TOC entry 4627 (class 2606 OID 17523)
-- Name: mst_app app_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.mst_app
    ADD CONSTRAINT app_unique UNIQUE (app_no);


--
-- TOC entry 4639 (class 2606 OID 17525)
-- Name: cmp_campaign campaign_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_campaign
    ADD CONSTRAINT campaign_unique UNIQUE (campaign_id);


--
-- TOC entry 4641 (class 2606 OID 17527)
-- Name: cmp_campaign cell_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_campaign
    ADD CONSTRAINT cell_unique UNIQUE (cell_key);


--
-- TOC entry 4645 (class 2606 OID 17529)
-- Name: cmp_channel channel_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_channel
    ADD CONSTRAINT channel_unique UNIQUE (channel);


--
-- TOC entry 4643 (class 2606 OID 17531)
-- Name: cmp_campaign cmp_campaign_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_campaign
    ADD CONSTRAINT cmp_campaign_pkey PRIMARY KEY (cell_key);


--
-- TOC entry 4647 (class 2606 OID 17533)
-- Name: cmp_channel cmp_channel_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_channel
    ADD CONSTRAINT cmp_channel_pkey PRIMARY KEY (channel);


--
-- TOC entry 4649 (class 2606 OID 17535)
-- Name: cmp_creative cmp_creative_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_creative
    ADD CONSTRAINT cmp_creative_pkey PRIMARY KEY (creative_key);


--
-- TOC entry 4622 (class 2606 OID 17537)
-- Name: cmp_disposition_history cmp_disposition_history_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_disposition_history
    ADD CONSTRAINT cmp_disposition_history_pkey PRIMARY KEY (record_id);


--
-- TOC entry 4653 (class 2606 OID 17539)
-- Name: cmp_file cmp_file_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_file
    ADD CONSTRAINT cmp_file_pkey PRIMARY KEY (file_key);


--
-- TOC entry 4655 (class 2606 OID 17541)
-- Name: cmp_offer cmp_offer_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_offer
    ADD CONSTRAINT cmp_offer_pkey PRIMARY KEY (offer_key);


--
-- TOC entry 4659 (class 2606 OID 17543)
-- Name: cmp_program cmp_program_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_program
    ADD CONSTRAINT cmp_program_pkey PRIMARY KEY (program_group);


--
-- TOC entry 4663 (class 2606 OID 17545)
-- Name: cmp_vendor cmp_vendor_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_vendor
    ADD CONSTRAINT cmp_vendor_pkey PRIMARY KEY (vendor_key);


--
-- TOC entry 4651 (class 2606 OID 17547)
-- Name: cmp_creative creative_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_creative
    ADD CONSTRAINT creative_unique UNIQUE (creative_key);


--
-- TOC entry 4677 (class 2606 OID 17549)
-- Name: pricing_output_tab id_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.pricing_output_tab
    ADD CONSTRAINT id_unique UNIQUE (scenario_id);


--
-- TOC entry 4633 (class 2606 OID 17551)
-- Name: mst_lead lead_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.mst_lead
    ADD CONSTRAINT lead_unique UNIQUE (lead_id);


--
-- TOC entry 4668 (class 2606 OID 17553)
-- Name: mst_loan loan_unique_id; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.mst_loan
    ADD CONSTRAINT loan_unique_id UNIQUE (unique_id);


--
-- TOC entry 4631 (class 2606 OID 17555)
-- Name: mst_app mst_app_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.mst_app
    ADD CONSTRAINT mst_app_pkey PRIMARY KEY (app_no);


--
-- TOC entry 4637 (class 2606 OID 17557)
-- Name: mst_lead mst_lead_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.mst_lead
    ADD CONSTRAINT mst_lead_pkey PRIMARY KEY (lead_id);


--
-- TOC entry 4670 (class 2606 OID 17559)
-- Name: mst_loan mst_loan_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.mst_loan
    ADD CONSTRAINT mst_loan_pkey PRIMARY KEY (unique_id);


--
-- TOC entry 4657 (class 2606 OID 17561)
-- Name: cmp_offer offer_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_offer
    ADD CONSTRAINT offer_unique UNIQUE (offer_key);


--
-- TOC entry 4661 (class 2606 OID 17563)
-- Name: cmp_program prgoram_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_program
    ADD CONSTRAINT prgoram_unique UNIQUE (program_group);


--
-- TOC entry 4673 (class 2606 OID 17565)
-- Name: pricing_offers pricing_offers_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.pricing_offers
    ADD CONSTRAINT pricing_offers_pkey PRIMARY KEY (unique_id);


--
-- TOC entry 4680 (class 2606 OID 17567)
-- Name: pricing_output_tab pricing_output_tab_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.pricing_output_tab
    ADD CONSTRAINT pricing_output_tab_pkey PRIMARY KEY (scenario_id);


--
-- TOC entry 4682 (class 2606 OID 17574)
-- Name: pricing_summary pricing_summary_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.pricing_summary
    ADD CONSTRAINT pricing_summary_pkey PRIMARY KEY (rec_id);


--
-- TOC entry 4685 (class 2606 OID 17576)
-- Name: pricing_waterfall pricing_waterfall_pkey; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.pricing_waterfall
    ADD CONSTRAINT pricing_waterfall_pkey PRIMARY KEY (unique_id);


--
-- TOC entry 4625 (class 2606 OID 17578)
-- Name: cmp_disposition_history rec_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_disposition_history
    ADD CONSTRAINT rec_unique UNIQUE (record_id);


--
-- TOC entry 4675 (class 2606 OID 17590)
-- Name: pricing_offers unique_id; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.pricing_offers
    ADD CONSTRAINT unique_id UNIQUE (unique_id);


--
-- TOC entry 4665 (class 2606 OID 17592)
-- Name: cmp_vendor vendor_unique; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_vendor
    ADD CONSTRAINT vendor_unique UNIQUE (vendor_key);


--
-- TOC entry 4687 (class 2606 OID 17594)
-- Name: pricing_waterfall w_unique_id; Type: CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.pricing_waterfall
    ADD CONSTRAINT w_unique_id UNIQUE (unique_id);


--
-- TOC entry 4620 (class 1259 OID 17599)
-- Name: cmp_disp_in2; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX cmp_disp_in2 ON shivay.cmp_disposition_history USING btree (customer_id, disposition_date);


--
-- TOC entry 4688 (class 1259 OID 17621)
-- Name: customer_email_ind; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX customer_email_ind ON shivay.stg_email_cust_id_match USING btree (customer_id, email);


--
-- TOC entry 4623 (class 1259 OID 17640)
-- Name: final_disp_ind; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX final_disp_ind ON shivay.cmp_disposition_history USING btree (record_id, email);


--
-- TOC entry 4666 (class 1259 OID 17643)
-- Name: lm_ind; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX lm_ind ON shivay.mst_loan USING btree (unique_id, account_number, customer_id_prim);


--
-- TOC entry 4628 (class 1259 OID 17654)
-- Name: mst_app_in2; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX mst_app_in2 ON shivay.mst_app USING btree (attributed_customer_id, attributed_lead_id, attributed_disposition_no);


--
-- TOC entry 4629 (class 1259 OID 17655)
-- Name: mst_app_ind; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX mst_app_ind ON shivay.mst_app USING btree (app_no, lead_id, app_prim_email);


--
-- TOC entry 4634 (class 1259 OID 17656)
-- Name: mst_lead_in1; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX mst_lead_in1 ON shivay.mst_lead USING btree (lead_id, lead_create_date);


--
-- TOC entry 4635 (class 1259 OID 17657)
-- Name: mst_lead_in2; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX mst_lead_in2 ON shivay.mst_lead USING btree (attributed_customer_id, attributed_app_no, attributed_disposition_no);


--
-- TOC entry 4678 (class 1259 OID 17662)
-- Name: pen_pe; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX pen_pe ON shivay.pricing_output_tab USING btree (unique_id, scenario_id);


--
-- TOC entry 4671 (class 1259 OID 17674)
-- Name: pf_offer; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX pf_offer ON shivay.pricing_offers USING btree (unique_id, id_rt, id_te, id_tr, id_co);


--
-- TOC entry 4683 (class 1259 OID 17677)
-- Name: pf_waterfall; Type: INDEX; Schema: penfed; Owner: postgres
--

CREATE INDEX pf_waterfall ON shivay.pricing_waterfall USING btree (unique_id, exclusion);


--
-- TOC entry 4690 (class 2606 OID 17695)
-- Name: mst_lead app_no_b; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.mst_lead
    ADD CONSTRAINT app_no_b FOREIGN KEY (attributed_app_no) REFERENCES shivay.mst_app(app_no);


--
-- TOC entry 4689 (class 2606 OID 17700)
-- Name: cmp_disposition_history cell_key; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_disposition_history
    ADD CONSTRAINT cell_key FOREIGN KEY (cell_key) REFERENCES shivay.cmp_campaign(cell_key);


--
-- TOC entry 4701 (class 2606 OID 17705)
-- Name: cmp_sol_history_old cell_key; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_sol_history_old
    ADD CONSTRAINT cell_key FOREIGN KEY (cell_key) REFERENCES shivay.cmp_campaign(cell_key);


--
-- TOC entry 4691 (class 2606 OID 17710)
-- Name: cmp_campaign channel; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_campaign
    ADD CONSTRAINT channel FOREIGN KEY (channel) REFERENCES shivay.cmp_channel(channel);


--
-- TOC entry 4692 (class 2606 OID 17715)
-- Name: cmp_campaign creative; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_campaign
    ADD CONSTRAINT creative FOREIGN KEY (creative_key) REFERENCES shivay.cmp_creative(creative_key);


--
-- TOC entry 4697 (class 2606 OID 17725)
-- Name: cmp_exclusions excl_c; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_exclusions
    ADD CONSTRAINT excl_c FOREIGN KEY (offer_key) REFERENCES shivay.cmp_offer(offer_key);


--
-- TOC entry 4699 (class 2606 OID 17730)
-- Name: cmp_file_layout filek; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_file_layout
    ADD CONSTRAINT filek FOREIGN KEY (file_key) REFERENCES shivay.cmp_file(file_key);


--
-- TOC entry 4693 (class 2606 OID 17735)
-- Name: cmp_campaign filek; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_campaign
    ADD CONSTRAINT filek FOREIGN KEY (file_key) REFERENCES shivay.cmp_file(file_key);


--
-- TOC entry 4694 (class 2606 OID 17740)
-- Name: cmp_campaign offer; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_campaign
    ADD CONSTRAINT offer FOREIGN KEY (offer_key) REFERENCES shivay.cmp_offer(offer_key);


--
-- TOC entry 4695 (class 2606 OID 17745)
-- Name: cmp_campaign program_group; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_campaign
    ADD CONSTRAINT program_group FOREIGN KEY (program_group) REFERENCES shivay.cmp_program(program_group);


--
-- TOC entry 4696 (class 2606 OID 17750)
-- Name: cmp_campaign vendor; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_campaign
    ADD CONSTRAINT vendor FOREIGN KEY (vendor_key) REFERENCES shivay.cmp_vendor(vendor_key);


--
-- TOC entry 4698 (class 2606 OID 17755)
-- Name: cmp_file vendor; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_file
    ADD CONSTRAINT vendor FOREIGN KEY (vendor_key) REFERENCES shivay.cmp_vendor(vendor_key);


--
-- TOC entry 4700 (class 2606 OID 17760)
-- Name: cmp_file_layout vendor; Type: FK CONSTRAINT; Schema: penfed; Owner: postgres
--

ALTER TABLE ONLY shivay.cmp_file_layout
    ADD CONSTRAINT vendor FOREIGN KEY (vendor_key) REFERENCES shivay.cmp_vendor(vendor_key);


-- Completed on 2022-02-19 11:48:09 EST

--
-- PostgreSQL database dump complete
--

