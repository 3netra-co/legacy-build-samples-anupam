PROCEDURE CSRG_PROD.SP_BP_4_BATCH_PRICNG_GET_RATES
IS
--
-- OBJECTIVE:                       4-BATCH_PRICING_GET_RATES.sql
-- PURPOSE:                         To replace 4-BATCH_PRICING_GET_RATES.sql script
-- MODIFICATION HISTORY
-- Person           Date            Comments
-- ==============   ==============  ===================================================================================
-- E.Falkov         11/14/2017      Original Version...
-- ==============   ==============  ===================================================================================

v_prc_nm               VARCHAR2(30)    := 'SP_BP_4_BATCH_PRICNG_GET_RATES';
v_count                VARCHAR2(100);
v_err_msg              VARCHAR2(4000);
v_ddl_smt              VARCHAR2(32676) := NULL;
v_tab_owner            VARCHAR2(100)   :='CSRG_PROD';
v_tab1_name            VARCHAR2(100)   :='BPO_TMP_RATES2';
v_tab2_name            VARCHAR2(100)   :='BPO_TMP_RATES3';
v_tab3_name            VARCHAR2(100)   :='BATCH_PRICING_INPUT';
v_exec_status_id       NUMBER          := NULL;
v_exec_status_txt      VARCHAR2(4000)  := NULL;
v_job_run_id           NUMBER          := 0;
v_job_name             VARCHAR2(40) := 'SP_BP_4_BATCH_PRICNG_GET_RATES';

v_exec_segment_timestamp        TIMESTAMP WITH TIME ZONE:= SYSTIMESTAMP;  
v_exec_total_segment_timestamp  TIMESTAMP WITH TIME ZONE:= SYSTIMESTAMP;   
v_runtime                       VARCHAR2(50):=NULL;

BEGIN 
v_exec_status_id:=0;
v_exec_status_txt:='SUCCESS';
v_exec_total_segment_timestamp := SYSTIMESTAMP;


--------------------------------------------------------------------------------------------------------------
-- Step 2a - Create subset of today's rates (from Spkie) for just the batch pricing 20 products

INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Step 2a:  Get needed rates from SPIKE',null,null,null); -- logfile entry
COMMIT;

-- ==========================================================================================================================================
EXECUTE IMMEDIATE 'TRUNCATE TABLE CSRG_PROD.BPO_TMP_RATES2 DROP STORAGE'; 

v_ddl_smt:='ALTER TABLE '||v_tab_owner||'.'||v_tab1_name||' NOLOGGING';
EXECUTE IMMEDIATE v_ddl_smt;


-- ==============================================================================================================
-- Disable BPO_TMP_RATES2  Constraints: 
-- ==============================================================================================================
PKG_UTL_OBJMAINTENANCE.prc_disable_idx_constr_trig
   (p_exec_status_id             => v_exec_status_id, 
    p_exec_status_txt            => v_exec_status_txt,  
    p_called_by                  => v_prc_nm,  
    p_owner                      => v_tab_owner, -- CSRG_PROD
    p_tab_name                   => v_tab1_name,  
    p_disable_pk_yn              => 'Y', 
    p_disable_unq_yn             => 'Y', 
    p_disable_chk_yn             => 'N', 
    p_disable_fk_yn              => 'N', 
    p_disable_trig_yn            => 'N',
    p_disable_pk_idx             => 'N',
    p_disable_unq_idx            => 'N',
    p_disable_part_idx           => NULL,  
    p_disable_subpart_idx        => NULL,  
    p_disable_other_idx          => 'Y',
    p_part_idx_sch_pattern       => NULL,  
    p_subpart_idx_sch_pattern    => NULL,
    p_job_name                   => v_job_name,
    p_job_run_id                 => v_job_run_id   
   ); 
   
   
v_exec_segment_timestamp := SYSTIMESTAMP;

INSERT /*+ append */ INTO BPO_TMP_RATES2
SELECT
    RATE_DT,
    RATE_TM,
    RATE_NO,
    SUBCHANNEL_ID,
    TIER_CD,
    ENG_PROD_CD,
    PROD_CD,
    PRICING_CODE,
    RATE,
    POINTS,
    RANK
FROM --Previous statement modified by AT on 7/11/2016 to add new column RATE_CHK. TO be used to drop rate point combinations with pricing anomalies in daily rate sheet.
    (
    SELECT X.*,
    CASE WHEN POINTS > MIN(POINTS) OVER(PARTITION BY RATE_DT, RATE_TM, SUBCHANNEL_ID, TIER_CD, ENG_PROD_CD ORDER BY RATE RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) THEN 'DONT USE' ELSE 'USE RATE' END AS RATE_CHK -- DROP RATE WHERE CURRENT POINTS ARE GREATER THAN MINIMUM THUS FAR
    FROM
    (              select
                                    TO_DATE(RHA.RATE_DATE, 'MM/DD/YYYY') AS RATE_DT,RHA.RATE_TIME AS RATE_TM,RHA.RATE_NBR AS RATE_NO,RHA.SUBCHANNEL_ID, PRODS.TIER_CD,PRODS.ENG_PROD_CD,PRODS.PROD_CD,PRICING_CODE,RHA.RATE,
                                    RHA.POINTS,
                                    RANK() OVER (PARTITION BY RHA.SUBCHANNEL_ID, PRODS.TIER_CD, PRODS.ENG_PROD_CD, PRODS.PROD_CD, PRODS.PRICING_CODE, RHA.POINTS
                                                                                    ORDER BY RHA.RATE, ROWNUM) as RANK
                    from
                    (              SELECT BPP.ENG_PROD_CD,BPP.PROD_CD,BPP.TIER_CD,BPP.RLOCK_CD, --RLOCK_CD ADDED BY AT 7/14/2016
                                    BPP.PRICING_CODE, BPP.MORT_TYP --Added by AT 8/18/2016  PRICING_CODE added to BPP and removed as a hard code

                                    FROM BATCH_PRICING_PRODUCTS BPP
                                    WHERE ACTIVE_FLAG = 'Y'  --Added by AT 8/18/2016
                    ) PRODS,
                    --rates from Spike
                    (
                    SELECT A.*, NOTE_RATE AS RATE
                    FROM MDM.CMS_PRICING_DATA_V@LNK2MTGIWP.DITECH.US A
                    --WHERE LOCK_PERIOD = 60 AT 7/14/2016
                    ORDER BY ECLIPSE_PROD_ID, RATE
                    ) RHA

                    WHERE
                                    PRODS.PRICING_CODE=RHA.ECLIPSE_PROD_ID(+)
                                    AND PRODS.RLOCK_CD = RHA.LOCK_PERIOD(+) --AT 7/14/2016

                    ORDER BY 2,1,3,4,5,6
    ) X
    WHERE RANK=1
    )
WHERE RATE_CHK = 'USE RATE'
;
 
v_count := SQL%ROWCOUNT;

v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 

COMMIT;

-- 1. Enable Constraints, Validate Indexes On BPO_TMP_RATES2 Table .....
-- =======================================================================================================================================
    PKG_UTL_OBJMAINTENANCE.prc_enable_idx_constr
            (p_exec_status_id   => v_exec_status_id, 
             p_exec_status_txt  => v_exec_status_txt, 
             p_called_by        => v_prc_nm, 
             p_load_table_name  => v_tab1_name,
             p_job_name         => NULL,
             p_job_run_id       => NULL
             ); 
             
-- 2. Analyze Indexes On BPO_TMP_RATES2 Table .....
-- =======================================================================================================================================            
    PKG_UTL_OBJMAINTENANCE.prc_analyze_tab
        (p_table_owner                  => v_tab_owner,
         p_table_name                   => v_tab1_name, -- 'BPO_TMP_RATES2'
         p_parallel_degree              => 4, 
         p_method_opt                   => 'FOR ALL INDEXED COLUMNS SIZE AUTO', 
         p_partition_yn                 => 'N',
         p_sub_partition_yn             => 'N',
         p_min_partition_refresh_year   => NULL,
         p_max_partition_refresh_year   => NULL,
         p_job_name                     => NULL,
         p_job_run_id                   => NULL
         );  
         
         
         
INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Step 2a:  Refresh BPO_TMP_RATES2 Complete.  # Records: ',
                    v_count,v_tab1_name,v_runtime); -- logfile entry
COMMIT;
                  
--------------------------------------------------------------------------------------------------------------
-- Step 2b - Determine the best rate (nearest to zero points, net of LLPA's) for all records

INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Step 2b:  Determine nearest to zero rate/point combo',null,null,null); -- logfile entry
COMMIT;

-- ==========================================================================================================================================
EXECUTE IMMEDIATE 'TRUNCATE TABLE CSRG_PROD.BPO_TMP_RATES3 DROP STORAGE'; 

v_ddl_smt:='ALTER TABLE '||v_tab_owner||'.'||v_tab2_name||' NOLOGGING';
EXECUTE IMMEDIATE v_ddl_smt;

v_ddl_smt:='ALTER SESSION ENABLE PARALLEL DML';
EXECUTE IMMEDIATE v_ddl_smt;


-- ==============================================================================================================
-- Disable BPO_TMP_RATES3  Constraints: 
-- ==============================================================================================================
PKG_UTL_OBJMAINTENANCE.prc_disable_idx_constr_trig
   (p_exec_status_id             => v_exec_status_id, 
    p_exec_status_txt            => v_exec_status_txt,  
    p_called_by                  => v_prc_nm,  
    p_owner                      => v_tab_owner, -- CSRG_PROD
    p_tab_name                   => v_tab2_name,  
    p_disable_pk_yn              => 'Y', 
    p_disable_unq_yn             => 'Y', 
    p_disable_chk_yn             => 'N', 
    p_disable_fk_yn              => 'N', 
    p_disable_trig_yn            => 'N',
    p_disable_pk_idx             => 'N',
    p_disable_unq_idx            => 'N',
    p_disable_part_idx           => NULL,  
    p_disable_subpart_idx        => NULL,  
    p_disable_other_idx          => 'Y',
    p_part_idx_sch_pattern       => NULL,  
    p_subpart_idx_sch_pattern    => NULL,
    p_job_name                   => NULL,
    p_job_run_id                 => NULL   
   ); 


v_exec_segment_timestamp := SYSTIMESTAMP;

INSERT /*+ append PARALLEL(6)*/ INTO BPO_TMP_RATES3
SELECT /*+ PARALLEL(6) */ * 
FROM
(    SELECT A.ACCOUNT_NUMBER, A.SERVICING_SOURCE, A.TRANSACTION, A.NEW_PRODUCT,
    A.ENG_PROD_CD,A.PROD_CD,
    R.RATE_DT,R.RATE_TM,R.RATE_NO, R.SUBCHANNEL_ID,
    R.RATE as NEW_RATE,
    R.POINTS as NEW_RATE_PTS,
    A.NEW_LLPA_PTS,
    R.POINTS+A.NEW_LLPA_PTS as NEW_POINTS_PCT,

    -- Use the Ranking below to select the 'best' Rate/Point combo for the scenario based on the LLPAs.
    RANK() OVER (PARTITION BY ACCOUNT_NUMBER, TRANSACTION, NEW_PRODUCT
                 ORDER BY
                 /*FHA POINT ADJUSTMENT REMOVED ON 3/14/2015
                 -- If FHA *and* over 97.75% LTV, then select points closest to or more negative than -1.5 pts, else closest
                 -- to or greater than 0 pts.  Add 99 to ranking value for rate/point combo's that would yield
                 -- a net point value less than 0 pts (or not at least -1.5 pts (for FHA over 97.75) */
                 CASE WHEN NEW_TERM = 120
                        THEN ABS(R.POINTS+A.NEW_LLPA_PTS)    + case when R.POINTS+A.NEW_LLPA_PTS <= A.MIN_PTS /*.35*/ then 99 else 0 end
                      ELSE ABS(R.POINTS+A.NEW_LLPA_PTS)    + case when R.POINTS+A.NEW_LLPA_PTS <= A.MIN_PTS    then 99 else 0 end
                 END, R.RATE,ROWNUM) as RANK

    FROM BATCH_PRICING_INPUT A, BPO_TMP_RATES2 R
    WHERE A.SUBCHANNEL_ID = R.SUBCHANNEL_ID(+) and
    A.ENG_PROD_CD=R.ENG_PROD_CD(+) and A.TIER_CD=R.TIER_CD(+)
        --and A.ENG_PROD_CD in ('W41','W42') and A.LTV<=70
        --and A.ACCOUNT_NUMBER='62319208'
) WHERE RANK=1 
;


v_count := SQL%ROWCOUNT;

COMMIT;



-- 1. Enable Constraints, Validate Indexes On BPO_TMP_RATES3 Table .....
-- =======================================================================================================================================
    PKG_UTL_OBJMAINTENANCE.prc_enable_idx_constr
            (p_exec_status_id   => v_exec_status_id, 
             p_exec_status_txt  => v_exec_status_txt, 
             p_called_by        => v_prc_nm, 
             p_load_table_name  => v_tab2_name,
             p_job_name         => NULL,
             p_job_run_id       => NULL
             ); 
             
-- 2. Analyze Indexes On BPO_TMP_RATES3 Table .....
-- =======================================================================================================================================            
    PKG_UTL_OBJMAINTENANCE.prc_analyze_tab
        (p_table_owner                  => v_tab_owner,
         p_table_name                   => v_tab2_name, -- 'BPO_TMP_RATES3'
         p_parallel_degree              => 4, 
         p_method_opt                   => 'FOR ALL INDEXED COLUMNS SIZE AUTO', 
         p_partition_yn                 => 'N',
         p_sub_partition_yn             => 'N',
         p_min_partition_refresh_year   => NULL,
         p_max_partition_refresh_year   => NULL,
         p_job_name                     => NULL,
         p_job_run_id                   => NULL
         );  
         
v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 



INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Step 2b:  Refresh BPO_TMP_RATES3 Complete.  # Records: ',
                    v_count,v_tab2_name,v_runtime); -- logfile entry
COMMIT;

       
            
--------------------------------------------------------------------------------------------------------------
-- Step 2c - Update rate/points on BATCH_PRICING_INPUT

INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Step 2c:  Update rate/points on BATCH_PRICING_INPUT',null,null,null); -- logfile entry
COMMIT;



--Update statement replaced by MERGE statement by AT on 3/26 thinking a MERGE might run faster
/*
UPDATE BATCH_PRICING_INPUT A SET (RATE_DT,RATE_TM,RATE_NO,SUBCHANNEL_ID,NEW_RATE, NEW_RATE_PTS, NEW_POINTS_PCT) =
(    SELECT RATE_DT,RATE_TM,RATE_NO,SUBCHANNEL_ID,NEW_RATE,NEW_RATE_PTS,NEW_POINTS_PCT
    FROM BPO_TMP_RATES3 B
    WHERE A.ACCOUNT_NUMBER=B.ACCOUNT_NUMBER and
          A.SERVICING_SOURCE = B.SERVICING_SOURCE and
          A.TRANSACTION=B.TRANSACTION and
          A.NEW_PRODUCT=B.NEW_PRODUCT and
            -- Filter below prevents pricing on loans with blocking LLPA's (generally 10 or 50 points)
          NVL(A.NEW_LLPA_PTS,0)<8
) ;
*/



v_ddl_smt:='ALTER TABLE '||v_tab_owner||'.'||v_tab3_name||' NOLOGGING';
EXECUTE IMMEDIATE v_ddl_smt;



v_exec_segment_timestamp := SYSTIMESTAMP;

-- ==============================================================================================================
-- Disable BATCH_PRICING_INPUT  Constraints: 
-- ==============================================================================================================
PKG_UTL_OBJMAINTENANCE.prc_disable_idx_constr_trig
   (p_exec_status_id             => v_exec_status_id, 
    p_exec_status_txt            => v_exec_status_txt,  
    p_called_by                  => v_prc_nm,  
    p_owner                      => v_tab_owner, -- CSRG_PROD
    p_tab_name                   => v_tab3_name,  
    p_disable_pk_yn              => 'Y', 
    p_disable_unq_yn             => 'Y', 
    p_disable_chk_yn             => 'N', 
    p_disable_fk_yn              => 'N', 
    p_disable_trig_yn            => 'N',
    p_disable_pk_idx             => 'N',
    p_disable_unq_idx            => 'N',
    p_disable_part_idx           => NULL,  
    p_disable_subpart_idx        => NULL,  
    p_disable_other_idx          => 'Y',
    p_part_idx_sch_pattern       => NULL,  
    p_subpart_idx_sch_pattern    => NULL,
    p_job_name                   => NULL,
    p_job_run_id                 => NULL   
   ); 

v_ddl_smt:='ALTER SESSION ENABLE PARALLEL DML';
EXECUTE IMMEDIATE v_ddl_smt;


MERGE /*+  parallel(BATCH_PRICING_INPUT,6) parallel(BPO_TMP_RATES3,6) append */ INTO BATCH_PRICING_INPUT A

USING
        (
        SELECT
            SUBCHANNEL_ID,
            RATE_DT,
            RATE_TM,
            RATE_NO,
            TRANSACTION,
            NEW_PRODUCT,
            ENG_PROD_CD,
            NEW_LLPA_PTS,
            NEW_RATE,
            NEW_POINTS_PCT,
            NEW_RATE_PTS,
            COUNT(*)
        FROM BPO_TMP_RATES3
        GROUP BY
            SUBCHANNEL_ID,
            RATE_DT,
            RATE_TM,
            RATE_NO,
            TRANSACTION,
            NEW_PRODUCT,
            ENG_PROD_CD,
            NEW_LLPA_PTS,
            NEW_RATE,
            NEW_POINTS_PCT,
            NEW_RATE_PTS
        )
 B
ON

(
          A.TRANSACTION=B.TRANSACTION and
          A.NEW_PRODUCT=B.NEW_PRODUCT and
            A.SUBCHANNEL_ID = B.SUBCHANNEL_ID and
            A.ENG_PROD_CD = B.ENG_PROD_CD and
            A.NEW_LLPA_PTS = B.NEW_LLPA_PTS and
          NVL(A.NEW_LLPA_PTS,0)<8
)

WHEN MATCHED THEN UPDATE SET

        A.RATE_DT = B.RATE_DT,
        A.RATE_TM = B.RATE_TM,
        A.RATE_NO = B.RATE_NO,
        A.NEW_RATE = B.NEW_RATE,
        A.NEW_RATE_PTS = B.NEW_RATE_PTS,
        A.NEW_POINTS_PCT = B.NEW_POINTS_PCT

;
  

v_count := SQL%ROWCOUNT;

COMMIT;  

v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 


-- 1. Enable Constraints, Validate Indexes On BATCH_PRICING_INPUT Table .....
-- =======================================================================================================================================
    PKG_UTL_OBJMAINTENANCE.prc_enable_idx_constr
            (p_exec_status_id   => v_exec_status_id, 
             p_exec_status_txt  => v_exec_status_txt, 
             p_called_by        => v_prc_nm, 
             p_load_table_name  => v_tab3_name,
             p_job_name         => NULL,
             p_job_run_id       => NULL
             ); 
             
-- 2. Analyze Indexes On BATCH_PRICING_INPUT Table .....
-- =======================================================================================================================================            
    PKG_UTL_OBJMAINTENANCE.prc_analyze_tab
        (p_table_owner                  => v_tab_owner,
         p_table_name                   => v_tab3_name, -- 'BATCH_PRICING_INPUT'
         p_parallel_degree              => 4, 
         p_method_opt                   => 'FOR ALL INDEXED COLUMNS SIZE AUTO', 
         p_partition_yn                 => 'N',
         p_sub_partition_yn             => 'N',
         p_min_partition_refresh_year   => NULL,
         p_max_partition_refresh_year   => NULL,
         p_job_name                     => NULL,
         p_job_run_id                   => NULL
         );  




INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Step 2c:  Refresh BATCH_PRICING_INPUT Complete.  # Records: ',
                    v_count,v_tab3_name,v_runtime); -- logfile entry
COMMIT;

INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Step 2c:  #Records Priced: ',
                    (select count(*) from BATCH_PRICING_INPUT where NEW_RATE is not null),v_tab3_name,null); -- logfile entry
COMMIT;


INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Step 2c:  #Records *NOT* Priced (all): ',
                    (select count(*) from BATCH_PRICING_INPUT where NEW_RATE is null),v_tab3_name,null); -- logfile entry
COMMIT;

INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Step 2c:  #Records *NOT* Priced-LLPA Block: ',
                    (select count(*) from BATCH_PRICING_INPUT where NEW_LLPA_PTS>=8),v_tab3_name,null); -- logfile entry
COMMIT;




-- ==========================================================================================================================================
--EXECUTE IMMEDIATE 'TRUNCATE TABLE CSRG_PROD.BPO_TMP_RATES2 DROP STORAGE'; 

--v_ddl_smt:='ALTER TABLE '||v_tab_owner||'.'||v_tab1_name||' NOLOGGING';
--EXECUTE IMMEDIATE v_ddl_smt;

--EXECUTE IMMEDIATE 'TRUNCATE TABLE CSRG_PROD.BPO_TMP_RATES3 DROP STORAGE'; 

--v_ddl_smt:='ALTER TABLE '||v_tab_owner||'.'||v_tab2_name||' NOLOGGING';
--EXECUTE IMMEDIATE v_ddl_smt;

v_ddl_smt:='ALTER TABLE '||v_tab_owner||'.'||v_tab3_name||' LOGGING';
EXECUTE IMMEDIATE v_ddl_smt;

v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_total_segment_timestamp); 
            
INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'All Steps Completed', null,null,v_runtime); -- logfile entry
COMMIT;

EXCEPTION
WHEN OTHERS THEN
    --ROLLBACK; 
    v_err_msg := SQLERRM;  
    INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 4: '||v_prc_nm,'Part 4 Error  ',null, v_err_msg,null); -- logfile entry
    COMMIT; 
     RAISE_APPLICATION_ERROR(-20001,v_err_msg);
END SP_BP_4_BATCH_PRICNG_GET_RATES;
/
