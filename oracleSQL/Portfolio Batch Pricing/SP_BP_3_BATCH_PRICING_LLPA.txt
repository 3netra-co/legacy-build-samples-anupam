PROCEDURE CSRG_PROD.SP_BP_3_BATCH_PRICING_LLPA 
IS
--
-- OBJECTIVE:                       3-BATCH_PRICING_LLPA.sql
-- PURPOSE:                         To replace 3-BATCH_PRICING_LLPA.sql script
-- MODIFICATION HISTORY
-- Person           Date            Comments
-- ==============   ==============  ===================================================================================
-- E.Falkov         11/03/2017      Original Version...
-- ==============   ==============  ===================================================================================

v_prc_nm               VARCHAR2(30)    := 'SP_BP_3_BATCH_PRICING_LLPA';
v_count                VARCHAR2(100);
v_err_msg              VARCHAR2(4000);
v_ddl_smt              VARCHAR2(32676) := NULL;
v_tab_owner            VARCHAR2(100)   :='CSRG_PROD';
v_tab_name             VARCHAR2(100)    :='BATCH_PRICING_INPUT';
v_exec_status_id       NUMBER          := NULL;
v_exec_status_txt      VARCHAR2(4000)  := NULL;
v_job_run_id           NUMBER          := 0;
v_job_name             VARCHAR2(40) := 'SP_BP_3_BATCH_PRICING_LLPA';
v_line_clob            CLOB  :=NULL; 
v_llpa_list_clob       CLOB  :=NULL;


v_exec_segment_timestamp       TIMESTAMP WITH TIME ZONE:= SYSTIMESTAMP;  
v_exec_total_segment_timestamp TIMESTAMP WITH TIME ZONE:= SYSTIMESTAMP;  

v_runtime                    VARCHAR2(50):=NULL;

BEGIN 
v_exec_status_id:=0;
v_exec_status_txt:='SUCCESS';
v_exec_total_segment_timestamp := SYSTIMESTAMP;

-- Known QC issues:
-- 1 for 30FH and 15FH, when LTV under 97.75 and LLPA< -.5 then NEW_POINTS_PCT is 0 for some reason (instead of Rate Sheet Points + LLPA)


-- This procedure updates the LLPA, new rate and point info on BATCH_PRICING_INPUT from step one
-- 1.  Extract all LLPA's from Eclipse and create an executable SQL script that will sum the LLPA's
--        for all records in BATCH_PRICING_INPUT column NET_LLPA
-- 2.  Get an extract of Eclipse rates/points and find the appropriate rate/point combination for each
--        refi scenario (the rate at which the points yield closest to zero net points).  Update these
--        rate/point values into BATCH_PRICING_INPUT in the NEW_RATE and NEW_POINTS field.


--------------------------------------------------------------------------------------------------------------
-- Step 1 - Begin PL/SQL procedure to extract all the LLPA's from Eclipse table ENCOMPASS_BPO_LLPA and
-- construct a text file containing SQL code that will be later called to evaluate, sum, and update the LLPA's
-- for each loan.



--------------------------------------------------------------------------------------------------------------
-- Step 1a - The LLPA's from Eclipse will be loaded into the table BPO_TMP_LLPA_LIST which will then be saved to a text
-- file and called as SQL.




   INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 1:  Refresh LLPAs in BATCH_PRICING_INPUT' ,null,null,null); -- logfile entry
   INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 1a: Update LLPAs from VW_BPO_TMP_LLPA_A_LIST view' ,null,null,null); -- logfile entry
   COMMIT;
   
   
-- ==============================================================================================================
-- Disable BATCH_PRICING_INPUT  Constraints: 
-- ==============================================================================================================
PKG_UTL_OBJMAINTENANCE.prc_disable_idx_constr_trig
   (p_exec_status_id             => v_exec_status_id, 
    p_exec_status_txt            => v_exec_status_txt,  
    p_called_by                  => v_prc_nm,  
    p_owner                      => v_tab_owner, -- CSRG_PROD
    p_tab_name                   => v_tab_name,  
    p_disable_pk_yn              => 'Y', 
    p_disable_unq_yn             => 'Y', 
    p_disable_chk_yn             => 'N', 
    p_disable_fk_yn              => 'N', 
    p_disable_trig_yn            => 'N',
    p_disable_pk_idx             => 'N',
    p_disable_unq_idx            => 'N',
    p_disable_part_idx           => NULL,  
    p_disable_subpart_idx        => NULL,  
    p_disable_other_idx          => 'Y',
    p_part_idx_sch_pattern       => NULL,  
    p_subpart_idx_sch_pattern    => NULL,
    p_job_name                   => v_job_name,
    p_job_run_id                 => v_job_run_id   
   ); 
   
   
v_exec_segment_timestamp := SYSTIMESTAMP;   

EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
COMMIT;
--Extract Dynamic Updates

FOR The_Rec IN
              ( SELECT line,llpa_list
                FROM vw_bpo_tmp_llpa_a_list
                ORDER BY ctr
               )
LOOP        
    v_line_clob      := v_line_clob||The_Rec.line;--||CHR(10);  
    v_llpa_list_clob := v_llpa_list_clob||The_Rec.llpa_list;--||CHR(10);
       

END LOOP;


-- execute VW_BPO_TMP_LLPA_A_LIST LINE update statements
DECLARE
    v_upperbound           NUMBER;
    v_cur                  INTEGER;
    v_sql                  DBMS_SQL.VARCHAR2S;
    v_ret                  NUMBER;

BEGIN
      
    v_upperbound := CEIL(DBMS_LOB.GETLENGTH(v_line_clob) / 256);
    --DBMS_OUTPUT.PUT_LINE(v_upperbound);  

    FOR i IN 1 .. v_upperbound LOOP
    v_sql(i) := DBMS_LOB.SUBSTR(v_line_clob, -- clob statement
                                256,     -- amount
                                ((i - 1) * 256) + 1 
                                );
    --DBMS_OUTPUT.put_line(v_sql(i));  
    END LOOP;
      
         
    v_cur := DBMS_SQL.OPEN_CURSOR(1);
    --  parse sql statement
    DBMS_SQL.PARSE(v_cur,v_sql,v_sql.FIRST,v_sql.LAST,FALSE,DBMS_SQL.NATIVE);
    -- execute
    v_ret := DBMS_SQL.EXECUTE(v_cur);
    --DBMS_OUTPUT.put_line('LINE records updated '||v_ret);  
        
    IF DBMS_SQL.IS_OPEN(v_cur) THEN
        DBMS_SQL.CLOSE_CURSOR(v_cur); 
    END IF;
    
    v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 
    
    INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 1a: Update LLPA_AGENCY_PTS Complete. # Records: ',
                             v_ret,v_tab_name,v_runtime); -- logfile entry
    COMMIT;

END;


-- execute VW_BPO_TMP_LLPA_A_LIST LLPA_LIST update statements
v_exec_segment_timestamp := SYSTIMESTAMP;

DECLARE
    v_upperbound           NUMBER;
    v_cur                  INTEGER;
    v_sql                  DBMS_SQL.VARCHAR2S;
    v_ret                  NUMBER;

BEGIN

    
    v_upperbound := CEIL(DBMS_LOB.GETLENGTH(v_llpa_list_clob) / 256);
    --DBMS_OUTPUT.put_line(v_upperbound);  

      FOR i IN 1 .. v_upperbound LOOP
        v_sql(i) := DBMS_LOB.SUBSTR(v_llpa_list_clob, -- clob statement
                                    256,     -- amount
                                    ((i - 1) * 256) + 1 
                                    );
       -- DBMS_OUTPUT.put_line(v_sql(i));  
      END LOOP;
      
     
            
    v_cur := DBMS_SQL.OPEN_CURSOR(1);
    DBMS_SQL.parse(v_cur,v_sql,v_sql.FIRST,v_sql.LAST,FALSE,DBMS_SQL.native);
    v_ret := DBMS_SQL.EXECUTE(v_cur);
   -- DBMS_OUTPUT.put_line('LLPA_LIST records updated '||v_ret);  
     IF DBMS_SQL.IS_OPEN(v_cur) THEN
        DBMS_SQL.CLOSE_CURSOR(v_cur); 
    END IF;
    
    v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 
    
    INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 1a: Update LLPA_AGENCY_LIST Complete. # Records: ',
                             v_ret,v_tab_name,v_runtime); -- logfile entry
    COMMIT;

END;




INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 1b: Update LLPAs from VW_BPO_TMP_LLPA_O_LIST view' ,null,null,null); -- logfile entry
COMMIT;


v_line_clob :='';
v_llpa_list_clob := '';

v_exec_segment_timestamp := SYSTIMESTAMP;
--Extract Dynamic Updates
FOR The_Rec IN
              ( SELECT line,llpa_list
                FROM vw_bpo_tmp_llpa_o_list
                ORDER BY ctr
               )
LOOP        
    v_line_clob      := v_line_clob||The_Rec.line;--||CHR(10);  
    v_llpa_list_clob := v_llpa_list_clob||The_Rec.llpa_list;--||CHR(10);
    --DBMS_OUTPUT.put_line(The_Rec.line);          

END LOOP;


-- execute VW_BPO_TMP_LLPA_O_LIST LINE update statements

DECLARE
    v_upperbound           NUMBER;
    v_cur                  INTEGER;
    v_sql                  DBMS_SQL.VARCHAR2S;
    v_ret                  NUMBER;

BEGIN


          
    v_upperbound := CEIL(DBMS_LOB.GETLENGTH(v_line_clob) / 256);
    --DBMS_OUTPUT.PUT_LINE(v_upperbound);  

    FOR i IN 1 .. v_upperbound LOOP
    v_sql(i) := DBMS_LOB.SUBSTR(v_line_clob, -- clob statement
                                256,     -- amount
                                ((i - 1) * 256) + 1 
                                );
    --DBMS_OUTPUT.put_line(v_sql(i));  
    END LOOP;
      
         
    v_cur := DBMS_SQL.OPEN_CURSOR(1);
    --  parse sql statement
    DBMS_SQL.PARSE(v_cur,v_sql,v_sql.FIRST,v_sql.LAST,FALSE,DBMS_SQL.NATIVE);
    -- execute
    v_ret := DBMS_SQL.EXECUTE(v_cur);
    --DBMS_OUTPUT.put_line('LINE records updated '||v_ret);  
        
    IF DBMS_SQL.IS_OPEN(v_cur) THEN
        DBMS_SQL.CLOSE_CURSOR(v_cur); 
    END IF;
    
    v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 
    
    INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 1b: Update  LLPA_OTHERS_PTS Complete. # Records: ',
                             v_ret,v_tab_name,v_runtime); -- logfile entry
    COMMIT;

END;

-- execute VW_BPO_TMP_LLPA_O_LIST LLPA_LIST update statements
v_exec_segment_timestamp := SYSTIMESTAMP;

DECLARE
    v_upperbound           NUMBER;
    v_cur                  INTEGER;
    v_sql                  DBMS_SQL.VARCHAR2S;
    v_ret                  NUMBER;

BEGIN
    
    v_upperbound := CEIL(DBMS_LOB.GETLENGTH(v_llpa_list_clob) / 256);
    --DBMS_OUTPUT.put_line(v_upperbound);  

      FOR i IN 1 .. v_upperbound LOOP
        v_sql(i) := DBMS_LOB.SUBSTR(v_llpa_list_clob, -- clob statement
                                    256,     -- amount
                                    ((i - 1) * 256) + 1 
                                    );
       -- DBMS_OUTPUT.put_line(v_sql(i));  
      END LOOP;
      
     
            
    v_cur := DBMS_SQL.OPEN_CURSOR(1);
    DBMS_SQL.parse(v_cur,v_sql,v_sql.FIRST,v_sql.LAST,FALSE,DBMS_SQL.native);
    v_ret := DBMS_SQL.EXECUTE(v_cur);
    --DBMS_OUTPUT.put_line('LLPA_LIST records updated '||v_ret);  
     IF DBMS_SQL.IS_OPEN(v_cur) THEN
        DBMS_SQL.CLOSE_CURSOR(v_cur); 
    END IF;
    
    v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 
    
    INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 1b: Update  LLPA_OTHERS_LIST Complete. # Records: ',
                             v_ret,v_tab_name,v_runtime); -- logfile entry
    COMMIT;
END;


         
INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 1b: Update LLPAs Complete.: ',
                             null,null,null); -- logfile entry
COMMIT;



INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 2: Update NEW_LLPA_PTS' ,null,null,null); -- logfile entry
COMMIT;

-- LLPA Override/Test
v_exec_segment_timestamp := SYSTIMESTAMP;

UPDATE BATCH_PRICING_INPUT set NEW_LLPA_PTS = LLPA_OTHERS_PTS + (LEAST(LLPA_AGENCY_PTS, LLPA_CAP));

v_count := SQL%ROWCOUNT;

v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 

INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'Step 2: Update NEW_LLPA_PTS Complete. # Records: ',
                             v_count,v_tab_name,v_runtime); -- logfile entry


-- 1. Enable Constraints, Validate Indexes On BATCH_PRICING_INPUT Table .....
-- =======================================================================================================================================
    PKG_UTL_OBJMAINTENANCE.prc_enable_idx_constr
            (p_exec_status_id   => v_exec_status_id, 
             p_exec_status_txt  => v_exec_status_txt, 
             p_called_by        => v_prc_nm, 
             p_load_table_name  => v_tab_name,
             p_job_name         => NULL,
             p_job_run_id       => NULL
             ); 
             
-- 2. Analyze Indexes On BATCH_PRICING_INPUT Table .....
-- =======================================================================================================================================            
    PKG_UTL_OBJMAINTENANCE.prc_analyze_tab
        (p_table_owner                  => v_tab_owner,
         p_table_name                   => v_tab_name, -- 'BATCH_PRICING_INPUT'
         p_parallel_degree              => 4, 
         p_method_opt                   => 'FOR ALL INDEXED COLUMNS SIZE AUTO', 
         p_partition_yn                 => 'N',
         p_sub_partition_yn             => 'N',
         p_min_partition_refresh_year   => NULL,
         p_max_partition_refresh_year   => NULL,
         p_job_name                     => NULL,
         p_job_run_id                   => NULL
         );  



v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_total_segment_timestamp); 

INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3: '||v_prc_nm,'All LLPAs Steps Completed', null,null,v_runtime); -- logfile entry
COMMIT;



EXCEPTION
WHEN OTHERS THEN
    --ROLLBACK; 
    v_err_msg := SQLERRM;  
    INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 3:  '||v_prc_nm,'Part 3 Error  ',null, SUBSTR(v_err_msg,1,100),null); -- logfile entry
    COMMIT; 
    RAISE_APPLICATION_ERROR(-20001,v_err_msg);
END SP_BP_3_BATCH_PRICING_LLPA;
/
