PROCEDURE CSRG_PROD.SP_BP_1_INPUT_TABLES 
IS
--
-- OBJECTIVE:                       1-BATCH_PRICING_INPUT_TABLES.sql
-- PURPOSE:                         To replace 1-BATCH_PRICING_INPUT_TABLES.sql script
-- MODIFICATION HISTORY
-- Person           Date            Comments
-- ==============   ==============  ===================================================================================
-- E.Falkov         11/03/2017      Original Version...
-- ==============   ==============  ===================================================================================

v_prc_nm               VARCHAR2(30)    := 'sp_bp_1_input_tables';
v_count                VARCHAR2(100);
v_err_msg              VARCHAR2(4000);
v_ddl_smt              VARCHAR2(32676) := NULL;
v_tab_owner            VARCHAR2(100)   :='CSRG_PROD';
v_tab1_name            VARCHAR2(100)   :='BATCH_PRICING_PRODUCTS';
v_tab2_name            VARCHAR2(100)   :='BPO_INPUT_DATA';
v_tab3_name            VARCHAR2(100)   :='BPO_TMP_PROP_VALUES';
v_exec_status_id       NUMBER          := NULL;
v_exec_status_txt      VARCHAR2(4000)  := NULL;
v_job_run_id           NUMBER          := 0;
v_job_name             VARCHAR2(40) := 'SP_BP_1_INPUT_TABLES';

v_exec_segment_timestamp        TIMESTAMP WITH TIME ZONE:= SYSTIMESTAMP;   
v_exec_total_segment_timestamp  TIMESTAMP WITH TIME ZONE:= SYSTIMESTAMP;  
v_runtime                       VARCHAR2(50):=NULL;

BEGIN 
v_exec_status_id:=0;
v_exec_status_txt:='SUCCESS';
v_exec_total_segment_timestamp := SYSTIMESTAMP;

--STEP 1:- Creates TEMP input table from MDD_LOAN and MDM_PROSPECT and PROP Table for pricing


--Added by AT on 2/10/2015 to price both MDM_LOAN accounts and leads from MDM_PROSPECT that are in an active campaign
--Reason for including the step in main program is to ease editing of code, if required - for instance not wanting to process LOAN or PROSPECT

--The process creates a temporary table that will combine MDM_LOAN and MDM_PROSPECT as input table for pricing
--Table will be dropped at the end of the pricing process

--Added by AT on 5/15/2017 to update Cred Score from BATCH_PRICING_PRODUCT_FICO - a table maintained and update every 6 months on data provided by Marketing
INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 1: '||v_prc_nm,'Step 1:  Refresh Pricing Products ',null,null,null); -- logfile entry
COMMIT;

v_exec_segment_timestamp := SYSTIMESTAMP;

MERGE INTO CSRG_PROD.BATCH_PRICING_PRODUCTS PROD
USING
(
 SELECT DISTINCT ENG_PROD_CD, CRED_SCORE,MIN_PRODUCT_PTS --added min_product_pts for Anupam latest
 FROM CSRG_PROD.BATCH_PRICING_PRODUCT_FICO
 WHERE BEGIN_DATE >= TRUNC(SYSDATE)
 AND (END_DATE IS NULL OR END_DATE >= TRUNC(SYSDATE))
) FICO
ON (PROD.ENG_PROD_CD = FICO.ENG_PROD_CD)
WHEN MATCHED THEN UPDATE SET
PROD.CRED_SCORE = FICO.CRED_SCORE, --fixed anupam code with comma
PROD.MIN_PRODUCT_PTS = FICO.MIN_PRODUCT_PTS
;
COMMIT;

v_count := SQL%ROWCOUNT;



--By AT on 5/24/2017 to only price ARMs for Marketing and stop them from being priced in SW - needs update in BP_TRANS too
UPDATE CSRG_PROD.BATCH_PRICING_PRODUCTS
SET ACTIVE_FLAG = 'Y'
WHERE ENG_PROD_CD IN ('A68', 'V42');
COMMIT;

v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 

INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 1: '||v_prc_nm,'Step 1:  Refresh Products Complete.  # Records: ',
                    v_count,v_tab1_name,v_runtime); -- logfile entry
COMMIT;



INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 1: '||v_prc_nm,'Step 1:  Refresh BPO input table: ',null,null,null); -- logfile entry
COMMIT;

-- ==========================================================================================================================================
-- 1. Truncate CSRG_PROD.BPO_INPUT_DATA Table ...
-- ==========================================================================================================================================
EXECUTE IMMEDIATE 'TRUNCATE TABLE CSRG_PROD.BPO_INPUT_DATA DROP STORAGE'; 

v_ddl_smt:='ALTER TABLE '||v_tab_owner||'.'||v_tab2_name||' NOLOGGING';
EXECUTE IMMEDIATE v_ddl_smt;


-- ==============================================================================================================
-- Disable BPO_INPUT_DATA  Constraints: 
-- ==============================================================================================================
PKG_UTL_OBJMAINTENANCE.prc_disable_idx_constr_trig
   (p_exec_status_id             => v_exec_status_id, 
    p_exec_status_txt            => v_exec_status_txt,  
    p_called_by                  => v_prc_nm,  
    p_owner                      => v_tab_owner, -- CSRG_PROD
    p_tab_name                   => v_tab2_name,  
    p_disable_pk_yn              => 'Y', 
    p_disable_unq_yn             => 'Y', 
    p_disable_chk_yn             => 'N', 
    p_disable_fk_yn              => 'N', 
    p_disable_trig_yn            => 'N',
    p_disable_pk_idx             => 'N',
    p_disable_unq_idx            => 'N',
    p_disable_part_idx           => NULL,  
    p_disable_subpart_idx        => NULL,  
    p_disable_other_idx          => 'Y',
    p_part_idx_sch_pattern       => NULL,  
    p_subpart_idx_sch_pattern    => NULL,
    p_job_name                   => NULL,
    p_job_run_id                 => NULL   
   ); 

v_exec_segment_timestamp := SYSTIMESTAMP;

INSERT INTO CSRG_PROD.BPO_INPUT_DATA
--Select data from MDM_PROSPECT_VENDOR_FILE where an account number has yet not been assigned
SELECT
    VENDOR_UNIQUE_ID AS ACCOUNT_NUMBER, -- used as a proxy for account number
    SERVICING_SOURCE, -- will always be ACQ for all Ditech Acquisition programs
    VENDOR_NAME AS PORTFOLIO,
    '1' AS LOAN_STATUS_CODE,
    '01' AS LIEN_POSITION,
    TRUNC(UNPAID_BALANCE/2000,0)*2000 AS UNPAID_BALANCE, --rounded down by $2000 for pricing
    CASE  WHEN LOAN_RATE IS NULL OR LOAN_RATE = 0 THEN .04 ELSE ROUND(LOAN_RATE/100,5) END AS INTEREST_RATE, --assume a rate of 4% if rate is missing
    REMAINING_TERM,
    LOAN_TERM,
    MAIL_STATE_PRIM AS PROP_STATE, --assumed to be same as mail address
    MAIL_ZIP_PRIM AS PROP_ZIP, --assumed to be same as mail address
    '9999' AS FIPS_COUNTY_CODE, --currently do not have a way of matching zip to FIPS and therefore a default of 417K loan limit assumed
    ADJ_REM_TERM_PRICING AS ADJ_REMAINING_TERM, --Assumes all pricing at 360 term
    CASE WHEN NVL(EST_PAYMENT,0) = 0 THEN 1 ELSE EST_PAYMENT END AS PRINCIPAL_AND_INTEREST,
    PROPERTY_VALUE AS CURRENT_PROPERTY_VALUE,
    CASE WHEN SEGMENT = 'IHR' THEN 'IPV' ELSE 'AVM' END AS CURRENT_PROP_VALUE_METHOD,
    TRUNC(SYSDATE) AS CURRENT_PROP_VALUE_DATE,
    LTV,
    0 AS INVESTOR_LOAN_NO,
    INVESTOR_FULL_NAME, --will change based on nature of campaign
    1 AS NUMBER_OF_UNITS,
    '1' AS CURRENT_OCCUPANCY_CODE,
    '010' AS PROPERTY_TYPE_CODE,
    ORIGINATION_DATE, --calculated based on age of most recent trade
    'F' AS RATE_TYPE,
    CASE WHEN INVESTOR_FULL_NAME IN ('VA IRRRL', 'GINNIE MAE') THEN 'F' ELSE 'C' END AS LOAN_TYPE,
    CAST(NULL AS VARCHAR(10)) AS PRODUCT_TYPE_CODE,
    CAST(NULL AS VARCHAR(10)) AS BPMI_TYPE,
    CAST(NULL AS DATE) AS BPMI_ENDORSEMENT_DATE,
    0 AS BPMI_AMT,
    0 AS BPMI_ANNUAL_RATE,
    CAST(NULL AS VARCHAR(10)) AS LPMI_TYPE,
    CAST(NULL AS VARCHAR(10)) AS IPMI_TYPE,
    'N' AS FOREBEARANCE_FLAG,
    'N' AS BANKRUPTCY_CODE,
    CAST(NULL AS VARCHAR(100)) AS BANKRUPTCY_DISPOSITION_DESC,
    CAST(NULL AS DATE) AS BANKRUPTCY_DISPOSITION_DATE,
    0 AS DQ6_CNT,
    --CASE WHEN FICO IS NULL THEN 720 ELSE TRUNC(FICO/10,0)*10 END AS CRED_SCORE, -- rounded down by 10 for pricing for Prescreen /*Removed on 5/15/2017 by AT*/
    41 AS SUBCHANNEL_ID
FROM
CSRG_PROD.MDM_PROSPECT_VENDOR_FILE
WHERE ACTIVE_CAMPAIGN = 'Y'
UNION ALL
-- Add MDM_LOAN records
SELECT
    MDM_LOAN.ACCOUNT_NUMBER,
    SERVICING_SOURCE,
    PORTFOLIO,
    LOAN_STATUS_CODE,
    LIEN_POSITION,
    CASE WHEN NVL(FOREBEARANCE_FLAG,'N') = 'Y' THEN UNPAID_BALANCE + FOREBEARANCE_AMT ELSE UNPAID_BALANCE END AS UNPAID_BALANCE, --By AT on 1/23/2017 to add forbearance amt to upb
    INTEREST_RATE,
    REMAINING_TERM,
    LOAN_TERM,
    PROP_STATE,
    PROP_ZIP,
    FIPS_COUNTY_CODE,
    ADJ_REMAINING_TERM,
    PRINCIPAL_AND_INTEREST,
    CURRENT_PROPERTY_VALUE,
    CURRENT_PROP_VALUE_METHOD,
    CURRENT_PROP_VALUE_DATE,
    LTV,
    INVESTOR_LOAN_NO,
    INVESTOR_FULL_NAME,
    NUMBER_OF_UNITS,
    CURRENT_OCCUPANCY_CODE,
    PROPERTY_TYPE_CODE,
    ORIGINATION_DATE,
    RATE_TYPE,
    LOAN_TYPE,
    PRODUCT_TYPE_CODE,
    BPMI_TYPE,
    BPMI_ENDORSEMENT_DATE,
    BPMI_AMT, 
    BPMI_ANNUAL_RATE,
    LPMI_TYPE,
    IPMI_TYPE,
    NVL(FOREBEARANCE_FLAG,'N') AS FOREBEARANCE_FLAG,
    NVL(BANKRUPTCY_CODE,'N') AS BANKRUPTCY_CODE,
    BANKRUPTCY_DISPOSITION_DESC,
    BANKRUPTCY_DISPOSITION_DATE,
    NVL(LENGTH(REPLACE(SUBSTR(DELQ_12_MTH_STR,7,6),'0','')),0) AS DQ6_CNT,
    --720 AS CRED_SCORE, /*Removed on 5/15/2017 by AT) 
    CASE WHEN PREF_CUST.ACCOUNT_NUMBER IS NOT NULL THEN PREF_CUST.SUBCHANNEL_ID ELSE 38 END AS SUBCHANNEL_ID
FROM CSRG_PROD.MDM_LOAN,
(SELECT ACCOUNT_NUMBER, SUBCHANNEL_ID FROM VW_PREFERRED_CUSTOMERS WHERE VALID_FROM >= TRUNC(SYSDATE) AND VALID_T0 <= TRUNC(SYSDATE)) PREF_CUST
WHERE MDM_LOAN.ACCOUNT_NUMBER = PREF_CUST.ACCOUNT_NUMBER(+) 
AND LIEN_POSITION = '01' AND LOAN_STATUS_CODE = '1'
--AND ROWNUM < 100 --E.F.
;
  
v_count := SQL%ROWCOUNT;



-- 1. Enable Constraints, Validate Indexes On BPO_INPUT_DATA Table .....
-- =======================================================================================================================================
    PKG_UTL_OBJMAINTENANCE.prc_enable_idx_constr
            (p_exec_status_id   => v_exec_status_id, 
             p_exec_status_txt  => v_exec_status_txt, 
             p_called_by        => v_prc_nm, 
             p_load_table_name  => v_tab2_name,
             p_job_name         => NULL,
             p_job_run_id       => NULL
             ); 
             
-- 2. Analyze Indexes On BPO_INPUT_DATA Table .....
-- =======================================================================================================================================            
    PKG_UTL_OBJMAINTENANCE.prc_analyze_tab
        (p_table_owner                  => v_tab_owner,
         p_table_name                   => v_tab2_name, -- 'BPO_INPUT_DATA'
         p_parallel_degree              => 4, 
         p_method_opt                   => 'FOR ALL INDEXED COLUMNS SIZE AUTO', 
         p_partition_yn                 => 'N',
         p_sub_partition_yn             => 'N',
         p_min_partition_refresh_year   => NULL,
         p_max_partition_refresh_year   => NULL,
         p_job_name                     => NULL,
         p_job_run_id                   => NULL
         ); 
  
v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 


INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 1: '||v_prc_nm,'Step 1:  Refresh BPO_INPUT_DATA Complete.  # Records: ',
                    v_count,v_tab2_name,v_runtime); -- logfile entry
COMMIT;



INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 1: '||v_prc_nm,'Step 2:  Refresh Property Value File: ',null,null,null); -- logfile entry
COMMIT;

v_exec_segment_timestamp := SYSTIMESTAMP;


-- ==========================================================================================================================================
-- 2. Truncate CSRG_PROD.BPO_TMP_PROP_VALUES Table ...
-- ==========================================================================================================================================

EXECUTE IMMEDIATE 'TRUNCATE TABLE CSRG_PROD.BPO_TMP_PROP_VALUES DROP STORAGE'; 


v_ddl_smt:='ALTER TABLE '||v_tab_owner||'.'||v_tab3_name||' NOLOGGING';
EXECUTE IMMEDIATE v_ddl_smt;

-- ==============================================================================================================
-- Disable BPO_TMP_PROP_VALUES  Constraints: 
-- ==============================================================================================================
PKG_UTL_OBJMAINTENANCE.prc_disable_idx_constr_trig
   (p_exec_status_id             => v_exec_status_id, 
    p_exec_status_txt            => v_exec_status_txt,  
    p_called_by                  => v_prc_nm,  
    p_owner                      => v_tab_owner, -- CSRG_PROD
    p_tab_name                   => v_tab3_name,  
    p_disable_pk_yn              => 'Y', 
    p_disable_unq_yn             => 'Y', 
    p_disable_chk_yn             => 'N', 
    p_disable_fk_yn              => 'N', 
    p_disable_trig_yn            => 'N',
    p_disable_pk_idx             => 'N',
    p_disable_unq_idx            => 'N',
    p_disable_part_idx           => NULL,  
    p_disable_subpart_idx        => NULL,  
    p_disable_other_idx          => 'Y',
    p_part_idx_sch_pattern       => NULL,  
    p_subpart_idx_sch_pattern    => NULL,
    p_job_name                   => NULL,
    p_job_run_id                 => NULL   
   ); 

INSERT INTO CSRG_PROD.BPO_TMP_PROP_VALUES
SELECT
    LM.PORTFOLIO,
    LM.SERVICING_SOURCE,
    LM.ACCOUNT_NUMBER,
    CASE WHEN LM.CURRENT_PROP_VALUE_METHOD IN ('IPV', 'HVE')  THEN TRUNC(CURRENT_PROPERTY_VALUE)
         WHEN LM.SERVICING_SOURCE = 'MAN' THEN TRUNC(CURRENT_PROPERTY_VALUE)
         ELSE NULL
         END AS AGENCY_VALUE,

    CASE WHEN AVM.VALUATION>0 THEN TRUNC(VALUATION)
         WHEN LM.CURRENT_PROP_VALUE_METHOD NOT IN ('IPV', 'HVE') THEN TRUNC(LM.CURRENT_PROPERTY_VALUE)
         END AS AVM_VALUE,
    CASE WHEN AVM.VALUATION>0 THEN 'AVM'
         WHEN LM.CURRENT_PROP_VALUE_METHOD NOT IN ('IPV', 'HVE') THEN LM.CURRENT_PROP_VALUE_METHOD
         END AS AVM_METHOD,
    CASE WHEN AVM.VALUATION>0 AND LM.SERVICING_SOURCE <> 'MAN' THEN AVM_DATE
         WHEN LM.CURRENT_PROP_VALUE_METHOD NOT IN ('IPV', 'HVE') THEN LM.CURRENT_PROP_VALUE_DATE
         END AS AVM_DATE
FROM
    CSRG_PROD.BPO_INPUT_DATA LM,
    (select A.*,
    RANK() OVER (PARTITION BY ACCOUNT_NUMBER order by AVM_DATE DESC, ROWNUM) AS RANK
    from CSRG_PROD.LM_CORE_LOGIC_AVM A
    WHERE AVM_DATE >= (TRUNC(SYSDATE) - 730)
     ) AVM
WHERE
    LM.LOAN_STATUS_CODE in ('1','9')
    and LM.ACCOUNT_NUMBER = AVM.ACCOUNT_NUMBER(+)
    and LM.SERVICING_SOURCE = AVM.SERVICING_SOURCE(+)
    AND (AVM.RANK = 1 OR AVM.RANK IS NULL)
;
v_count := SQL%ROWCOUNT;



-- 1. Enable Constraints, Validate Indexes On BPO_TMP_PROP_VALUES Table .....
-- =======================================================================================================================================
    PKG_UTL_OBJMAINTENANCE.prc_enable_idx_constr
            (p_exec_status_id   => v_exec_status_id, 
             p_exec_status_txt  => v_exec_status_txt, 
             p_called_by        => v_prc_nm, 
             p_load_table_name  => v_tab3_name,
             p_job_name         => NULL,
             p_job_run_id       => NULL
             ); 
             
-- 2. Analyze Indexes On BPO_TMP_PROP_VALUES Table .....
-- =======================================================================================================================================            
    PKG_UTL_OBJMAINTENANCE.prc_analyze_tab
        (p_table_owner                  => v_tab_owner,
         p_table_name                   => v_tab3_name, -- 'BPO_TMP_PROP_VALUES'
         p_parallel_degree              => 4, 
         p_method_opt                   => 'FOR ALL INDEXED COLUMNS SIZE AUTO', 
         p_partition_yn                 => 'N',
         p_sub_partition_yn             => 'N',
         p_min_partition_refresh_year   => NULL,
         p_max_partition_refresh_year   => NULL,
         p_job_name                     => NULL,
         p_job_run_id                   => NULL
         );  
         
v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_segment_timestamp); 
  
INSERT INTO CSRG_PROD.BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 1: '||v_prc_nm,'Step 2:  Refresh Complete.  # Records: ',
                    v_count,v_tab3_name,v_runtime); -- logfile entry
COMMIT;

v_runtime:=PKG_UTL_GLOBAL.fun_get_runtime(v_exec_total_segment_timestamp); 
            
INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 1: '||v_prc_nm,'All Steps Completed', null,null,v_runtime); -- logfile entry
COMMIT;



EXCEPTION
WHEN OTHERS THEN
    --ROLLBACK; 
    v_err_msg := SQLERRM;  
    INSERT INTO BATCH_PRICING_LOG VALUES (SYSTIMESTAMP,'Part 1:  '||v_prc_nm,'Part 1 Error  ',null, v_err_msg,null); -- logfile entry
    COMMIT; 
    RAISE_APPLICATION_ERROR(-20001,v_err_msg);
END SP_BP_1_INPUT_TABLES;
/
