DROP TABLE X_COMM_PATTERN;
CREATE TABLE X_COMM_PATTERN
(
ACCOUNT_NUMBER VARCHAR(12),
MKTG_EXCLUSIONS VARCHAR(40),
PAYOFF_DATE DATE,
STATUS VARCHAR(40)
);
COMMIT;

CREATE INDEX X_COMM_IND ON X_COMM_PATTERN(ACCOUNT_NUMBER);
COMMIT;

INSERT INTO X_COMM_PATTERN
SELECT
M.ACCOUNT_NUMBER,
M.MKTG_EXCLUSIONS,
P.PAYOFF_DATE,
CASE WHEN P.ACCOUNT_NUMBER IS NULL THEN 'ACTIVE'
WHEN P.FIRST_MORT_LENDER_NAME_STD = 'DITECH/GT' THEN 'RETAINED' ELSE
CASE WHEN SUBSTR(P.CASE,1,1) IN ('1','2') THEN 'SOLD'
WHEN SUBSTR(P.CASE,1,1) IN ('3') THEN 'REFI' ELSE 'DR/NA' END
END AS STATUS
FROM
(
	SELECT * FROM
	(
			SELECT
			W.ACCOUNT_NUMBER,
			CASE WHEN W.MKTG_EXCLUSIONS = 'MARKETABLE' THEN
			CASE WHEN W.NEW_PI_SAVINGS_MO >= 50 THEN 'MARKETABLE OVER $50' ELSE 'MARKETABLE UNDER $50' END
			ELSE CASE WHEN SUBSTR(W.MKTG_EXCLUSIONS,1,2) < '52' THEN  'NOT MARKETABLE - OPS' ELSE 'NOT MARKETABLE - MKT' END END AS MKTG_EXCLUSIONS
			FROM AT_NEW_WATERFALL_20170727 W, MDM_LOAN L
			WHERE W.ACCOUNT_NUMBER = L.ACCOUNT_NUMBER
			AND W.LIEN_POSITION = '01'
			AND (L.PAYOFF_DATE IS NULL OR (L.PAYOFF_DATE BETWEEN '8/1/2017' AND '12/31/2017'))
			AND L.LOAN_STATUS_CODE <> 'X'
			ORDER BY DBMS_RANDOM.VALUE
	)
	WHERE ROWNUM <= 200000
) M,
PO_ANALYSIS_DATA P
WHERE M.ACCOUNT_NUMBER = P.ACCOUNT_NUMBER(+)
AND (P.PAYOFF_DATE IS NULL OR (P.PAYOFF_DATE BETWEEN '8/1/2017' AND '12/31/2017'));
COMMIT;

ALTER TABLE X_COMM_PATTERN
ADD
(
CALL_COUNT NUMBER,
WEB_COUNT NUMBER,
MKTG_COUNT NUMBER,
EVENT1 VARCHAR(50),
EVENT2 VARCHAR(50),
EVENT3 VARCHAR(50),
EVENT4 VARCHAR(50),
EVENT5 VARCHAR(50),
EVENT6 VARCHAR(50),
EVENT7 VARCHAR(50),
EVENT8 VARCHAR(50),
EVENT9 VARCHAR(50),
EVENT10 VARCHAR(50),
EVENT11 VARCHAR(50),
EVENT12 VARCHAR(50),
EVENT13 VARCHAR(50),
EVENT14 VARCHAR(50),
EVENT15 VARCHAR(50),
DAYS_SINCE_LAST_EVENT NUMBER
);
COMMIT;

DROP TABLE X_COMM_DUMP;
CREATE TABLE X_COMM_DUMP
(
ACCOUNT_NUMBER VARCHAR(12),
EVENT_DATE DATE,
EVENT_TYP VARCHAR(50)
);
COMMIT;

CREATE INDEX X_COMM_D_IND ON X_COMM_DUMP(ACCOUNT_NUMBER, EVENT_DATE);
COMMIT;

INSERT INTO X_COMM_DUMP
SELECT
S.ACCOUNT_NUMBER,
S.CALL_START_DATE AS EVENT_DATE,
CASE WHEN S.SMARTWATCH_TRANSFER_RESULT IN ('SALES', 'SALES_TEMPE') THEN 'IVR-SALES' ELSE 'IVR-SELF SERVE' END AS EVENT_TYPE
FROM
SVC_IVR_CALLS S,
(SELECT IVR_CALL_ID FROM SVC_CUST_SERVC_CALLS WHERE IVR_CALL_ID IS NOT NULL) S1,
X_COMM_PATTERN X
WHERE S.IVR_CALL_ID = S1.IVR_CALL_ID(+)
AND S.ACCOUNT_NUMBER = X.ACCOUNT_NUMBER
AND S1.IVR_CALL_ID IS NULL
AND S.CALL_MONTH BETWEEN '8/1/2017' AND '12/31/2017'
AND TRUNC(S.CALL_START_DATE) <= NVL(X.PAYOFF_DATE,TO_DATE('12/31/2040','MM/DD/YYYY'));
COMMIT;

INSERT INTO X_COMM_DUMP
SELECT
S.ACCOUNT_NUMBER,
S.CALL_DATE_TIME AS EVENT_DATE,
'CSRV-' || REASON_CODE AS EVENT_TYPE
FROM SVC_CUST_SERVC_CALLS S,
X_COMM_PATTERN X
WHERE S.ACCOUNT_NUMBER = X.ACCOUNT_NUMBER
AND S.CALL_MONTH BETWEEN '8/1/2017' AND '12/31/2017'
AND TRUNC(S.CALL_DATE_TIME) <= NVL(X.PAYOFF_DATE,TO_DATE('12/31/2040','MM/DD/YYYY'));
COMMIT;

INSERT INTO X_COMM_DUMP
SELECT
X.ACCOUNT_NUMBER,
S.CREATED_DATE AS EVENT_DATE,
CASE WHEN EVENT_TYPE IN ('PAYOFFQUOTE', 'PAYOFFLETTER', 'MORTGCALC') THEN 'WEB-' || TRIM(EVENT_TYPE)
WHEN SUBSTR(EVENT_TYPE,1,2) = 'SW' THEN 'WEB-SW' ELSE 'WEB-OTHERS' END AS EVENT_TYPE
FROM
SDR_CORE.WEB_CLICKS_HISTORY@renpup2sdrp S,
X_COMM_PATTERN X
WHERE LPAD(S.ACCOUNT_ID,10,'0') = X.ACCOUNT_NUMBER
AND TRUNC(S.CREATED_DATE) BETWEEN '8/1/2017' AND '12/31/2017'
AND TRUNC(S.CREATED_DATE) <= NVL(X.PAYOFF_DATE,TO_DATE('12/31/2040','MM/DD/YYYY'));
COMMIT;

INSERT INTO X_COMM_DUMP
SELECT
S.ACCOUNT_NUMBER,
S.DISPOSITION_DATE AS EVEN_DATE,
CELL.EVENT_TYPE
FROM
SOLICITATION_HISTORY S,
(
		SELECT
		C.CELL_KEY,
		C.TIME_PERIOD,
		CASE WHEN C1.PROMOTED_BENEFIT IS NULL THEN 'MKTG-' || C.METHOD_CODE ELSE 'MKTG-' || C1.PROMOTED_BENEFIT END AS EVENT_TYPE
		FROM CAMPAIGN_CELL_T C,
		DPA_CAMPAIGN_CELLS_TEMP C1
		WHERE C.CELL_KEY = C1.CELL_KEY(+)
		AND C.TIME_PERIOD BETWEEN '2017-08' AND '2017-12'
		AND C.OFFER_KEY NOT IN (9074, 8107, 9076,9075)
) CELL,
X_COMM_PATTERN X
WHERE S.ACCOUNT_NUMBER = X.ACCOUNT_NUMBER
AND S.CELL_KEY = CELL.CELL_KEY
AND TRUNC(S.DISPOSITION_DATE) <= NVL(X.PAYOFF_DATE,TO_DATE('12/31/2040','MM/DD/YYYY'));;
COMMIT;

UPDATE X_COMM_PATTERN SET
CALL_COUNT = 0,
WEB_COUNT = 0,
MKTG_COUNT = 0,
EVENT1 = NULL,
EVENT2 = NULL,
EVENT3 = NULL,
EVENT4 = NULL,
EVENT5 = NULL,
EVENT6 = NULL,
EVENT7 = NULL,
EVENT8 = NULL,
EVENT9 = NULL,
EVENT10 = NULL,
EVENT11 = NULL,
EVENT12 = NULL,
EVENT13 = NULL,
EVENT14 = NULL,
EVENT15 = NULL,
DAYS_SINCE_LAST_EVENT = 0;
COMMIT;

MERGE INTO X_COMM_PATTERN A
USING
(
	SELECT
	ACCOUNT_NUMBER,
	SUM(CASE WHEN EVENT_TYP LIKE ('IVR%') OR EVENT_TYP LIKE ('CSRV%') THEN 1 ELSE 0 END) AS CALL_COUNT,
	SUM(CASE WHEN EVENT_TYP LIKE ('WEB%') THEN 1 ELSE 0 END) AS WEB_COUNT,
	SUM(CASE WHEN EVENT_TYP LIKE ('MKTG%') THEN 1 ELSE 0 END) AS MKTG_COUNT,
	MAX(DECODE(EVENT_RANK,1,EVENT_TYP)) AS EVENT1,
	MAX(DECODE(EVENT_RANK,2,EVENT_TYP)) AS EVENT2,
	MAX(DECODE(EVENT_RANK,3,EVENT_TYP)) AS EVENT3,
	MAX(DECODE(EVENT_RANK,4,EVENT_TYP)) AS EVENT4,
	MAX(DECODE(EVENT_RANK,5,EVENT_TYP)) AS EVENT5,
	MAX(DECODE(EVENT_RANK,6,EVENT_TYP)) AS EVENT6,
	MAX(DECODE(EVENT_RANK,7,EVENT_TYP)) AS EVENT7,
	MAX(DECODE(EVENT_RANK,8,EVENT_TYP)) AS EVENT8,
	MAX(DECODE(EVENT_RANK,9,EVENT_TYP)) AS EVENT9,
	MAX(DECODE(EVENT_RANK,10,EVENT_TYP)) AS EVENT10,
	MAX(DECODE(EVENT_RANK,11,EVENT_TYP)) AS EVENT11,
	MAX(DECODE(EVENT_RANK,12,EVENT_TYP)) AS EVENT12,
	MAX(DECODE(EVENT_RANK,13,EVENT_TYP)) AS EVENT13,
	MAX(DECODE(EVENT_RANK,14,EVENT_TYP)) AS EVENT14,
	MAX(DECODE(EVENT_RANK,15,EVENT_TYP)) AS EVENT15,
	MAX(DECODE(EVENT_RANK,1,EVENT_DATE)) AS LAST_EVENT_DATE
	FROM
	(
		SELECT
		X.*,
		RANK() OVER(PARTITION BY ACCOUNT_NUMBER ORDER BY EVENT_DATE DESC, (CASE WHEN EVENT_TYP LIKE ('MKTG%') THEN 4 ELSE 1 END), ROWNUM) AS EVENT_RANK
		FROM X_COMM_DUMP X
		--WHERE EVENT_TYP NOT LIKE ('MKTG%')
	)
	GROUP BY ACCOUNT_NUMBER
) B
ON (A.ACCOUNT_NUMBER = B.ACCOUNT_NUMBER)
WHEN MATCHED THEN UPDATE SET
A.CALL_COUNT = B.CALL_COUNT,
A.WEB_COUNT = B.WEB_COUNT,
A.MKTG_COUNT = B.MKTG_COUNT,
A.EVENT1 = B.EVENT1,
A.EVENT2 = B.EVENT2,
A.EVENT3 = B.EVENT3,
A.EVENT4 = B.EVENT4,
A.EVENT5 = B.EVENT5,
A.EVENT6 = B.EVENT6,
A.EVENT7 = B.EVENT7,
A.EVENT8 = B.EVENT8,
A.EVENT9 = B.EVENT9,
A.EVENT10 = B.EVENT10,
A.EVENT11 = B.EVENT11,
A.EVENT12 = B.EVENT12,
A.EVENT13 = B.EVENT13,
A.EVENT14 = B.EVENT14,
A.EVENT15 = B.EVENT15,
A.DAYS_SINCE_LAST_EVENT = LEAST(NVL(A.PAYOFF_DATE,TO_DATE('12/31/2040','MM/DD/YYYY')), TO_DATE('12/31/2017','MM/DD/YYYY')) - TRUNC(B.LAST_EVENT_DATE);
COMMIT;

ALTER TABLE X_COMM_PATTERN
ADD
(UNPAID_BALANCE NUMBER,
LTV NUMBER,
CURRENT_RATE NUMBER);
COMMIT;

MERGE INTO X_COMM_PATTERN A
USING
			(
			SELECT
			ACCOUNT_NUMBER,
			UNPAID_BALANCE,
			LTV,
			ROUND(CURRENT_RATE * 100, 3) AS CURRENT_RATE
			FROM AT_NEW_WATERFALL_20170727 W
			) B
ON (A.ACCOUNT_NUMBER = B.ACCOUNT_NUMBER)
WHEN MATCHED THEN UPDATE SET
A.UNPAID_BALANCE = B.UNPAID_BALANCE,
A.LTV = B.LTV,
A.CURRENT_RATE = B.CURRENT_RATE
;
COMMIT;

